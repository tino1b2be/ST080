#include "ST080Utils.h"	// this is where the FreeRTOS stuff (functions and variable are too)
#include "composer.h"	//composer mode functionalities
//#include "freestyle.h" //freestyle mode functionalities not yet implemented
//#include "playback.h"  //playback mode functionalities not yet implemented

// define task priorities
#define COMPOSER_TASK_PRIORITY 2
#define PLAYBACK_TASK_PRIORITY 2
#define FREESTYLE_TASK_PRIORITY 2

// define task stack sizes
#define COMPOSER_STACK_SIZE 128
#define PLAYBACK_STACK_SIZE 128
#define FREESTYLE_STACK_SIZE 128

volatile struct booleans {
	volatile int composer = 0;
	volatile int playback = 0;
	volatile int freestyle = 0;
};

// ============================================================================
int main(void) {

	booleans * mode = {0, 0, 0};

	/* Create Tasks */
	xTaskCreate(vComposerTask, (signed char * ) "Composer Task", COMPOSER_STACK_SIZE, NULL,
			COMPOSER_TASK_PRIORITY, NULL);

	xTaskCreate(vPlaybackTask, (signed char * ) "Playback Task", PLAYBACK_STACK_SIZE,
						NULL, PLAYBACK_TASK_PRIORITY, NULL);

	xTaskCreate(vFreestyleTask, (signed char * ) "Freestyle Task", FREESTYLE_STACK_SIZE,
				NULL, FREESTYLE_TASK_PRIORITY, NULL);

	vTaskStartScheduler(); // This should never return.
	// Will only get here if there was insufficient memory to create
	// the idle task.
	while(1);
}
