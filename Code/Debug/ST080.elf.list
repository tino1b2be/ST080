
ST080.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000226c  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  080023f4  080023f4  0000a3f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  080023f8  080023f8  0000a3f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000001c  20000000  080023fc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000156c  20000020  08002418  00010020  2**3
                  ALLOC
  6 ._user_heap_stack 00000400  2000158c  08002418  0001158c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0001001c  2**0
                  CONTENTS, READONLY
  8 .debug_info   000058f0  00000000  00000000  0001004a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000137d  00000000  00000000  0001593a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000840  00000000  00000000  00016cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000758  00000000  00000000  000174f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00003305  00000000  00000000  00017c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002d8f  00000000  00000000  0001af55  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000082  00000000  00000000  0001dce4  2**0
                  CONTENTS, READONLY
 15 .debug_frame  000019c8  00000000  00000000  0001dd68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080023dc 	.word	0x080023dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080023dc 	.word	0x080023dc
 80001c4:	20000024 	.word	0x20000024

080001c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001cc:	4b11      	ldr	r3, [pc, #68]	; (8000214 <SystemInit+0x4c>)
 80001ce:	4a11      	ldr	r2, [pc, #68]	; (8000214 <SystemInit+0x4c>)
 80001d0:	6812      	ldr	r2, [r2, #0]
 80001d2:	f042 0201 	orr.w	r2, r2, #1
 80001d6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001d8:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <SystemInit+0x4c>)
 80001da:	2200      	movs	r2, #0
 80001dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001de:	4a0d      	ldr	r2, [pc, #52]	; (8000214 <SystemInit+0x4c>)
 80001e0:	4b0c      	ldr	r3, [pc, #48]	; (8000214 <SystemInit+0x4c>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001ec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80001ee:	4b09      	ldr	r3, [pc, #36]	; (8000214 <SystemInit+0x4c>)
 80001f0:	4a09      	ldr	r2, [pc, #36]	; (8000218 <SystemInit+0x50>)
 80001f2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80001f4:	4b07      	ldr	r3, [pc, #28]	; (8000214 <SystemInit+0x4c>)
 80001f6:	4a07      	ldr	r2, [pc, #28]	; (8000214 <SystemInit+0x4c>)
 80001f8:	6812      	ldr	r2, [r2, #0]
 80001fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80001fe:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <SystemInit+0x4c>)
 8000202:	2200      	movs	r2, #0
 8000204:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000206:	f000 f80b 	bl	8000220 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800020a:	4b04      	ldr	r3, [pc, #16]	; (800021c <SystemInit+0x54>)
 800020c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000210:	609a      	str	r2, [r3, #8]
#endif
}
 8000212:	bd80      	pop	{r7, pc}
 8000214:	40023800 	.word	0x40023800
 8000218:	24003010 	.word	0x24003010
 800021c:	e000ed00 	.word	0xe000ed00

08000220 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000226:	2300      	movs	r3, #0
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	2300      	movs	r3, #0
 800022c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800022e:	4b35      	ldr	r3, [pc, #212]	; (8000304 <SetSysClock+0xe4>)
 8000230:	4a34      	ldr	r2, [pc, #208]	; (8000304 <SetSysClock+0xe4>)
 8000232:	6812      	ldr	r2, [r2, #0]
 8000234:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000238:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800023a:	4b32      	ldr	r3, [pc, #200]	; (8000304 <SetSysClock+0xe4>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000242:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3301      	adds	r3, #1
 8000248:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d103      	bne.n	8000258 <SetSysClock+0x38>
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000256:	d1f0      	bne.n	800023a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000258:	4b2a      	ldr	r3, [pc, #168]	; (8000304 <SetSysClock+0xe4>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000260:	2b00      	cmp	r3, #0
 8000262:	d002      	beq.n	800026a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000264:	2301      	movs	r3, #1
 8000266:	603b      	str	r3, [r7, #0]
 8000268:	e001      	b.n	800026e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800026a:	2300      	movs	r3, #0
 800026c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	2b01      	cmp	r3, #1
 8000272:	d142      	bne.n	80002fa <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000274:	4b23      	ldr	r3, [pc, #140]	; (8000304 <SetSysClock+0xe4>)
 8000276:	4a23      	ldr	r2, [pc, #140]	; (8000304 <SetSysClock+0xe4>)
 8000278:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800027a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800027e:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000280:	4b21      	ldr	r3, [pc, #132]	; (8000308 <SetSysClock+0xe8>)
 8000282:	4a21      	ldr	r2, [pc, #132]	; (8000308 <SetSysClock+0xe8>)
 8000284:	6812      	ldr	r2, [r2, #0]
 8000286:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800028a:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800028c:	4b1d      	ldr	r3, [pc, #116]	; (8000304 <SetSysClock+0xe4>)
 800028e:	4a1d      	ldr	r2, [pc, #116]	; (8000304 <SetSysClock+0xe4>)
 8000290:	6892      	ldr	r2, [r2, #8]
 8000292:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000294:	4b1b      	ldr	r3, [pc, #108]	; (8000304 <SetSysClock+0xe4>)
 8000296:	4a1b      	ldr	r2, [pc, #108]	; (8000304 <SetSysClock+0xe4>)
 8000298:	6892      	ldr	r2, [r2, #8]
 800029a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800029e:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80002a0:	4b18      	ldr	r3, [pc, #96]	; (8000304 <SetSysClock+0xe4>)
 80002a2:	4a18      	ldr	r2, [pc, #96]	; (8000304 <SetSysClock+0xe4>)
 80002a4:	6892      	ldr	r2, [r2, #8]
 80002a6:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80002aa:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80002ac:	4b15      	ldr	r3, [pc, #84]	; (8000304 <SetSysClock+0xe4>)
 80002ae:	4a17      	ldr	r2, [pc, #92]	; (800030c <SetSysClock+0xec>)
 80002b0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80002b2:	4b14      	ldr	r3, [pc, #80]	; (8000304 <SetSysClock+0xe4>)
 80002b4:	4a13      	ldr	r2, [pc, #76]	; (8000304 <SetSysClock+0xe4>)
 80002b6:	6812      	ldr	r2, [r2, #0]
 80002b8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80002bc:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80002be:	bf00      	nop
 80002c0:	4b10      	ldr	r3, [pc, #64]	; (8000304 <SetSysClock+0xe4>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d0f9      	beq.n	80002c0 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80002cc:	4b10      	ldr	r3, [pc, #64]	; (8000310 <SetSysClock+0xf0>)
 80002ce:	f240 6205 	movw	r2, #1541	; 0x605
 80002d2:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80002d4:	4b0b      	ldr	r3, [pc, #44]	; (8000304 <SetSysClock+0xe4>)
 80002d6:	4a0b      	ldr	r2, [pc, #44]	; (8000304 <SetSysClock+0xe4>)
 80002d8:	6892      	ldr	r2, [r2, #8]
 80002da:	f022 0203 	bic.w	r2, r2, #3
 80002de:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80002e0:	4b08      	ldr	r3, [pc, #32]	; (8000304 <SetSysClock+0xe4>)
 80002e2:	4a08      	ldr	r2, [pc, #32]	; (8000304 <SetSysClock+0xe4>)
 80002e4:	6892      	ldr	r2, [r2, #8]
 80002e6:	f042 0202 	orr.w	r2, r2, #2
 80002ea:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80002ec:	bf00      	nop
 80002ee:	4b05      	ldr	r3, [pc, #20]	; (8000304 <SetSysClock+0xe4>)
 80002f0:	689b      	ldr	r3, [r3, #8]
 80002f2:	f003 030c 	and.w	r3, r3, #12
 80002f6:	2b08      	cmp	r3, #8
 80002f8:	d1f9      	bne.n	80002ee <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	40023800 	.word	0x40023800
 8000308:	40007000 	.word	0x40007000
 800030c:	0740690a 	.word	0x0740690a
 8000310:	40023c00 	.word	0x40023c00

08000314 <USART2_IRQHandler>:
/******************************************************************************/
// ----------------------------------------------------------------------------

uint16_t uart2_cnt = 0;

void USART2_IRQHandler( void ) {
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	++uart2_cnt;
 8000318:	4b05      	ldr	r3, [pc, #20]	; (8000330 <USART2_IRQHandler+0x1c>)
 800031a:	881b      	ldrh	r3, [r3, #0]
 800031c:	3301      	adds	r3, #1
 800031e:	b29a      	uxth	r2, r3
 8000320:	4b03      	ldr	r3, [pc, #12]	; (8000330 <USART2_IRQHandler+0x1c>)
 8000322:	801a      	strh	r2, [r3, #0]
	USART_ClearFlag( USART2, USART_FLAG_TC );
 8000324:	4803      	ldr	r0, [pc, #12]	; (8000334 <USART2_IRQHandler+0x20>)
 8000326:	2140      	movs	r1, #64	; 0x40
 8000328:	f001 fe96 	bl	8002058 <USART_ClearFlag>
}
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	2000003c 	.word	0x2000003c
 8000334:	40004400 	.word	0x40004400

08000338 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
}
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000348:	e7fe      	b.n	8000348 <HardFault_Handler+0x4>
 800034a:	bf00      	nop

0800034c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000350:	e7fe      	b.n	8000350 <MemManage_Handler+0x4>
 8000352:	bf00      	nop

08000354 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000358:	e7fe      	b.n	8000358 <BusFault_Handler+0x4>
 800035a:	bf00      	nop

0800035c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000360:	e7fe      	b.n	8000360 <UsageFault_Handler+0x4>
 8000362:	bf00      	nop

08000364 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
}
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr

08000370 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000370:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000372:	f000 b804 	b.w	800037e <LoopCopyDataInit>

08000376 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000376:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <LoopFillZerobss+0x22>)
  ldr  r3, [r3, r1]
 8000378:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800037a:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800037c:	3104      	adds	r1, #4

0800037e <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800037e:	480f      	ldr	r0, [pc, #60]	; (80003bc <LoopFillZerobss+0x26>)
  ldr  r3, =_edata
 8000380:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <LoopFillZerobss+0x2a>)
  adds  r2, r0, r1
 8000382:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000384:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000386:	f4ff aff6 	bcc.w	8000376 <CopyDataInit>
  ldr  r2, =_sbss
 800038a:	4a0e      	ldr	r2, [pc, #56]	; (80003c4 <LoopFillZerobss+0x2e>)
  b  LoopFillZerobss
 800038c:	f000 b803 	b.w	8000396 <LoopFillZerobss>

08000390 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000390:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000392:	f842 3b04 	str.w	r3, [r2], #4

08000396 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000396:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <LoopFillZerobss+0x32>)
  cmp  r2, r3
 8000398:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800039a:	f4ff aff9 	bcc.w	8000390 <FillZerobss>
  
  
/*FPU settings*/
 ldr     r0, =0xE000ED88           /* Enable CP10,CP11 */
 800039e:	480b      	ldr	r0, [pc, #44]	; (80003cc <LoopFillZerobss+0x36>)
 ldr     r1,[r0]
 80003a0:	6801      	ldr	r1, [r0, #0]
 orr     r1,r1,#(0xF << 20)
 80003a2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 str     r1,[r0]
 80003a6:	6001      	str	r1, [r0, #0]
	
/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003a8:	f7ff ff0e 	bl	80001c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003ac:	f001 ffa6 	bl	80022fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003b0:	f000 f81c 	bl	80003ec <main>
  bx  lr    
 80003b4:	4770      	bx	lr
 80003b6:	0000      	.short	0x0000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80003b8:	080023fc 	.word	0x080023fc
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80003c0:	2000001c 	.word	0x2000001c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80003c4:	20000020 	.word	0x20000020
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003c8:	2000158c 	.word	0x2000158c
  cmp  r2, r3
  bcc  FillZerobss
  
  
/*FPU settings*/
 ldr     r0, =0xE000ED88           /* Enable CP10,CP11 */
 80003cc:	e000ed88 	.word	0xe000ed88

080003d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003d0:	f7ff bffe 	b.w	80003d0 <ADC_IRQHandler>

080003d4 <EXTI0_IRQHandler>:
  * @brief  This function handles External line 0 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line0) != RESET)
 80003d8:	2001      	movs	r0, #1
 80003da:	f001 fef9 	bl	80021d0 <EXTI_GetITStatus>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d002      	beq.n	80003ea <EXTI0_IRQHandler+0x16>
	{
		/* Clear the EXTI line 0 pending bit */
		EXTI_ClearITPendingBit(EXTI_Line0);
 80003e4:	2001      	movs	r0, #1
 80003e6:	f001 ff17 	bl	8002218 <EXTI_ClearITPendingBit>
	}
}
 80003ea:	bd80      	pop	{r7, pc}

080003ec <main>:

// ============================================================================
int main( void )
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af04      	add	r7, sp, #16

	/* Create Tasks */
	xTaskCreate( vLEDTask, ( signed char * ) "LED Task", LED_STACK_SIZE, NULL, LED_TASK_PRIORITY, NULL );
 80003f2:	2301      	movs	r3, #1
 80003f4:	9300      	str	r3, [sp, #0]
 80003f6:	2300      	movs	r3, #0
 80003f8:	9301      	str	r3, [sp, #4]
 80003fa:	2300      	movs	r3, #0
 80003fc:	9302      	str	r3, [sp, #8]
 80003fe:	2300      	movs	r3, #0
 8000400:	9303      	str	r3, [sp, #12]
 8000402:	4804      	ldr	r0, [pc, #16]	; (8000414 <main+0x28>)
 8000404:	4904      	ldr	r1, [pc, #16]	; (8000418 <main+0x2c>)
 8000406:	2280      	movs	r2, #128	; 0x80
 8000408:	2300      	movs	r3, #0
 800040a:	f000 fad5 	bl	80009b8 <xTaskGenericCreate>

    vTaskStartScheduler(); // This should never return.
 800040e:	f000 fbc1 	bl	8000b94 <vTaskStartScheduler>

    // Will only get here if there was insufficient memory to create
    // the idle task.
    for( ;; );  
 8000412:	e7fe      	b.n	8000412 <main+0x26>
 8000414:	0800041d 	.word	0x0800041d
 8000418:	08002390 	.word	0x08002390

0800041c <vLEDTask>:

/*
 * LED Toggle Task
 */
static void vLEDTask( void *pvparameters )
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	uint32_t LEDdelay = 1000; /* Delay in ticks */
 8000424:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000428:	60fb      	str	r3, [r7, #12]

	STM_EVAL_LEDInit(LED4);
 800042a:	2000      	movs	r0, #0
 800042c:	f001 ff02 	bl	8002234 <STM_EVAL_LEDInit>
	STM_EVAL_LEDOff(LED4);
 8000430:	2000      	movs	r0, #0
 8000432:	f001 ff2d 	bl	8002290 <STM_EVAL_LEDOff>
	STM_EVAL_LEDInit(LED5);
 8000436:	2002      	movs	r0, #2
 8000438:	f001 fefc 	bl	8002234 <STM_EVAL_LEDInit>
	STM_EVAL_LEDOff(LED5);
 800043c:	2002      	movs	r0, #2
 800043e:	f001 ff27 	bl	8002290 <STM_EVAL_LEDOff>

	for(;;)
	{
		STM_EVAL_LEDToggle(LED4);
 8000442:	2000      	movs	r0, #0
 8000444:	f001 ff3c 	bl	80022c0 <STM_EVAL_LEDToggle>
		STM_EVAL_LEDToggle(LED5);
 8000448:	2002      	movs	r0, #2
 800044a:	f001 ff39 	bl	80022c0 <STM_EVAL_LEDToggle>

		vTaskDelay(configTICK_RATE_HZ*1);
 800044e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000452:	f000 fb77 	bl	8000b44 <vTaskDelay>
	}
 8000456:	e7f4      	b.n	8000442 <vLEDTask+0x26>

08000458 <vApplicationTickHook>:
}


// This FreeRTOS callback function gets called once per tick (default = 1000Hz).
// ---------------------------------------------------------------------------- 
void vApplicationTickHook( void ) {
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
    ++tickTime;
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <vApplicationTickHook+0x20>)
 800045e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000462:	3201      	adds	r2, #1
 8000464:	f143 0300 	adc.w	r3, r3, #0
 8000468:	4903      	ldr	r1, [pc, #12]	; (8000478 <vApplicationTickHook+0x20>)
 800046a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	20000040 	.word	0x20000040

0800047c <vApplicationIdleHook>:

// This FreeRTOS call-back function gets when no other task is ready to execute.
// On a completely unloaded system this is getting called at over 2.5MHz!
// ---------------------------------------------------------------------------- 
void vApplicationIdleHook( void ) {
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
    ++u64IdleTicksCnt;
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <vApplicationIdleHook+0x20>)
 8000482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000486:	3201      	adds	r2, #1
 8000488:	f143 0300 	adc.w	r3, r3, #0
 800048c:	4903      	ldr	r1, [pc, #12]	; (800049c <vApplicationIdleHook+0x20>)
 800048e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	20000048 	.word	0x20000048

080004a0 <vApplicationMallocFailedHook>:

// A required FreeRTOS function.
// ---------------------------------------------------------------------------- 
void vApplicationMallocFailedHook( void ) {
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
    configASSERT( 0 );  // Latch on any failure / error.
 80004a4:	f04f 0050 	mov.w	r0, #80	; 0x50
 80004a8:	f380 8811 	msr	BASEPRI, r0
 80004ac:	e7fe      	b.n	80004ac <vApplicationMallocFailedHook+0xc>
 80004ae:	bf00      	nop

080004b0 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
 80004b6:	2300      	movs	r3, #0
 80004b8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80004ba:	f000 fa53 	bl	8000964 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80004be:	4b10      	ldr	r3, [pc, #64]	; (8000500 <xTimerCreateTimerTask+0x50>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d00f      	beq.n	80004e6 <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY, &xTimerTaskHandle );	
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY, NULL);
 80004c6:	2302      	movs	r3, #2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	2300      	movs	r3, #0
 80004cc:	9301      	str	r3, [sp, #4]
 80004ce:	2300      	movs	r3, #0
 80004d0:	9302      	str	r3, [sp, #8]
 80004d2:	2300      	movs	r3, #0
 80004d4:	9303      	str	r3, [sp, #12]
 80004d6:	480b      	ldr	r0, [pc, #44]	; (8000504 <xTimerCreateTimerTask+0x54>)
 80004d8:	490b      	ldr	r1, [pc, #44]	; (8000508 <xTimerCreateTimerTask+0x58>)
 80004da:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004de:	2300      	movs	r3, #0
 80004e0:	f000 fa6a 	bl	80009b8 <xTaskGenericCreate>
 80004e4:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d104      	bne.n	80004f6 <xTimerCreateTimerTask+0x46>
 80004ec:	f04f 0050 	mov.w	r0, #80	; 0x50
 80004f0:	f380 8811 	msr	BASEPRI, r0
 80004f4:	e7fe      	b.n	80004f4 <xTimerCreateTimerTask+0x44>
	return xReturn;
 80004f6:	687b      	ldr	r3, [r7, #4]
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000080 	.word	0x20000080
 8000504:	0800060d 	.word	0x0800060d
 8000508:	0800239c 	.word	0x0800239c

0800050c <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b088      	sub	sp, #32
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
 8000518:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
 800051a:	2300      	movs	r3, #0
 800051c:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800051e:	4b1d      	ldr	r3, [pc, #116]	; (8000594 <xTimerGenericCommand+0x88>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d030      	beq.n	8000588 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d11c      	bne.n	8000572 <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8000538:	f000 ff84 	bl	8001444 <xTaskGetSchedulerState>
 800053c:	4603      	mov	r3, r0
 800053e:	2b01      	cmp	r3, #1
 8000540:	d10b      	bne.n	800055a <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 8000542:	4b14      	ldr	r3, [pc, #80]	; (8000594 <xTimerGenericCommand+0x88>)
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	f107 0310 	add.w	r3, r7, #16
 800054a:	4610      	mov	r0, r2
 800054c:	4619      	mov	r1, r3
 800054e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000550:	2300      	movs	r3, #0
 8000552:	f001 f899 	bl	8001688 <xQueueGenericSend>
 8000556:	61f8      	str	r0, [r7, #28]
 8000558:	e016      	b.n	8000588 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <xTimerGenericCommand+0x88>)
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	f107 0310 	add.w	r3, r7, #16
 8000562:	4610      	mov	r0, r2
 8000564:	4619      	mov	r1, r3
 8000566:	2200      	movs	r2, #0
 8000568:	2300      	movs	r3, #0
 800056a:	f001 f88d 	bl	8001688 <xQueueGenericSend>
 800056e:	61f8      	str	r0, [r7, #28]
 8000570:	e00a      	b.n	8000588 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8000572:	4b08      	ldr	r3, [pc, #32]	; (8000594 <xTimerGenericCommand+0x88>)
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	f107 0310 	add.w	r3, r7, #16
 800057a:	4610      	mov	r0, r2
 800057c:	4619      	mov	r1, r3
 800057e:	683a      	ldr	r2, [r7, #0]
 8000580:	2300      	movs	r3, #0
 8000582:	f001 f921 	bl	80017c8 <xQueueGenericSendFromISR>
 8000586:	61f8      	str	r0, [r7, #28]
		}
		
		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}
	
	return xReturn;
 8000588:	69fb      	ldr	r3, [r7, #28]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3720      	adds	r7, #32
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000080 	.word	0x20000080

08000598 <prvProcessExpiredTimer>:
	
#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af02      	add	r7, sp, #8
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80005a2:	4b19      	ldr	r3, [pc, #100]	; (8000608 <prvProcessExpiredTimer+0x70>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	68db      	ldr	r3, [r3, #12]
 80005aa:	60fb      	str	r3, [r7, #12]
	vListRemove( &( pxTimer->xTimerListItem ) );
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	3304      	adds	r3, #4
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 fd29 	bl	8002008 <vListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	69db      	ldr	r3, [r3, #28]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d11d      	bne.n	80005fa <prvProcessExpiredTimer+0x62>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	699a      	ldr	r2, [r3, #24]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4413      	add	r3, r2
 80005c6:	68f8      	ldr	r0, [r7, #12]
 80005c8:	4619      	mov	r1, r3
 80005ca:	683a      	ldr	r2, [r7, #0]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f000 f8ab 	bl	8000728 <prvInsertTimerInActiveList>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d110      	bne.n	80005fa <prvProcessExpiredTimer+0x62>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 80005d8:	2300      	movs	r3, #0
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	68f8      	ldr	r0, [r7, #12]
 80005de:	2100      	movs	r1, #0
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	2300      	movs	r3, #0
 80005e4:	f7ff ff92 	bl	800050c <xTimerGenericCommand>
 80005e8:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d104      	bne.n	80005fa <prvProcessExpiredTimer+0x62>
 80005f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80005f4:	f380 8811 	msr	BASEPRI, r0
 80005f8:	e7fe      	b.n	80005f8 <prvProcessExpiredTimer+0x60>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005fe:	68f8      	ldr	r0, [r7, #12]
 8000600:	4798      	blx	r3
}
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000078 	.word	0x20000078

0800060c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	4618      	mov	r0, r3
 800061a:	f000 f83f 	bl	800069c <prvGetNextExpireTime>
 800061e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	68f8      	ldr	r0, [r7, #12]
 8000624:	4619      	mov	r1, r3
 8000626:	f000 f803 	bl	8000630 <prvProcessTimerOrBlockTask>
		
		/* Empty the command queue. */
		prvProcessReceivedCommands();		
 800062a:	f000 f8bf 	bl	80007ac <prvProcessReceivedCommands>
	}
 800062e:	e7f1      	b.n	8000614 <prvTimerTask+0x8>

08000630 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
 800063a:	f000 fae5 	bl	8000c08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800063e:	f107 0308 	add.w	r3, r7, #8
 8000642:	4618      	mov	r0, r3
 8000644:	f000 f84e 	bl	80006e4 <prvSampleTimeNow>
 8000648:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d11e      	bne.n	800068e <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d10a      	bne.n	800066c <prvProcessTimerOrBlockTask+0x3c>
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	429a      	cmp	r2, r3
 800065c:	d806      	bhi.n	800066c <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
 800065e:	f000 fae1 	bl	8000c24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	68f9      	ldr	r1, [r7, #12]
 8000666:	f7ff ff97 	bl	8000598 <prvProcessExpiredTimer>
 800066a:	e012      	b.n	8000692 <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <prvProcessTimerOrBlockTask+0x68>)
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	6879      	ldr	r1, [r7, #4]
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	1acb      	subs	r3, r1, r3
 8000676:	4610      	mov	r0, r2
 8000678:	4619      	mov	r1, r3
 800067a:	f001 fad3 	bl	8001c24 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 800067e:	f000 fad1 	bl	8000c24 <xTaskResumeAll>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d104      	bne.n	8000692 <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 8000688:	f001 fba0 	bl	8001dcc <vPortYieldFromISR>
 800068c:	e001      	b.n	8000692 <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			xTaskResumeAll();
 800068e:	f000 fac9 	bl	8000c24 <xTaskResumeAll>
		}
	}
}
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000080 	.word	0x20000080

0800069c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80006a4:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <prvGetNextExpireTime+0x44>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	bf14      	ite	ne
 80006ae:	2300      	movne	r3, #0
 80006b0:	2301      	moveq	r3, #1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	461a      	mov	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d105      	bne.n	80006ce <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80006c2:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <prvGetNextExpireTime+0x44>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	e001      	b.n	80006d2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80006d2:	68fb      	ldr	r3, [r7, #12]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	20000078 	.word	0x20000078

080006e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
 80006ec:	f000 fb1e 	bl	8000d2c <xTaskGetTickCount>
 80006f0:	60f8      	str	r0, [r7, #12]
	
	if( xTimeNow < xLastTime )
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <prvSampleTimeNow+0x40>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	68fa      	ldr	r2, [r7, #12]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d208      	bcs.n	800070e <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <prvSampleTimeNow+0x40>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4618      	mov	r0, r3
 8000702:	f000 f8d3 	bl	80008ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2201      	movs	r2, #1
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	e002      	b.n	8000714 <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
	}
	
	xLastTime = xTimeNow;
 8000714:	4b03      	ldr	r3, [pc, #12]	; (8000724 <prvSampleTimeNow+0x40>)
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	601a      	str	r2, [r3, #0]
	
	return xTimeNow;
 800071a:	68fb      	ldr	r3, [r7, #12]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000084 	.word	0x20000084

08000728 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
 8000734:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	68ba      	ldr	r2, [r7, #8]
 800073e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	68fa      	ldr	r2, [r7, #12]
 8000744:	611a      	str	r2, [r3, #16]
	
	if( xNextExpiryTime <= xTimeNow )
 8000746:	68ba      	ldr	r2, [r7, #8]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	429a      	cmp	r2, r3
 800074c:	d812      	bhi.n	8000774 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	1ad2      	subs	r2, r2, r3
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	429a      	cmp	r2, r3
 800075a:	d302      	bcc.n	8000762 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800075c:	2301      	movs	r3, #1
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	e01b      	b.n	800079a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <prvInsertTimerInActiveList+0x7c>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	3304      	adds	r3, #4
 800076a:	4610      	mov	r0, r2
 800076c:	4619      	mov	r1, r3
 800076e:	f001 fc13 	bl	8001f98 <vListInsert>
 8000772:	e012      	b.n	800079a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	429a      	cmp	r2, r3
 800077a:	d206      	bcs.n	800078a <prvInsertTimerInActiveList+0x62>
 800077c:	68ba      	ldr	r2, [r7, #8]
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	429a      	cmp	r2, r3
 8000782:	d302      	bcc.n	800078a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8000784:	2301      	movs	r3, #1
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	e007      	b.n	800079a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800078a:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <prvInsertTimerInActiveList+0x80>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	3304      	adds	r3, #4
 8000792:	4610      	mov	r0, r2
 8000794:	4619      	mov	r1, r3
 8000796:	f001 fbff 	bl	8001f98 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800079a:	697b      	ldr	r3, [r7, #20]
}
 800079c:	4618      	mov	r0, r3
 800079e:	3718      	adds	r7, #24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2000007c 	.word	0x2000007c
 80007a8:	20000078 	.word	0x20000078

080007ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ff95 	bl	80006e4 <prvSampleTimeNow>
 80007ba:	61f8      	str	r0, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80007bc:	e063      	b.n	8000886 <prvProcessReceivedCommands+0xda>
	{
		pxTimer = xMessage.pxTimer;
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
 80007c2:	69bb      	ldr	r3, [r7, #24]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d008      	beq.n	80007da <prvProcessReceivedCommands+0x2e>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80007c8:	69bb      	ldr	r3, [r7, #24]
 80007ca:	695b      	ldr	r3, [r3, #20]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d004      	beq.n	80007da <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				vListRemove( &( pxTimer->xTimerListItem ) );
 80007d0:	69bb      	ldr	r3, [r7, #24]
 80007d2:	3304      	adds	r3, #4
 80007d4:	4618      	mov	r0, r3
 80007d6:	f001 fc17 	bl	8002008 <vListRemove>
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );
		
		switch( xMessage.xMessageID )
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	2b03      	cmp	r3, #3
 80007de:	d851      	bhi.n	8000884 <prvProcessReceivedCommands+0xd8>
 80007e0:	a201      	add	r2, pc, #4	; (adr r2, 80007e8 <prvProcessReceivedCommands+0x3c>)
 80007e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e6:	bf00      	nop
 80007e8:	080007f9 	.word	0x080007f9
 80007ec:	08000885 	.word	0x08000885
 80007f0:	0800084f 	.word	0x0800084f
 80007f4:	0800087d 	.word	0x0800087d
		{
			case tmrCOMMAND_START :	
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	69bb      	ldr	r3, [r7, #24]
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	441a      	add	r2, r3
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	69b8      	ldr	r0, [r7, #24]
 8000804:	4611      	mov	r1, r2
 8000806:	69fa      	ldr	r2, [r7, #28]
 8000808:	f7ff ff8e 	bl	8000728 <prvInsertTimerInActiveList>
 800080c:	4603      	mov	r3, r0
 800080e:	2b01      	cmp	r3, #1
 8000810:	d11c      	bne.n	800084c <prvProcessReceivedCommands+0xa0>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8000812:	69bb      	ldr	r3, [r7, #24]
 8000814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000816:	69b8      	ldr	r0, [r7, #24]
 8000818:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 800081a:	69bb      	ldr	r3, [r7, #24]
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d114      	bne.n	800084c <prvProcessReceivedCommands+0xa0>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8000822:	68fa      	ldr	r2, [r7, #12]
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	4413      	add	r3, r2
 800082a:	2200      	movs	r2, #0
 800082c:	9200      	str	r2, [sp, #0]
 800082e:	69b8      	ldr	r0, [r7, #24]
 8000830:	2100      	movs	r1, #0
 8000832:	461a      	mov	r2, r3
 8000834:	2300      	movs	r3, #0
 8000836:	f7ff fe69 	bl	800050c <xTimerGenericCommand>
 800083a:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d104      	bne.n	800084c <prvProcessReceivedCommands+0xa0>
 8000842:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000846:	f380 8811 	msr	BASEPRI, r0
 800084a:	e7fe      	b.n	800084a <prvProcessReceivedCommands+0x9e>
						( void ) xResult;
					}
				}
				break;
 800084c:	e01b      	b.n	8000886 <prvProcessReceivedCommands+0xda>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8000854:	69bb      	ldr	r3, [r7, #24]
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d104      	bne.n	8000866 <prvProcessReceivedCommands+0xba>
 800085c:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000860:	f380 8811 	msr	BASEPRI, r0
 8000864:	e7fe      	b.n	8000864 <prvProcessReceivedCommands+0xb8>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8000866:	69bb      	ldr	r3, [r7, #24]
 8000868:	699a      	ldr	r2, [r3, #24]
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	4413      	add	r3, r2
 800086e:	69b8      	ldr	r0, [r7, #24]
 8000870:	4619      	mov	r1, r3
 8000872:	69fa      	ldr	r2, [r7, #28]
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	f7ff ff57 	bl	8000728 <prvInsertTimerInActiveList>
				break;
 800087a:	e004      	b.n	8000886 <prvProcessReceivedCommands+0xda>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
 800087c:	69b8      	ldr	r0, [r7, #24]
 800087e:	f001 fa37 	bl	8001cf0 <vPortFree>
				break;
 8000882:	e000      	b.n	8000886 <prvProcessReceivedCommands+0xda>

			default	:			
				/* Don't expect to get here. */
				break;
 8000884:	bf00      	nop

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <prvProcessReceivedCommands+0xfc>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	4610      	mov	r0, r2
 8000890:	4619      	mov	r1, r3
 8000892:	2200      	movs	r2, #0
 8000894:	2300      	movs	r3, #0
 8000896:	f000 fff9 	bl	800188c <xQueueGenericReceive>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d18e      	bne.n	80007be <prvProcessReceivedCommands+0x12>
			default	:			
				/* Don't expect to get here. */
				break;
		}
	}
}
 80008a0:	3720      	adds	r7, #32
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000080 	.word	0x20000080

080008ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	; 0x28
 80008b0:	af02      	add	r7, sp, #8
 80008b2:	6078      	str	r0, [r7, #4]
	
	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80008b4:	e03f      	b.n	8000936 <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80008b6:	4b29      	ldr	r3, [pc, #164]	; (800095c <prvSwitchTimerLists+0xb0>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80008c0:	4b26      	ldr	r3, [pc, #152]	; (800095c <prvSwitchTimerLists+0xb0>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	68db      	ldr	r3, [r3, #12]
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	61bb      	str	r3, [r7, #24]
		vListRemove( &( pxTimer->xTimerListItem ) );
 80008ca:	69bb      	ldr	r3, [r7, #24]
 80008cc:	3304      	adds	r3, #4
 80008ce:	4618      	mov	r0, r3
 80008d0:	f001 fb9a 	bl	8002008 <vListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008d8:	69b8      	ldr	r0, [r7, #24]
 80008da:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 80008dc:	69bb      	ldr	r3, [r7, #24]
 80008de:	69db      	ldr	r3, [r3, #28]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d128      	bne.n	8000936 <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	699a      	ldr	r2, [r3, #24]
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	4413      	add	r3, r2
 80008ec:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
 80008ee:	697a      	ldr	r2, [r7, #20]
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d90e      	bls.n	8000914 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80008f6:	69bb      	ldr	r3, [r7, #24]
 80008f8:	697a      	ldr	r2, [r7, #20]
 80008fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80008fc:	69bb      	ldr	r3, [r7, #24]
 80008fe:	69ba      	ldr	r2, [r7, #24]
 8000900:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8000902:	4b16      	ldr	r3, [pc, #88]	; (800095c <prvSwitchTimerLists+0xb0>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	69bb      	ldr	r3, [r7, #24]
 8000908:	3304      	adds	r3, #4
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	f001 fb43 	bl	8001f98 <vListInsert>
 8000912:	e010      	b.n	8000936 <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8000914:	2300      	movs	r3, #0
 8000916:	9300      	str	r3, [sp, #0]
 8000918:	69b8      	ldr	r0, [r7, #24]
 800091a:	2100      	movs	r1, #0
 800091c:	69fa      	ldr	r2, [r7, #28]
 800091e:	2300      	movs	r3, #0
 8000920:	f7ff fdf4 	bl	800050c <xTimerGenericCommand>
 8000924:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d104      	bne.n	8000936 <prvSwitchTimerLists+0x8a>
 800092c:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000930:	f380 8811 	msr	BASEPRI, r0
 8000934:	e7fe      	b.n	8000934 <prvSwitchTimerLists+0x88>
	
	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <prvSwitchTimerLists+0xb0>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d1ba      	bne.n	80008b6 <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <prvSwitchTimerLists+0xb0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <prvSwitchTimerLists+0xb4>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	4b04      	ldr	r3, [pc, #16]	; (800095c <prvSwitchTimerLists+0xb0>)
 800094c:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800094e:	4b04      	ldr	r3, [pc, #16]	; (8000960 <prvSwitchTimerLists+0xb4>)
 8000950:	68fa      	ldr	r2, [r7, #12]
 8000952:	601a      	str	r2, [r3, #0]
}
 8000954:	3720      	adds	r7, #32
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000078 	.word	0x20000078
 8000960:	2000007c 	.word	0x2000007c

08000964 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8000968:	f001 fa3c 	bl	8001de4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800096c:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <prvCheckForValidListAndQueue+0x40>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d113      	bne.n	800099c <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8000974:	480c      	ldr	r0, [pc, #48]	; (80009a8 <prvCheckForValidListAndQueue+0x44>)
 8000976:	f001 fabb 	bl	8001ef0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800097a:	480c      	ldr	r0, [pc, #48]	; (80009ac <prvCheckForValidListAndQueue+0x48>)
 800097c:	f001 fab8 	bl	8001ef0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8000980:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <prvCheckForValidListAndQueue+0x4c>)
 8000982:	4a09      	ldr	r2, [pc, #36]	; (80009a8 <prvCheckForValidListAndQueue+0x44>)
 8000984:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <prvCheckForValidListAndQueue+0x50>)
 8000988:	4a08      	ldr	r2, [pc, #32]	; (80009ac <prvCheckForValidListAndQueue+0x48>)
 800098a:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 800098c:	200a      	movs	r0, #10
 800098e:	210c      	movs	r1, #12
 8000990:	2200      	movs	r2, #0
 8000992:	f000 fe0d 	bl	80015b0 <xQueueGenericCreate>
 8000996:	4602      	mov	r2, r0
 8000998:	4b02      	ldr	r3, [pc, #8]	; (80009a4 <prvCheckForValidListAndQueue+0x40>)
 800099a:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
 800099c:	f001 fa34 	bl	8001e08 <vPortExitCritical>
}
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000080 	.word	0x20000080
 80009a8:	20000050 	.word	0x20000050
 80009ac:	20000064 	.word	0x20000064
 80009b0:	20000078 	.word	0x20000078
 80009b4:	2000007c 	.word	0x2000007c

080009b8 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af02      	add	r7, sp, #8
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	4613      	mov	r3, r2
 80009c6:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d104      	bne.n	80009d8 <xTaskGenericCreate+0x20>
 80009ce:	f04f 0050 	mov.w	r0, #80	; 0x50
 80009d2:	f380 8811 	msr	BASEPRI, r0
 80009d6:	e7fe      	b.n	80009d6 <xTaskGenericCreate+0x1e>
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );
 80009d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009da:	2b04      	cmp	r3, #4
 80009dc:	d904      	bls.n	80009e8 <xTaskGenericCreate+0x30>
 80009de:	f04f 0050 	mov.w	r0, #80	; 0x50
 80009e2:	f380 8811 	msr	BASEPRI, r0
 80009e6:	e7fe      	b.n	80009e6 <xTaskGenericCreate+0x2e>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 80009e8:	88fb      	ldrh	r3, [r7, #6]
 80009ea:	4618      	mov	r0, r3
 80009ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80009ee:	f000 fcd7 	bl	80013a0 <prvAllocateTCBAndStack>
 80009f2:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d07e      	beq.n	8000af8 <xTaskGenericCreate+0x140>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 80009fa:	69bb      	ldr	r3, [r7, #24]
 80009fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009fe:	88fb      	ldrh	r3, [r7, #6]
 8000a00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000a04:	3b01      	subs	r3, #1
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	4413      	add	r3, r2
 8000a0a:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	f023 0307 	bic.w	r3, r3, #7
 8000a12:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d004      	beq.n	8000a28 <xTaskGenericCreate+0x70>
 8000a1e:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000a22:	f380 8811 	msr	BASEPRI, r0
 8000a26:	e7fe      	b.n	8000a26 <xTaskGenericCreate+0x6e>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8000a28:	88fb      	ldrh	r3, [r7, #6]
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	69b8      	ldr	r0, [r7, #24]
 8000a2e:	68b9      	ldr	r1, [r7, #8]
 8000a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a34:	f000 fbd0 	bl	80011d8 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000a38:	6978      	ldr	r0, [r7, #20]
 8000a3a:	68f9      	ldr	r1, [r7, #12]
 8000a3c:	683a      	ldr	r2, [r7, #0]
 8000a3e:	f001 f961 	bl	8001d04 <pxPortInitialiseStack>
 8000a42:	4602      	mov	r2, r0
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
 8000a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d002      	beq.n	8000a54 <xTaskGenericCreate+0x9c>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 8000a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a50:	69ba      	ldr	r2, [r7, #24]
 8000a52:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
 8000a54:	f001 f9c6 	bl	8001de4 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8000a58:	4b33      	ldr	r3, [pc, #204]	; (8000b28 <xTaskGenericCreate+0x170>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	1c5a      	adds	r2, r3, #1
 8000a5e:	4b32      	ldr	r3, [pc, #200]	; (8000b28 <xTaskGenericCreate+0x170>)
 8000a60:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 8000a62:	4b32      	ldr	r3, [pc, #200]	; (8000b2c <xTaskGenericCreate+0x174>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d109      	bne.n	8000a7e <xTaskGenericCreate+0xc6>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8000a6a:	4b30      	ldr	r3, [pc, #192]	; (8000b2c <xTaskGenericCreate+0x174>)
 8000a6c:	69ba      	ldr	r2, [r7, #24]
 8000a6e:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 8000a70:	4b2d      	ldr	r3, [pc, #180]	; (8000b28 <xTaskGenericCreate+0x170>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d10f      	bne.n	8000a98 <xTaskGenericCreate+0xe0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8000a78:	f000 fbe4 	bl	8001244 <prvInitialiseTaskLists>
 8000a7c:	e00c      	b.n	8000a98 <xTaskGenericCreate+0xe0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8000a7e:	4b2c      	ldr	r3, [pc, #176]	; (8000b30 <xTaskGenericCreate+0x178>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d108      	bne.n	8000a98 <xTaskGenericCreate+0xe0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8000a86:	4b29      	ldr	r3, [pc, #164]	; (8000b2c <xTaskGenericCreate+0x174>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d802      	bhi.n	8000a98 <xTaskGenericCreate+0xe0>
					{
						pxCurrentTCB = pxNewTCB;
 8000a92:	4b26      	ldr	r3, [pc, #152]	; (8000b2c <xTaskGenericCreate+0x174>)
 8000a94:	69ba      	ldr	r2, [r7, #24]
 8000a96:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a9c:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <xTaskGenericCreate+0x17c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d903      	bls.n	8000aac <xTaskGenericCreate+0xf4>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aa8:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <xTaskGenericCreate+0x17c>)
 8000aaa:	601a      	str	r2, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTCBNumber;
 8000aac:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <xTaskGenericCreate+0x180>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif
			uxTCBNumber++;
 8000ab4:	4b20      	ldr	r3, [pc, #128]	; (8000b38 <xTaskGenericCreate+0x180>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	1c5a      	adds	r2, r3, #1
 8000aba:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <xTaskGenericCreate+0x180>)
 8000abc:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ac2:	4b1e      	ldr	r3, [pc, #120]	; (8000b3c <xTaskGenericCreate+0x184>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d903      	bls.n	8000ad2 <xTaskGenericCreate+0x11a>
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ace:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <xTaskGenericCreate+0x184>)
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	4413      	add	r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	4a18      	ldr	r2, [pc, #96]	; (8000b40 <xTaskGenericCreate+0x188>)
 8000ae0:	441a      	add	r2, r3
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f001 fa2d 	bl	8001f48 <vListInsertEnd>

			xReturn = pdPASS;
 8000aee:	2301      	movs	r3, #1
 8000af0:	61fb      	str	r3, [r7, #28]
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8000af2:	f001 f989 	bl	8001e08 <vPortExitCritical>
 8000af6:	e002      	b.n	8000afe <xTaskGenericCreate+0x146>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000af8:	f04f 33ff 	mov.w	r3, #4294967295
 8000afc:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d10b      	bne.n	8000b1c <xTaskGenericCreate+0x164>
	{
		if( xSchedulerRunning != pdFALSE )
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <xTaskGenericCreate+0x178>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d007      	beq.n	8000b1c <xTaskGenericCreate+0x164>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8000b0c:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <xTaskGenericCreate+0x174>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d201      	bcs.n	8000b1c <xTaskGenericCreate+0x164>
			{
				portYIELD_WITHIN_API();
 8000b18:	f001 f958 	bl	8001dcc <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
 8000b1c:	69fb      	ldr	r3, [r7, #28]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3720      	adds	r7, #32
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000160 	.word	0x20000160
 8000b2c:	20000088 	.word	0x20000088
 8000b30:	20000170 	.word	0x20000170
 8000b34:	20000168 	.word	0x20000168
 8000b38:	20000184 	.word	0x20000184
 8000b3c:	2000016c 	.word	0x2000016c
 8000b40:	2000008c 	.word	0x2000008c

08000b44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d012      	beq.n	8000b7c <vTaskDelay+0x38>
		{
			vTaskSuspendAll();
 8000b56:	f000 f857 	bl	8000c08 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <vTaskDelay+0x48>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <vTaskDelay+0x4c>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f001 fa4c 	bl	8002008 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8000b70:	68b8      	ldr	r0, [r7, #8]
 8000b72:	f000 fbdf 	bl	8001334 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8000b76:	f000 f855 	bl	8000c24 <xTaskResumeAll>
 8000b7a:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d101      	bne.n	8000b86 <vTaskDelay+0x42>
		{
			portYIELD_WITHIN_API();
 8000b82:	f001 f923 	bl	8001dcc <vPortYieldFromISR>
		}
	}
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000164 	.word	0x20000164
 8000b90:	20000088 	.word	0x20000088

08000b94 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	9301      	str	r3, [sp, #4]
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	9302      	str	r3, [sp, #8]
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	9303      	str	r3, [sp, #12]
 8000baa:	4813      	ldr	r0, [pc, #76]	; (8000bf8 <vTaskStartScheduler+0x64>)
 8000bac:	4913      	ldr	r1, [pc, #76]	; (8000bfc <vTaskStartScheduler+0x68>)
 8000bae:	2282      	movs	r2, #130	; 0x82
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f7ff ff01 	bl	80009b8 <xTaskGenericCreate>
 8000bb6:	6078      	str	r0, [r7, #4]
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d102      	bne.n	8000bc4 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
 8000bbe:	f7ff fc77 	bl	80004b0 <xTimerCreateTimerTask>
 8000bc2:	6078      	str	r0, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d10b      	bne.n	8000be2 <vTaskStartScheduler+0x4e>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
 8000bca:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000bce:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <vTaskStartScheduler+0x6c>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <vTaskStartScheduler+0x70>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000bde:	f001 f8d9 	bl	8001d94 <xPortStartScheduler>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d104      	bne.n	8000bf2 <vTaskStartScheduler+0x5e>
 8000be8:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000bec:	f380 8811 	msr	BASEPRI, r0
 8000bf0:	e7fe      	b.n	8000bf0 <vTaskStartScheduler+0x5c>
}
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	080011b5 	.word	0x080011b5
 8000bfc:	080023a4 	.word	0x080023a4
 8000c00:	20000170 	.word	0x20000170
 8000c04:	20000164 	.word	0x20000164

08000c08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <vTaskSuspendAll+0x18>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	1c5a      	adds	r2, r3, #1
 8000c12:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <vTaskSuspendAll+0x18>)
 8000c14:	601a      	str	r2, [r3, #0]
}
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000174 	.word	0x20000174

08000c24 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 8000c24:	b590      	push	{r4, r7, lr}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8000c2e:	4b37      	ldr	r3, [pc, #220]	; (8000d0c <xTaskResumeAll+0xe8>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d104      	bne.n	8000c40 <xTaskResumeAll+0x1c>
 8000c36:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000c3a:	f380 8811 	msr	BASEPRI, r0
 8000c3e:	e7fe      	b.n	8000c3e <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000c40:	f001 f8d0 	bl	8001de4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000c44:	4b31      	ldr	r3, [pc, #196]	; (8000d0c <xTaskResumeAll+0xe8>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	1e5a      	subs	r2, r3, #1
 8000c4a:	4b30      	ldr	r3, [pc, #192]	; (8000d0c <xTaskResumeAll+0xe8>)
 8000c4c:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8000c4e:	4b2f      	ldr	r3, [pc, #188]	; (8000d0c <xTaskResumeAll+0xe8>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d152      	bne.n	8000cfc <xTaskResumeAll+0xd8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 8000c56:	4b2e      	ldr	r3, [pc, #184]	; (8000d10 <xTaskResumeAll+0xec>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d04e      	beq.n	8000cfc <xTaskResumeAll+0xd8>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8000c62:	e027      	b.n	8000cb4 <xTaskResumeAll+0x90>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 8000c64:	4b2b      	ldr	r3, [pc, #172]	; (8000d14 <xTaskResumeAll+0xf0>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
 8000c6a:	f104 0318 	add.w	r3, r4, #24
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f001 f9ca 	bl	8002008 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
 8000c74:	1d23      	adds	r3, r4, #4
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 f9c6 	bl	8002008 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 8000c7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000c7e:	4b26      	ldr	r3, [pc, #152]	; (8000d18 <xTaskResumeAll+0xf4>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d902      	bls.n	8000c8c <xTaskResumeAll+0x68>
 8000c86:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000c88:	4b23      	ldr	r3, [pc, #140]	; (8000d18 <xTaskResumeAll+0xf4>)
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000c8e:	4613      	mov	r3, r2
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	4413      	add	r3, r2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	4a21      	ldr	r2, [pc, #132]	; (8000d1c <xTaskResumeAll+0xf8>)
 8000c98:	441a      	add	r2, r3
 8000c9a:	1d23      	adds	r3, r4, #4
 8000c9c:	4610      	mov	r0, r2
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f001 f952 	bl	8001f48 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000ca4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <xTaskResumeAll+0xfc>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d301      	bcc.n	8000cb4 <xTaskResumeAll+0x90>
					{
						xYieldRequired = pdTRUE;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8000cb4:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <xTaskResumeAll+0xf0>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1d3      	bne.n	8000c64 <xTaskResumeAll+0x40>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8000cbc:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <xTaskResumeAll+0x100>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d00d      	beq.n	8000ce0 <xTaskResumeAll+0xbc>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8000cc4:	e006      	b.n	8000cd4 <xTaskResumeAll+0xb0>
					{
						vTaskIncrementTick();
 8000cc6:	f000 f843 	bl	8000d50 <vTaskIncrementTick>
						--uxMissedTicks;
 8000cca:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <xTaskResumeAll+0x100>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	1e5a      	subs	r2, r3, #1
 8000cd0:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <xTaskResumeAll+0x100>)
 8000cd2:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8000cd4:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <xTaskResumeAll+0x100>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d1f4      	bne.n	8000cc6 <xTaskResumeAll+0xa2>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d003      	beq.n	8000cee <xTaskResumeAll+0xca>
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <xTaskResumeAll+0x104>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d106      	bne.n	8000cfc <xTaskResumeAll+0xd8>
				{
					xAlreadyYielded = pdTRUE;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <xTaskResumeAll+0x104>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
 8000cf8:	f001 f868 	bl	8001dcc <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 8000cfc:	f001 f884 	bl	8001e08 <vPortExitCritical>

	return xAlreadyYielded;
 8000d00:	687b      	ldr	r3, [r7, #4]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd90      	pop	{r4, r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000174 	.word	0x20000174
 8000d10:	20000160 	.word	0x20000160
 8000d14:	20000120 	.word	0x20000120
 8000d18:	2000016c 	.word	0x2000016c
 8000d1c:	2000008c 	.word	0x2000008c
 8000d20:	20000088 	.word	0x20000088
 8000d24:	20000178 	.word	0x20000178
 8000d28:	2000017c 	.word	0x2000017c

08000d2c <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 8000d32:	f001 f857 	bl	8001de4 <vPortEnterCritical>
	{
		xTicks = xTickCount;
 8000d36:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <xTaskGetTickCount+0x20>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 8000d3c:	f001 f864 	bl	8001e08 <vPortExitCritical>

	return xTicks;
 8000d40:	687b      	ldr	r3, [r7, #4]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000164 	.word	0x20000164

08000d50 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8000d56:	4b49      	ldr	r3, [pc, #292]	; (8000e7c <vTaskIncrementTick+0x12c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d17d      	bne.n	8000e5a <vTaskIncrementTick+0x10a>
	{
		++xTickCount;
 8000d5e:	4b48      	ldr	r3, [pc, #288]	; (8000e80 <vTaskIncrementTick+0x130>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	1c5a      	adds	r2, r3, #1
 8000d64:	4b46      	ldr	r3, [pc, #280]	; (8000e80 <vTaskIncrementTick+0x130>)
 8000d66:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
 8000d68:	4b45      	ldr	r3, [pc, #276]	; (8000e80 <vTaskIncrementTick+0x130>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d12b      	bne.n	8000dc8 <vTaskIncrementTick+0x78>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
 8000d70:	4b44      	ldr	r3, [pc, #272]	; (8000e84 <vTaskIncrementTick+0x134>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d004      	beq.n	8000d84 <vTaskIncrementTick+0x34>
 8000d7a:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000d7e:	f380 8811 	msr	BASEPRI, r0
 8000d82:	e7fe      	b.n	8000d82 <vTaskIncrementTick+0x32>
			
			pxTemp = pxDelayedTaskList;
 8000d84:	4b3f      	ldr	r3, [pc, #252]	; (8000e84 <vTaskIncrementTick+0x134>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 8000d8a:	4b3f      	ldr	r3, [pc, #252]	; (8000e88 <vTaskIncrementTick+0x138>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	4b3d      	ldr	r3, [pc, #244]	; (8000e84 <vTaskIncrementTick+0x134>)
 8000d90:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
 8000d92:	4b3d      	ldr	r3, [pc, #244]	; (8000e88 <vTaskIncrementTick+0x138>)
 8000d94:	68fa      	ldr	r2, [r7, #12]
 8000d96:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
 8000d98:	4b3c      	ldr	r3, [pc, #240]	; (8000e8c <vTaskIncrementTick+0x13c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	1c5a      	adds	r2, r3, #1
 8000d9e:	4b3b      	ldr	r3, [pc, #236]	; (8000e8c <vTaskIncrementTick+0x13c>)
 8000da0:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000da2:	4b38      	ldr	r3, [pc, #224]	; (8000e84 <vTaskIncrementTick+0x134>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d104      	bne.n	8000db6 <vTaskIncrementTick+0x66>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
 8000dac:	4b38      	ldr	r3, [pc, #224]	; (8000e90 <vTaskIncrementTick+0x140>)
 8000dae:	f04f 32ff 	mov.w	r2, #4294967295
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	e008      	b.n	8000dc8 <vTaskIncrementTick+0x78>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000db6:	4b33      	ldr	r3, [pc, #204]	; (8000e84 <vTaskIncrementTick+0x134>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	4b32      	ldr	r3, [pc, #200]	; (8000e90 <vTaskIncrementTick+0x140>)
 8000dc6:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
 8000dc8:	4b2d      	ldr	r3, [pc, #180]	; (8000e80 <vTaskIncrementTick+0x130>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b30      	ldr	r3, [pc, #192]	; (8000e90 <vTaskIncrementTick+0x140>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d341      	bcc.n	8000e58 <vTaskIncrementTick+0x108>
 8000dd4:	4b2b      	ldr	r3, [pc, #172]	; (8000e84 <vTaskIncrementTick+0x134>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d104      	bne.n	8000de8 <vTaskIncrementTick+0x98>
 8000dde:	4b2c      	ldr	r3, [pc, #176]	; (8000e90 <vTaskIncrementTick+0x140>)
 8000de0:	f04f 32ff 	mov.w	r2, #4294967295
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	e037      	b.n	8000e58 <vTaskIncrementTick+0x108>
 8000de8:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <vTaskIncrementTick+0x134>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <vTaskIncrementTick+0x130>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d203      	bcs.n	8000e0a <vTaskIncrementTick+0xba>
 8000e02:	4b23      	ldr	r3, [pc, #140]	; (8000e90 <vTaskIncrementTick+0x140>)
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	e026      	b.n	8000e58 <vTaskIncrementTick+0x108>
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f001 f8fa 	bl	8002008 <vListRemove>
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d004      	beq.n	8000e26 <vTaskIncrementTick+0xd6>
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	3318      	adds	r3, #24
 8000e20:	4618      	mov	r0, r3
 8000e22:	f001 f8f1 	bl	8002008 <vListRemove>
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <vTaskIncrementTick+0x144>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d903      	bls.n	8000e3a <vTaskIncrementTick+0xea>
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e36:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <vTaskIncrementTick+0x144>)
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e3e:	4613      	mov	r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4413      	add	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4a14      	ldr	r2, [pc, #80]	; (8000e98 <vTaskIncrementTick+0x148>)
 8000e48:	441a      	add	r2, r3
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	4610      	mov	r0, r2
 8000e50:	4619      	mov	r1, r3
 8000e52:	f001 f879 	bl	8001f48 <vListInsertEnd>
 8000e56:	e7bd      	b.n	8000dd4 <vTaskIncrementTick+0x84>
 8000e58:	e006      	b.n	8000e68 <vTaskIncrementTick+0x118>
	}
	else
	{
		++uxMissedTicks;
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <vTaskIncrementTick+0x14c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	1c5a      	adds	r2, r3, #1
 8000e60:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <vTaskIncrementTick+0x14c>)
 8000e62:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8000e64:	f7ff faf8 	bl	8000458 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <vTaskIncrementTick+0x14c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d101      	bne.n	8000e74 <vTaskIncrementTick+0x124>
		{
			vApplicationTickHook();
 8000e70:	f7ff faf2 	bl	8000458 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000174 	.word	0x20000174
 8000e80:	20000164 	.word	0x20000164
 8000e84:	20000118 	.word	0x20000118
 8000e88:	2000011c 	.word	0x2000011c
 8000e8c:	20000180 	.word	0x20000180
 8000e90:	20000004 	.word	0x20000004
 8000e94:	2000016c 	.word	0x2000016c
 8000e98:	2000008c 	.word	0x2000008c
 8000e9c:	20000178 	.word	0x20000178

08000ea0 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 8000ea6:	4b22      	ldr	r3, [pc, #136]	; (8000f30 <vTaskSwitchContext+0x90>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 8000eae:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <vTaskSwitchContext+0x94>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	e037      	b.n	8000f26 <vTaskSwitchContext+0x86>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 8000eb6:	e00d      	b.n	8000ed4 <vTaskSwitchContext+0x34>
		{
			configASSERT( uxTopReadyPriority );
 8000eb8:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <vTaskSwitchContext+0x98>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d104      	bne.n	8000eca <vTaskSwitchContext+0x2a>
 8000ec0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000ec4:	f380 8811 	msr	BASEPRI, r0
 8000ec8:	e7fe      	b.n	8000ec8 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
 8000eca:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <vTaskSwitchContext+0x98>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	1e5a      	subs	r2, r3, #1
 8000ed0:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <vTaskSwitchContext+0x98>)
 8000ed2:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 8000ed4:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <vTaskSwitchContext+0x98>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4918      	ldr	r1, [pc, #96]	; (8000f3c <vTaskSwitchContext+0x9c>)
 8000eda:	4613      	mov	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0e6      	beq.n	8000eb8 <vTaskSwitchContext+0x18>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <vTaskSwitchContext+0x98>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	4a11      	ldr	r2, [pc, #68]	; (8000f3c <vTaskSwitchContext+0x9c>)
 8000ef8:	4413      	add	r3, r2
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685a      	ldr	r2, [r3, #4]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3308      	adds	r3, #8
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d104      	bne.n	8000f1c <vTaskSwitchContext+0x7c>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	68da      	ldr	r2, [r3, #12]
 8000f22:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <vTaskSwitchContext+0xa0>)
 8000f24:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
	}
}
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	20000174 	.word	0x20000174
 8000f34:	2000017c 	.word	0x2000017c
 8000f38:	2000016c 	.word	0x2000016c
 8000f3c:	2000008c 	.word	0x2000008c
 8000f40:	20000088 	.word	0x20000088

08000f44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d104      	bne.n	8000f5e <vTaskPlaceOnEventList+0x1a>
 8000f54:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000f58:	f380 8811 	msr	BASEPRI, r0
 8000f5c:	e7fe      	b.n	8000f5c <vTaskPlaceOnEventList+0x18>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <vTaskPlaceOnEventList+0x64>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	3318      	adds	r3, #24
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	4619      	mov	r1, r3
 8000f68:	f001 f816 	bl	8001f98 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <vTaskPlaceOnEventList+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	3304      	adds	r3, #4
 8000f72:	4618      	mov	r0, r3
 8000f74:	f001 f848 	bl	8002008 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f7e:	d107      	bne.n	8000f90 <vTaskPlaceOnEventList+0x4c>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <vTaskPlaceOnEventList+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	3304      	adds	r3, #4
 8000f86:	4809      	ldr	r0, [pc, #36]	; (8000fac <vTaskPlaceOnEventList+0x68>)
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f000 ffdd 	bl	8001f48 <vListInsertEnd>
 8000f8e:	e007      	b.n	8000fa0 <vTaskPlaceOnEventList+0x5c>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <vTaskPlaceOnEventList+0x6c>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8000f9a:	68f8      	ldr	r0, [r7, #12]
 8000f9c:	f000 f9ca 	bl	8001334 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000088 	.word	0x20000088
 8000fac:	2000014c 	.word	0x2000014c
 8000fb0:	20000164 	.word	0x20000164

08000fb4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d104      	bne.n	8000fce <vTaskPlaceOnEventListRestricted+0x1a>
 8000fc4:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000fc8:	f380 8811 	msr	BASEPRI, r0
 8000fcc:	e7fe      	b.n	8000fcc <vTaskPlaceOnEventListRestricted+0x18>
	
		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 8000fce:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <vTaskPlaceOnEventListRestricted+0x4c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	3318      	adds	r3, #24
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f000 ffb6 	bl	8001f48 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <vTaskPlaceOnEventListRestricted+0x4c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f001 f810 	bl	8002008 <vListRemove>

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <vTaskPlaceOnEventListRestricted+0x50>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8000ff2:	68f8      	ldr	r0, [r7, #12]
 8000ff4:	f000 f99e 	bl	8001334 <prvAddCurrentTaskToDelayedList>
	}
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000088 	.word	0x20000088
 8001004:	20000164 	.word	0x20000164

08001008 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d104      	bne.n	8001028 <xTaskRemoveFromEventList+0x20>
 800101e:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001022:	f380 8811 	msr	BASEPRI, r0
 8001026:	e7fe      	b.n	8001026 <xTaskRemoveFromEventList+0x1e>
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	3318      	adds	r3, #24
 800102c:	4618      	mov	r0, r3
 800102e:	f000 ffeb 	bl	8002008 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001032:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <xTaskRemoveFromEventList+0x9c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d11d      	bne.n	8001076 <xTaskRemoveFromEventList+0x6e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	3304      	adds	r3, #4
 800103e:	4618      	mov	r0, r3
 8001040:	f000 ffe2 	bl	8002008 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001048:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <xTaskRemoveFromEventList+0xa0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	429a      	cmp	r2, r3
 800104e:	d903      	bls.n	8001058 <xTaskRemoveFromEventList+0x50>
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001054:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <xTaskRemoveFromEventList+0xa0>)
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800105c:	4613      	mov	r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4413      	add	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4a11      	ldr	r2, [pc, #68]	; (80010ac <xTaskRemoveFromEventList+0xa4>)
 8001066:	441a      	add	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	3304      	adds	r3, #4
 800106c:	4610      	mov	r0, r2
 800106e:	4619      	mov	r1, r3
 8001070:	f000 ff6a 	bl	8001f48 <vListInsertEnd>
 8001074:	e005      	b.n	8001082 <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	3318      	adds	r3, #24
 800107a:	480d      	ldr	r0, [pc, #52]	; (80010b0 <xTaskRemoveFromEventList+0xa8>)
 800107c:	4619      	mov	r1, r3
 800107e:	f000 ff63 	bl	8001f48 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <xTaskRemoveFromEventList+0xac>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108c:	429a      	cmp	r2, r3
 800108e:	d302      	bcc.n	8001096 <xTaskRemoveFromEventList+0x8e>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8001090:	2301      	movs	r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	e001      	b.n	800109a <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		xReturn = pdFALSE;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800109a:	68fb      	ldr	r3, [r7, #12]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000174 	.word	0x20000174
 80010a8:	2000016c 	.word	0x2000016c
 80010ac:	2000008c 	.word	0x2000008c
 80010b0:	20000120 	.word	0x20000120
 80010b4:	20000088 	.word	0x20000088

080010b8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d104      	bne.n	80010d0 <vTaskSetTimeOutState+0x18>
 80010c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80010ca:	f380 8811 	msr	BASEPRI, r0
 80010ce:	e7fe      	b.n	80010ce <vTaskSetTimeOutState+0x16>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <vTaskSetTimeOutState+0x34>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <vTaskSetTimeOutState+0x38>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	605a      	str	r2, [r3, #4]
}
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000180 	.word	0x20000180
 80010f0:	20000164 	.word	0x20000164

080010f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d104      	bne.n	800110e <xTaskCheckForTimeOut+0x1a>
 8001104:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001108:	f380 8811 	msr	BASEPRI, r0
 800110c:	e7fe      	b.n	800110c <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d104      	bne.n	800111e <xTaskCheckForTimeOut+0x2a>
 8001114:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001118:	f380 8811 	msr	BASEPRI, r0
 800111c:	e7fe      	b.n	800111c <xTaskCheckForTimeOut+0x28>

	taskENTER_CRITICAL();
 800111e:	f000 fe61 	bl	8001de4 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800112a:	d102      	bne.n	8001132 <xTaskCheckForTimeOut+0x3e>
			{
				xReturn = pdFALSE;
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	e029      	b.n	8001186 <xTaskCheckForTimeOut+0x92>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <xTaskCheckForTimeOut+0xa0>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	429a      	cmp	r2, r3
 800113c:	d008      	beq.n	8001150 <xTaskCheckForTimeOut+0x5c>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <xTaskCheckForTimeOut+0xa4>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	429a      	cmp	r2, r3
 8001148:	d802      	bhi.n	8001150 <xTaskCheckForTimeOut+0x5c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 800114a:	2301      	movs	r3, #1
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	e01a      	b.n	8001186 <xTaskCheckForTimeOut+0x92>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <xTaskCheckForTimeOut+0xa4>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	1ad2      	subs	r2, r2, r3
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	d20f      	bcs.n	8001182 <xTaskCheckForTimeOut+0x8e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6859      	ldr	r1, [r3, #4]
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <xTaskCheckForTimeOut+0xa4>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	1acb      	subs	r3, r1, r3
 8001170:	441a      	add	r2, r3
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ff9e 	bl	80010b8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	e001      	b.n	8001186 <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
 8001182:	2301      	movs	r3, #1
 8001184:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001186:	f000 fe3f 	bl	8001e08 <vPortExitCritical>

	return xReturn;
 800118a:	68fb      	ldr	r3, [r7, #12]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000180 	.word	0x20000180
 8001198:	20000164 	.word	0x20000164

0800119c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <vTaskMissedYield+0x14>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	601a      	str	r2, [r3, #0]
}
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	2000017c 	.word	0x2000017c

080011b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 80011bc:	f000 f880 	bl	80012c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <prvIdleTask+0x20>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d901      	bls.n	80011cc <prvIdleTask+0x18>
			{
				taskYIELD();
 80011c8:	f000 fe00 	bl	8001dcc <vPortYieldFromISR>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80011cc:	f7ff f956 	bl	800047c <vApplicationIdleHook>
		}
		#endif
	}
 80011d0:	e7f4      	b.n	80011bc <prvIdleTask+0x8>
 80011d2:	bf00      	nop
 80011d4:	2000008c 	.word	0x2000008c

080011d8 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
 80011e4:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	3334      	adds	r3, #52	; 0x34
 80011ea:	4618      	mov	r0, r3
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	220a      	movs	r2, #10
 80011f0:	f001 f8bb 	bl	800236a <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b04      	cmp	r3, #4
 8001200:	d901      	bls.n	8001206 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 8001202:	2304      	movs	r3, #4
 8001204:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	3304      	adds	r3, #4
 8001216:	4618      	mov	r0, r3
 8001218:	f000 fe8a 	bl	8001f30 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	3318      	adds	r3, #24
 8001220:	4618      	mov	r0, r3
 8001222:	f000 fe85 	bl	8001f30 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f1c3 0205 	rsb	r2, r3, #5
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	68fa      	ldr	r2, [r7, #12]
 800123a:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop

08001244 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	e00c      	b.n	800126a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4a11      	ldr	r2, [pc, #68]	; (80012a0 <prvInitialiseTaskLists+0x5c>)
 800125c:	4413      	add	r3, r2
 800125e:	4618      	mov	r0, r3
 8001260:	f000 fe46 	bl	8001ef0 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3301      	adds	r3, #1
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b04      	cmp	r3, #4
 800126e:	d9ef      	bls.n	8001250 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 8001270:	480c      	ldr	r0, [pc, #48]	; (80012a4 <prvInitialiseTaskLists+0x60>)
 8001272:	f000 fe3d 	bl	8001ef0 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 8001276:	480c      	ldr	r0, [pc, #48]	; (80012a8 <prvInitialiseTaskLists+0x64>)
 8001278:	f000 fe3a 	bl	8001ef0 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
 800127c:	480b      	ldr	r0, [pc, #44]	; (80012ac <prvInitialiseTaskLists+0x68>)
 800127e:	f000 fe37 	bl	8001ef0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 8001282:	480b      	ldr	r0, [pc, #44]	; (80012b0 <prvInitialiseTaskLists+0x6c>)
 8001284:	f000 fe34 	bl	8001ef0 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
 8001288:	480a      	ldr	r0, [pc, #40]	; (80012b4 <prvInitialiseTaskLists+0x70>)
 800128a:	f000 fe31 	bl	8001ef0 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <prvInitialiseTaskLists+0x74>)
 8001290:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <prvInitialiseTaskLists+0x60>)
 8001292:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001294:	4b09      	ldr	r3, [pc, #36]	; (80012bc <prvInitialiseTaskLists+0x78>)
 8001296:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <prvInitialiseTaskLists+0x64>)
 8001298:	601a      	str	r2, [r3, #0]
}
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	2000008c 	.word	0x2000008c
 80012a4:	200000f0 	.word	0x200000f0
 80012a8:	20000104 	.word	0x20000104
 80012ac:	20000120 	.word	0x20000120
 80012b0:	20000134 	.word	0x20000134
 80012b4:	2000014c 	.word	0x2000014c
 80012b8:	20000118 	.word	0x20000118
 80012bc:	2000011c 	.word	0x2000011c

080012c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 80012c6:	4b18      	ldr	r3, [pc, #96]	; (8001328 <prvCheckTasksWaitingTermination+0x68>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d028      	beq.n	8001320 <prvCheckTasksWaitingTermination+0x60>
		{
			vTaskSuspendAll();
 80012ce:	f7ff fc9b 	bl	8000c08 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <prvCheckTasksWaitingTermination+0x6c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	bf14      	ite	ne
 80012da:	2300      	movne	r3, #0
 80012dc:	2301      	moveq	r3, #1
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
 80012e2:	f7ff fc9f 	bl	8000c24 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d119      	bne.n	8001320 <prvCheckTasksWaitingTermination+0x60>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 80012ec:	f000 fd7a 	bl	8001de4 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 80012f0:	4b0e      	ldr	r3, [pc, #56]	; (800132c <prvCheckTasksWaitingTermination+0x6c>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	3304      	adds	r3, #4
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 fe83 	bl	8002008 <vListRemove>
					--uxCurrentNumberOfTasks;
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <prvCheckTasksWaitingTermination+0x70>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	1e5a      	subs	r2, r3, #1
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <prvCheckTasksWaitingTermination+0x70>)
 800130a:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <prvCheckTasksWaitingTermination+0x68>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	1e5a      	subs	r2, r3, #1
 8001312:	4b05      	ldr	r3, [pc, #20]	; (8001328 <prvCheckTasksWaitingTermination+0x68>)
 8001314:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 8001316:	f000 fd77 	bl	8001e08 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800131a:	6838      	ldr	r0, [r7, #0]
 800131c:	f000 f872 	bl	8001404 <prvDeleteTCB>
			}
		}
	}
	#endif
}
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000148 	.word	0x20000148
 800132c:	20000134 	.word	0x20000134
 8001330:	20000160 	.word	0x20000160

08001334 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <prvAddCurrentTaskToDelayedList+0x58>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <prvAddCurrentTaskToDelayedList+0x5c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	429a      	cmp	r2, r3
 800134c:	d209      	bcs.n	8001362 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <prvAddCurrentTaskToDelayedList+0x60>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <prvAddCurrentTaskToDelayedList+0x58>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	3304      	adds	r3, #4
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	f000 fe1c 	bl	8001f98 <vListInsert>
 8001360:	e010      	b.n	8001384 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <prvAddCurrentTaskToDelayedList+0x64>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <prvAddCurrentTaskToDelayedList+0x58>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	3304      	adds	r3, #4
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f000 fe12 	bl	8001f98 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <prvAddCurrentTaskToDelayedList+0x68>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	429a      	cmp	r2, r3
 800137c:	d202      	bcs.n	8001384 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
 800137e:	4b07      	ldr	r3, [pc, #28]	; (800139c <prvAddCurrentTaskToDelayedList+0x68>)
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000088 	.word	0x20000088
 8001390:	20000164 	.word	0x20000164
 8001394:	2000011c 	.word	0x2000011c
 8001398:	20000118 	.word	0x20000118
 800139c:	20000004 	.word	0x20000004

080013a0 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 80013ac:	204c      	movs	r0, #76	; 0x4c
 80013ae:	f000 fc63 	bl	8001c78 <pvPortMalloc>
 80013b2:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d01f      	beq.n	80013fa <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d106      	bne.n	80013ce <prvAllocateTCBAndStack+0x2e>
 80013c0:	88fb      	ldrh	r3, [r7, #6]
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f000 fc57 	bl	8001c78 <pvPortMalloc>
 80013ca:	4603      	mov	r3, r0
 80013cc:	e000      	b.n	80013d0 <prvAllocateTCBAndStack+0x30>
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d105      	bne.n	80013e8 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 80013dc:	68f8      	ldr	r0, [r7, #12]
 80013de:	f000 fc87 	bl	8001cf0 <vPortFree>
			pxNewTCB = NULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	e008      	b.n	80013fa <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4610      	mov	r0, r2
 80013f2:	21a5      	movs	r1, #165	; 0xa5
 80013f4:	461a      	mov	r2, r3
 80013f6:	f000 ffb0 	bl	800235a <memset>
		}
	}

	return pxNewTCB;
 80013fa:	68fb      	ldr	r3, [r7, #12]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
		above the vPortFree() calls. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001410:	4618      	mov	r0, r3
 8001412:	f000 fc6d 	bl	8001cf0 <vPortFree>
		vPortFree( pxTCB );
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 fc6a 	bl	8001cf0 <vPortFree>
	}
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop

08001424 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800142a:	4b05      	ldr	r3, [pc, #20]	; (8001440 <xTaskGetCurrentTaskHandle+0x1c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8001430:	687b      	ldr	r3, [r7, #4]
	}
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000088 	.word	0x20000088

08001444 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <xTaskGetSchedulerState+0x34>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d102      	bne.n	8001458 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	e008      	b.n	800146a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <xTaskGetSchedulerState+0x38>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d102      	bne.n	8001466 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001460:	2301      	movs	r3, #1
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	e001      	b.n	800146a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001466:	2302      	movs	r3, #2
 8001468:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800146a:	687b      	ldr	r3, [r7, #4]
	}
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	20000170 	.word	0x20000170
 800147c:	20000174 	.word	0x20000174

08001480 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d104      	bne.n	800149c <vTaskPriorityInherit+0x1c>
 8001492:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001496:	f380 8811 	msr	BASEPRI, r0
 800149a:	e7fe      	b.n	800149a <vTaskPriorityInherit+0x1a>

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014a0:	4b21      	ldr	r3, [pc, #132]	; (8001528 <vTaskPriorityInherit+0xa8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d23a      	bcs.n	8001520 <vTaskPriorityInherit+0xa0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
 80014aa:	4b1f      	ldr	r3, [pc, #124]	; (8001528 <vTaskPriorityInherit+0xa8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b0:	f1c3 0205 	rsb	r2, r3, #5
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6959      	ldr	r1, [r3, #20]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4a18      	ldr	r2, [pc, #96]	; (800152c <vTaskPriorityInherit+0xac>)
 80014ca:	4413      	add	r3, r2
 80014cc:	4299      	cmp	r1, r3
 80014ce:	d122      	bne.n	8001516 <vTaskPriorityInherit+0x96>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	3304      	adds	r3, #4
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 fd97 	bl	8002008 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80014da:	4b13      	ldr	r3, [pc, #76]	; (8001528 <vTaskPriorityInherit+0xa8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <vTaskPriorityInherit+0xb0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d903      	bls.n	80014f8 <vTaskPriorityInherit+0x78>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <vTaskPriorityInherit+0xb0>)
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4a09      	ldr	r2, [pc, #36]	; (800152c <vTaskPriorityInherit+0xac>)
 8001506:	441a      	add	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	3304      	adds	r3, #4
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	f000 fd1a 	bl	8001f48 <vListInsertEnd>
 8001514:	e004      	b.n	8001520 <vTaskPriorityInherit+0xa0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001516:	4b04      	ldr	r3, [pc, #16]	; (8001528 <vTaskPriorityInherit+0xa8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000088 	.word	0x20000088
 800152c:	2000008c 	.word	0x2000008c
 8001530:	2000016c 	.word	0x2000016c

08001534 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d02c      	beq.n	80015a0 <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800154e:	429a      	cmp	r2, r3
 8001550:	d026      	beq.n	80015a0 <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	3304      	adds	r3, #4
 8001556:	4618      	mov	r0, r3
 8001558:	f000 fd56 	bl	8002008 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001568:	f1c3 0205 	rsb	r2, r3, #5
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <vTaskPriorityDisinherit+0x74>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	d903      	bls.n	8001584 <vTaskPriorityDisinherit+0x50>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <vTaskPriorityDisinherit+0x74>)
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4a06      	ldr	r2, [pc, #24]	; (80015ac <vTaskPriorityDisinherit+0x78>)
 8001592:	441a      	add	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	3304      	adds	r3, #4
 8001598:	4610      	mov	r0, r2
 800159a:	4619      	mov	r1, r3
 800159c:	f000 fcd4 	bl	8001f48 <vListInsertEnd>
			}
		}
	}
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	2000016c 	.word	0x2000016c
 80015ac:	2000008c 	.word	0x2000008c

080015b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	4613      	mov	r3, r2
 80015bc:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should 
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d052      	beq.n	800166e <xQueueGenericCreate+0xbe>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 80015c8:	2050      	movs	r0, #80	; 0x50
 80015ca:	f000 fb55 	bl	8001c78 <pvPortMalloc>
 80015ce:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d04b      	beq.n	800166e <xQueueGenericCreate+0xbe>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	68ba      	ldr	r2, [r7, #8]
 80015da:	fb02 f303 	mul.w	r3, r2, r3
 80015de:	3301      	adds	r3, #1
 80015e0:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 80015e2:	6978      	ldr	r0, [r7, #20]
 80015e4:	f000 fb48 	bl	8001c78 <pvPortMalloc>
 80015e8:	4602      	mov	r2, r0
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d038      	beq.n	8001668 <xQueueGenericCreate+0xb8>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	68b9      	ldr	r1, [r7, #8]
 80015fe:	fb01 f303 	mul.w	r3, r1, r3
 8001602:	441a      	add	r2, r3
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	605a      	str	r2, [r3, #4]
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	2200      	movs	r2, #0
 800160c:	639a      	str	r2, [r3, #56]	; 0x38
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	609a      	str	r2, [r3, #8]
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	3b01      	subs	r3, #1
 800161e:	68b9      	ldr	r1, [r7, #8]
 8001620:	fb01 f303 	mul.w	r3, r1, r3
 8001624:	441a      	add	r2, r3
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	60da      	str	r2, [r3, #12]
				pxNewQueue->uxLength = uxQueueLength;
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	641a      	str	r2, [r3, #64]	; 0x40
				pxNewQueue->xRxLock = queueUNLOCKED;
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	f04f 32ff 	mov.w	r2, #4294967295
 800163c:	645a      	str	r2, [r3, #68]	; 0x44
				pxNewQueue->xTxLock = queueUNLOCKED;
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	f04f 32ff 	mov.w	r2, #4294967295
 8001644:	649a      	str	r2, [r3, #72]	; 0x48
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	79fa      	ldrb	r2, [r7, #7]
 800164a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				}
				#endif /* configUSE_TRACE_FACILITY */

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	3310      	adds	r3, #16
 8001652:	4618      	mov	r0, r3
 8001654:	f000 fc4c 	bl	8001ef0 <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	3324      	adds	r3, #36	; 0x24
 800165c:	4618      	mov	r0, r3
 800165e:	f000 fc47 	bl	8001ef0 <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	61fb      	str	r3, [r7, #28]
 8001666:	e002      	b.n	800166e <xQueueGenericCreate+0xbe>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 8001668:	69b8      	ldr	r0, [r7, #24]
 800166a:	f000 fb41 	bl	8001cf0 <vPortFree>
			}
		}
	}

	configASSERT( xReturn );
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d104      	bne.n	800167e <xQueueGenericCreate+0xce>
 8001674:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001678:	f380 8811 	msr	BASEPRI, r0
 800167c:	e7fe      	b.n	800167c <xQueueGenericCreate+0xcc>

	return xReturn;
 800167e:	69fb      	ldr	r3, [r7, #28]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3720      	adds	r7, #32
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
 8001694:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d104      	bne.n	80016aa <xQueueGenericSend+0x22>
 80016a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80016a4:	f380 8811 	msr	BASEPRI, r0
 80016a8:	e7fe      	b.n	80016a8 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d103      	bne.n	80016b8 <xQueueGenericSend+0x30>
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <xQueueGenericSend+0x34>
 80016b8:	2301      	movs	r3, #1
 80016ba:	e000      	b.n	80016be <xQueueGenericSend+0x36>
 80016bc:	2300      	movs	r3, #0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d104      	bne.n	80016cc <xQueueGenericSend+0x44>
 80016c2:	f04f 0050 	mov.w	r0, #80	; 0x50
 80016c6:	f380 8811 	msr	BASEPRI, r0
 80016ca:	e7fe      	b.n	80016ca <xQueueGenericSend+0x42>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80016cc:	f000 fb8a 	bl	8001de4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016d8:	429a      	cmp	r2, r3
 80016da:	d216      	bcs.n	800170a <xQueueGenericSend+0x82>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	68b9      	ldr	r1, [r7, #8]
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	f000 f9a3 	bl	8001a2c <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d009      	beq.n	8001702 <xQueueGenericSend+0x7a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3324      	adds	r3, #36	; 0x24
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fc88 	bl	8001008 <xTaskRemoveFromEventList>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d101      	bne.n	8001702 <xQueueGenericSend+0x7a>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
 80016fe:	f000 fb65 	bl	8001dcc <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
 8001702:	f000 fb81 	bl	8001e08 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 8001706:	2301      	movs	r3, #1
 8001708:	e059      	b.n	80017be <xQueueGenericSend+0x136>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d103      	bne.n	8001718 <xQueueGenericSend+0x90>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001710:	f000 fb7a 	bl	8001e08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001714:	2300      	movs	r3, #0
 8001716:	e052      	b.n	80017be <xQueueGenericSend+0x136>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d106      	bne.n	800172c <xQueueGenericSend+0xa4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fcc8 	bl	80010b8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001728:	2301      	movs	r3, #1
 800172a:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 800172c:	f000 fb6c 	bl	8001e08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001730:	f7ff fa6a 	bl	8000c08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001734:	f000 fb56 	bl	8001de4 <vPortEnterCritical>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001740:	d102      	bne.n	8001748 <xQueueGenericSend+0xc0>
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2200      	movs	r2, #0
 8001746:	645a      	str	r2, [r3, #68]	; 0x44
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800174c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001750:	d102      	bne.n	8001758 <xQueueGenericSend+0xd0>
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2200      	movs	r2, #0
 8001756:	649a      	str	r2, [r3, #72]	; 0x48
 8001758:	f000 fb56 	bl	8001e08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800175c:	f107 0214 	add.w	r2, r7, #20
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	f7ff fcc5 	bl	80010f4 <xTaskCheckForTimeOut>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d11e      	bne.n	80017ae <xQueueGenericSend+0x126>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f000 fa3f 	bl	8001bf4 <prvIsQueueFull>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d012      	beq.n	80017a2 <xQueueGenericSend+0x11a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f103 0210 	add.w	r2, r3, #16
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
 8001788:	f7ff fbdc 	bl	8000f44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800178c:	68f8      	ldr	r0, [r7, #12]
 800178e:	f000 f9cf 	bl	8001b30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001792:	f7ff fa47 	bl	8000c24 <xTaskResumeAll>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d10f      	bne.n	80017bc <xQueueGenericSend+0x134>
				{
					portYIELD_WITHIN_API();
 800179c:	f000 fb16 	bl	8001dcc <vPortYieldFromISR>
 80017a0:	e00c      	b.n	80017bc <xQueueGenericSend+0x134>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f000 f9c4 	bl	8001b30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80017a8:	f7ff fa3c 	bl	8000c24 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 80017ac:	e78e      	b.n	80016cc <xQueueGenericSend+0x44>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f000 f9be 	bl	8001b30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80017b4:	f7ff fa36 	bl	8000c24 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	e000      	b.n	80017be <xQueueGenericSend+0x136>
		}
	}
 80017bc:	e786      	b.n	80016cc <xQueueGenericSend+0x44>
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3720      	adds	r7, #32
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop

080017c8 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
 80017d4:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d104      	bne.n	80017e6 <xQueueGenericSendFromISR+0x1e>
 80017dc:	f04f 0050 	mov.w	r0, #80	; 0x50
 80017e0:	f380 8811 	msr	BASEPRI, r0
 80017e4:	e7fe      	b.n	80017e4 <xQueueGenericSendFromISR+0x1c>
	configASSERT( pxHigherPriorityTaskWoken );
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d104      	bne.n	80017f6 <xQueueGenericSendFromISR+0x2e>
 80017ec:	f04f 0050 	mov.w	r0, #80	; 0x50
 80017f0:	f380 8811 	msr	BASEPRI, r0
 80017f4:	e7fe      	b.n	80017f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d103      	bne.n	8001804 <xQueueGenericSendFromISR+0x3c>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <xQueueGenericSendFromISR+0x40>
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <xQueueGenericSendFromISR+0x42>
 8001808:	2300      	movs	r3, #0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d104      	bne.n	8001818 <xQueueGenericSendFromISR+0x50>
 800180e:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001812:	f380 8811 	msr	BASEPRI, r0
 8001816:	e7fe      	b.n	8001816 <xQueueGenericSendFromISR+0x4e>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001818:	2300      	movs	r3, #0
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001820:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800182c:	429a      	cmp	r2, r3
 800182e:	d221      	bcs.n	8001874 <xQueueGenericSendFromISR+0xac>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	68b9      	ldr	r1, [r7, #8]
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	f000 f8f9 	bl	8001a2c <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800183e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001842:	d10f      	bne.n	8001864 <xQueueGenericSendFromISR+0x9c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001848:	2b00      	cmp	r3, #0
 800184a:	d010      	beq.n	800186e <xQueueGenericSendFromISR+0xa6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	3324      	adds	r3, #36	; 0x24
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fbd9 	bl	8001008 <xTaskRemoveFromEventList>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d008      	beq.n	800186e <xQueueGenericSendFromISR+0xa6>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	e004      	b.n	800186e <xQueueGenericSendFromISR+0xa6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001868:	1c5a      	adds	r2, r3, #1
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 800186e:	2301      	movs	r3, #1
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	e001      	b.n	8001878 <xQueueGenericSendFromISR+0xb0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001878:	f04f 0000 	mov.w	r0, #0
 800187c:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
 8001880:	697b      	ldr	r3, [r7, #20]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop

0800188c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
 8001898:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d104      	bne.n	80018ae <xQueueGenericReceive+0x22>
 80018a4:	f04f 0050 	mov.w	r0, #80	; 0x50
 80018a8:	f380 8811 	msr	BASEPRI, r0
 80018ac:	e7fe      	b.n	80018ac <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d103      	bne.n	80018bc <xQueueGenericReceive+0x30>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <xQueueGenericReceive+0x34>
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <xQueueGenericReceive+0x36>
 80018c0:	2300      	movs	r3, #0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d104      	bne.n	80018d0 <xQueueGenericReceive+0x44>
 80018c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80018ca:	f380 8811 	msr	BASEPRI, r0
 80018ce:	e7fe      	b.n	80018ce <xQueueGenericReceive+0x42>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80018d0:	f000 fa88 	bl	8001de4 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d03b      	beq.n	8001954 <xQueueGenericReceive+0xc8>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	68b9      	ldr	r1, [r7, #8]
 80018e6:	f000 f8fd 	bl	8001ae4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d11c      	bne.n	800192a <xQueueGenericReceive+0x9e>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018f4:	1e5a      	subs	r2, r3, #1
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d104      	bne.n	800190c <xQueueGenericReceive+0x80>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 8001902:	f7ff fd8f 	bl	8001424 <xTaskGetCurrentTaskHandle>
 8001906:	4602      	mov	r2, r0
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d01b      	beq.n	800194c <xQueueGenericReceive+0xc0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	3310      	adds	r3, #16
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fb75 	bl	8001008 <xTaskRemoveFromEventList>
 800191e:	4603      	mov	r3, r0
 8001920:	2b01      	cmp	r3, #1
 8001922:	d113      	bne.n	800194c <xQueueGenericReceive+0xc0>
						{
							portYIELD_WITHIN_API();
 8001924:	f000 fa52 	bl	8001dcc <vPortYieldFromISR>
 8001928:	e010      	b.n	800194c <xQueueGenericReceive+0xc0>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	2b00      	cmp	r3, #0
 8001936:	d009      	beq.n	800194c <xQueueGenericReceive+0xc0>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	3324      	adds	r3, #36	; 0x24
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fb63 	bl	8001008 <xTaskRemoveFromEventList>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <xQueueGenericReceive+0xc0>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 8001948:	f000 fa40 	bl	8001dcc <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
 800194c:	f000 fa5c 	bl	8001e08 <vPortExitCritical>
				return pdPASS;
 8001950:	2301      	movs	r3, #1
 8001952:	e066      	b.n	8001a22 <xQueueGenericReceive+0x196>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d103      	bne.n	8001962 <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800195a:	f000 fa55 	bl	8001e08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800195e:	2300      	movs	r3, #0
 8001960:	e05f      	b.n	8001a22 <xQueueGenericReceive+0x196>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d106      	bne.n	8001976 <xQueueGenericReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001968:	f107 0310 	add.w	r3, r7, #16
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fba3 	bl	80010b8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001972:	2301      	movs	r3, #1
 8001974:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 8001976:	f000 fa47 	bl	8001e08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800197a:	f7ff f945 	bl	8000c08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800197e:	f000 fa31 	bl	8001de4 <vPortEnterCritical>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800198a:	d102      	bne.n	8001992 <xQueueGenericReceive+0x106>
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	645a      	str	r2, [r3, #68]	; 0x44
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199a:	d102      	bne.n	80019a2 <xQueueGenericReceive+0x116>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	649a      	str	r2, [r3, #72]	; 0x48
 80019a2:	f000 fa31 	bl	8001e08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80019a6:	f107 0210 	add.w	r2, r7, #16
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	4610      	mov	r0, r2
 80019ae:	4619      	mov	r1, r3
 80019b0:	f7ff fba0 	bl	80010f4 <xTaskCheckForTimeOut>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d12b      	bne.n	8001a12 <xQueueGenericReceive+0x186>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f000 f904 	bl	8001bc8 <prvIsQueueEmpty>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d01f      	beq.n	8001a06 <xQueueGenericReceive+0x17a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d108      	bne.n	80019e0 <xQueueGenericReceive+0x154>
					{
						portENTER_CRITICAL();
 80019ce:	f000 fa09 	bl	8001de4 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fd52 	bl	8001480 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 80019dc:	f000 fa14 	bl	8001e08 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4610      	mov	r0, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	f7ff faaa 	bl	8000f44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f000 f89d 	bl	8001b30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80019f6:	f7ff f915 	bl	8000c24 <xTaskResumeAll>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10f      	bne.n	8001a20 <xQueueGenericReceive+0x194>
				{
					portYIELD_WITHIN_API();
 8001a00:	f000 f9e4 	bl	8001dcc <vPortYieldFromISR>
 8001a04:	e00c      	b.n	8001a20 <xQueueGenericReceive+0x194>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 f892 	bl	8001b30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001a0c:	f7ff f90a 	bl	8000c24 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8001a10:	e75e      	b.n	80018d0 <xQueueGenericReceive+0x44>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f000 f88c 	bl	8001b30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001a18:	f7ff f904 	bl	8000c24 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	e000      	b.n	8001a22 <xQueueGenericReceive+0x196>
		}
	}
 8001a20:	e756      	b.n	80018d0 <xQueueGenericReceive+0x44>
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3720      	adds	r7, #32
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop

08001a2c <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d10c      	bne.n	8001a5a <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d145      	bne.n	8001ad4 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fd71 	bl	8001534 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	e03c      	b.n	8001ad4 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d11a      	bne.n	8001a96 <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	4610      	mov	r0, r2
 8001a6a:	68b9      	ldr	r1, [r7, #8]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	f000 fc6b 	bl	8002348 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	441a      	add	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d323      	bcc.n	8001ad4 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	e01e      	b.n	8001ad4 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	68b9      	ldr	r1, [r7, #8]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	f000 fc50 	bl	8002348 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	68da      	ldr	r2, [r3, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	425b      	negs	r3, r3
 8001ab2:	441a      	add	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	68da      	ldr	r2, [r3, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d207      	bcs.n	8001ad4 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	425b      	negs	r3, r3
 8001ace:	441a      	add	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d019      	beq.n	8001b2a <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	441a      	add	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d303      	bcc.n	8001b18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68da      	ldr	r2, [r3, #12]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	6838      	ldr	r0, [r7, #0]
 8001b22:	4611      	mov	r1, r2
 8001b24:	461a      	mov	r2, r3
 8001b26:	f000 fc0f 	bl	8002348 <memcpy>
	}
}
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001b38:	f000 f954 	bl	8001de4 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8001b3c:	e014      	b.n	8001b68 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00f      	beq.n	8001b66 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3324      	adds	r3, #36	; 0x24
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fa5c 	bl	8001008 <xTaskRemoveFromEventList>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
 8001b56:	f7ff fb21 	bl	800119c <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b5e:	1e5a      	subs	r2, r3, #1
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	649a      	str	r2, [r3, #72]	; 0x48
 8001b64:	e000      	b.n	8001b68 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
 8001b66:	e003      	b.n	8001b70 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	dce6      	bgt.n	8001b3e <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f04f 32ff 	mov.w	r2, #4294967295
 8001b76:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8001b78:	f000 f946 	bl	8001e08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001b7c:	f000 f932 	bl	8001de4 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8001b80:	e014      	b.n	8001bac <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00f      	beq.n	8001baa <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3310      	adds	r3, #16
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fa3a 	bl	8001008 <xTaskRemoveFromEventList>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
 8001b9a:	f7ff faff 	bl	800119c <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	1e5a      	subs	r2, r3, #1
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	645a      	str	r2, [r3, #68]	; 0x44
 8001ba8:	e000      	b.n	8001bac <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
 8001baa:	e003      	b.n	8001bb4 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	dce6      	bgt.n	8001b82 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8001bba:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001bbc:	f000 f924 	bl	8001e08 <vPortExitCritical>
}
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop

08001bc8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8001bd0:	f000 f908 	bl	8001de4 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	bf14      	ite	ne
 8001bdc:	2300      	movne	r3, #0
 8001bde:	2301      	moveq	r3, #1
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 8001be4:	f000 f910 	bl	8001e08 <vPortExitCritical>

	return xReturn;
 8001be8:	68fb      	ldr	r3, [r7, #12]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop

08001bf4 <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8001bfc:	f000 f8f2 	bl	8001de4 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	bf14      	ite	ne
 8001c0c:	2300      	movne	r3, #0
 8001c0e:	2301      	moveq	r3, #1
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 8001c14:	f000 f8f8 	bl	8001e08 <vPortExitCritical>

	return xReturn;
 8001c18:	68fb      	ldr	r3, [r7, #12]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop

08001c24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001c2e:	f000 f8d9 	bl	8001de4 <vPortEnterCritical>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c3a:	d102      	bne.n	8001c42 <vQueueWaitForMessageRestricted+0x1e>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	645a      	str	r2, [r3, #68]	; 0x44
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4a:	d102      	bne.n	8001c52 <vQueueWaitForMessageRestricted+0x2e>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	649a      	str	r2, [r3, #72]	; 0x48
 8001c52:	f000 f8d9 	bl	8001e08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d105      	bne.n	8001c6a <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3324      	adds	r3, #36	; 0x24
 8001c62:	4618      	mov	r0, r3
 8001c64:	6839      	ldr	r1, [r7, #0]
 8001c66:	f7ff f9a5 	bl	8000fb4 <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ff60 	bl	8001b30 <prvUnlockQueue>
	}
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop

08001c78 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL; 
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d004      	beq.n	8001c98 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f023 0307 	bic.w	r3, r3, #7
 8001c94:	3308      	adds	r3, #8
 8001c96:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
 8001c98:	f7fe ffb6 	bl	8000c08 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <pvPortMalloc+0x70>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001ca8:	d212      	bcs.n	8001cd0 <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8001caa:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <pvPortMalloc+0x70>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	441a      	add	r2, r3
 8001cb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <pvPortMalloc+0x70>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
	#endif

	vTaskSuspendAll();
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d90a      	bls.n	8001cd0 <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <pvPortMalloc+0x70>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <pvPortMalloc+0x74>)
 8001cc0:	4413      	add	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;			
 8001cc4:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <pvPortMalloc+0x70>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	441a      	add	r2, r3
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <pvPortMalloc+0x70>)
 8001cce:	601a      	str	r2, [r3, #0]
		}	
	}
	xTaskResumeAll();
 8001cd0:	f7fe ffa8 	bl	8000c24 <xTaskResumeAll>
	
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <pvPortMalloc+0x66>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8001cda:	f7fe fbe1 	bl	80004a0 <vApplicationMallocFailedHook>
		}
	}
	#endif	

	return pvReturn;
 8001cde:	68fb      	ldr	r3, [r7, #12]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20001588 	.word	0x20001588
 8001cec:	20000188 	.word	0x20000188

08001cf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop

08001d04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	3b04      	subs	r3, #4
 8001d14:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	3b04      	subs	r3, #4
 8001d22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	3b04      	subs	r3, #4
 8001d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	3b14      	subs	r3, #20
 8001d3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 9;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	3b24      	subs	r3, #36	; 0x24
 8001d46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_EXC_RETURN;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f06f 0202 	mvn.w	r2, #2
 8001d4e:	601a      	str	r2, [r3, #0]
	return pxTopOfStack;
 8001d50:	68fb      	ldr	r3, [r7, #12]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop

08001d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <pxCurrentTCBConst2>)
 8001d62:	6819      	ldr	r1, [r3, #0]
 8001d64:	6808      	ldr	r0, [r1, #0]
 8001d66:	f850 eb04 	ldr.w	lr, [r0], #4
 8001d6a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001d6e:	f380 8809 	msr	PSP, r0
 8001d72:	f04f 0000 	mov.w	r0, #0
 8001d76:	f380 8811 	msr	BASEPRI, r0
 8001d7a:	4770      	bx	lr

08001d7c <pxCurrentTCBConst2>:
 8001d7c:	20000088 	.word	0x20000088

08001d80 <vPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vPortStartFirstTask( void )
{
	__asm volatile(
 8001d80:	4803      	ldr	r0, [pc, #12]	; (8001d90 <vPortStartFirstTask+0x10>)
 8001d82:	6800      	ldr	r0, [r0, #0]
 8001d84:	6800      	ldr	r0, [r0, #0]
 8001d86:	f380 8808 	msr	MSP, r0
 8001d8a:	b662      	cpsie	i
 8001d8c:	df00      	svc	0
 8001d8e:	bf00      	nop
 8001d90:	e000ed08 	.word	0xe000ed08

08001d94 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8001d98:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <xPortStartScheduler+0x30>)
 8001d9a:	4a0a      	ldr	r2, [pc, #40]	; (8001dc4 <xPortStartScheduler+0x30>)
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001da2:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8001da4:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <xPortStartScheduler+0x30>)
 8001da6:	4a07      	ldr	r2, [pc, #28]	; (8001dc4 <xPortStartScheduler+0x30>)
 8001da8:	6812      	ldr	r2, [r2, #0]
 8001daa:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001dae:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8001db0:	f000 f884 	bl	8001ebc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <xPortStartScheduler+0x34>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8001dba:	f7ff ffe1 	bl	8001d80 <vPortStartFirstTask>

	/* Should not get here! */
	return 0;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	e000ed20 	.word	0xe000ed20
 8001dc8:	20000008 	.word	0x20000008

08001dcc <vPortYieldFromISR>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8001dd0:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <vPortYieldFromISR+0x14>)
 8001dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dd6:	601a      	str	r2, [r3, #0]
}
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000ed04 	.word	0xe000ed04

08001de4 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8001de8:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001dec:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
 8001df0:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <vPortEnterCritical+0x20>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	4b03      	ldr	r3, [pc, #12]	; (8001e04 <vPortEnterCritical+0x20>)
 8001df8:	601a      	str	r2, [r3, #0]
}
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	20000008 	.word	0x20000008

08001e08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <vPortExitCritical+0x28>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	1e5a      	subs	r2, r3, #1
 8001e12:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <vPortExitCritical+0x28>)
 8001e14:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <vPortExitCritical+0x28>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d103      	bne.n	8001e26 <vPortExitCritical+0x1e>
	{
		portENABLE_INTERRUPTS();
 8001e1e:	f04f 0000 	mov.w	r0, #0
 8001e22:	f380 8811 	msr	BASEPRI, r0
	}
}
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000008 	.word	0x20000008

08001e34 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001e34:	f3ef 8009 	mrs	r0, PSP
 8001e38:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <pxCurrentTCBConst>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001e40:	f01e 0f10 	tst.w	lr, #16
 8001e44:	bf08      	it	eq
 8001e46:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001e4a:	f840 ed04 	str.w	lr, [r0, #-4]!
 8001e4e:	6010      	str	r0, [r2, #0]
 8001e50:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001e54:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001e58:	f380 8811 	msr	BASEPRI, r0
 8001e5c:	f7ff f820 	bl	8000ea0 <vTaskSwitchContext>
 8001e60:	f04f 0000 	mov.w	r0, #0
 8001e64:	f380 8811 	msr	BASEPRI, r0
 8001e68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001e6c:	6819      	ldr	r1, [r3, #0]
 8001e6e:	6808      	ldr	r0, [r1, #0]
 8001e70:	f850 eb04 	ldr.w	lr, [r0], #4
 8001e74:	f01e 0f10 	tst.w	lr, #16
 8001e78:	bf08      	it	eq
 8001e7a:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001e7e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001e82:	f380 8809 	msr	PSP, r0
 8001e86:	4770      	bx	lr

08001e88 <pxCurrentTCBConst>:
 8001e88:	20000088 	.word	0x20000088

08001e8c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
    unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <SysTick_Handler+0x2c>)
 8001e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e98:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	607b      	str	r3, [r7, #4]
 8001e9e:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001ea2:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
 8001ea6:	f7fe ff53 	bl	8000d50 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 8001eaa:	f04f 0000 	mov.w	r0, #0
 8001eae:	f380 8811 	msr	BASEPRI, r0
}
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	e000ed04 	.word	0xe000ed04

08001ebc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001ec0:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <prvSetupTimerInterrupt+0x24>)
 8001ec2:	4a08      	ldr	r2, [pc, #32]	; (8001ee4 <prvSetupTimerInterrupt+0x28>)
 8001ec4:	6811      	ldr	r1, [r2, #0]
 8001ec6:	4a08      	ldr	r2, [pc, #32]	; (8001ee8 <prvSetupTimerInterrupt+0x2c>)
 8001ec8:	fba2 0201 	umull	r0, r2, r2, r1
 8001ecc:	0992      	lsrs	r2, r2, #6
 8001ece:	3a01      	subs	r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <prvSetupTimerInterrupt+0x30>)
 8001ed4:	2207      	movs	r2, #7
 8001ed6:	601a      	str	r2, [r3, #0]
}
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000e014 	.word	0xe000e014
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	10624dd3 	.word	0x10624dd3
 8001eec:	e000e010 	.word	0xe000e010

08001ef0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f103 0208 	add.w	r2, r3, #8
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f04f 32ff 	mov.w	r2, #4294967295
 8001f08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f103 0208 	add.w	r2, r3, #8
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f103 0208 	add.w	r2, r3, #8
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
}
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop

08001f30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	611a      	str	r2, [r3, #16]
}
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	601a      	str	r2, [r3, #0]
}
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop

08001f98 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fae:	d103      	bne.n	8001fb8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	e00c      	b.n	8001fd2 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3308      	adds	r3, #8
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	e002      	b.n	8001fc6 <vListInsert+0x2e>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d9f6      	bls.n	8001fc0 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	601a      	str	r2, [r3, #0]
}
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6892      	ldr	r2, [r2, #8]
 8002018:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6852      	ldr	r2, [r2, #4]
 8002022:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	429a      	cmp	r2, r3
 8002032:	d103      	bne.n	800203c <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	1e5a      	subs	r2, r3, #1
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	601a      	str	r2, [r3, #0]
}
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop

08002058 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8002064:	887b      	ldrh	r3, [r7, #2]
 8002066:	43db      	mvns	r3, r3
 8002068:	b29a      	uxth	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	801a      	strh	r2, [r3, #0]
}
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d006      	beq.n	8002098 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800208a:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <RCC_AHB1PeriphClockCmd+0x38>)
 800208c:	4a08      	ldr	r2, [pc, #32]	; (80020b0 <RCC_AHB1PeriphClockCmd+0x38>)
 800208e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	430a      	orrs	r2, r1
 8002094:	631a      	str	r2, [r3, #48]	; 0x30
 8002096:	e006      	b.n	80020a6 <RCC_AHB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <RCC_AHB1PeriphClockCmd+0x38>)
 800209a:	4a05      	ldr	r2, [pc, #20]	; (80020b0 <RCC_AHB1PeriphClockCmd+0x38>)
 800209c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	43d2      	mvns	r2, r2
 80020a2:	400a      	ands	r2, r1
 80020a4:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	40023800 	.word	0x40023800

080020b4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b087      	sub	sp, #28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	e076      	b.n	80021be <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	2201      	movs	r2, #1
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	4013      	ands	r3, r2
 80020e2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d165      	bne.n	80021b8 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	2103      	movs	r1, #3
 80020f6:	fa01 f303 	lsl.w	r3, r1, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	401a      	ands	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	791b      	ldrb	r3, [r3, #4]
 800210a:	4619      	mov	r1, r3
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	fa01 f303 	lsl.w	r3, r1, r3
 8002114:	431a      	orrs	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	791b      	ldrb	r3, [r3, #4]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d003      	beq.n	800212a <GPIO_Init+0x76>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	791b      	ldrb	r3, [r3, #4]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d12e      	bne.n	8002188 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	2103      	movs	r1, #3
 8002134:	fa01 f303 	lsl.w	r3, r1, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	401a      	ands	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	795b      	ldrb	r3, [r3, #5]
 8002148:	4619      	mov	r1, r3
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	fa01 f303 	lsl.w	r3, r1, r3
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	b29b      	uxth	r3, r3
 8002160:	2101      	movs	r1, #1
 8002162:	fa01 f303 	lsl.w	r3, r1, r3
 8002166:	43db      	mvns	r3, r3
 8002168:	401a      	ands	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	799b      	ldrb	r3, [r3, #6]
 8002176:	4619      	mov	r1, r3
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	b29b      	uxth	r3, r3
 800217c:	fa01 f303 	lsl.w	r3, r1, r3
 8002180:	b29b      	uxth	r3, r3
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	b29b      	uxth	r3, r3
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	2103      	movs	r1, #3
 8002194:	fa01 f303 	lsl.w	r3, r1, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	401a      	ands	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	79db      	ldrb	r3, [r3, #7]
 80021a8:	4619      	mov	r1, r3
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	3301      	adds	r3, #1
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	2b0f      	cmp	r3, #15
 80021c2:	d985      	bls.n	80020d0 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80021c4:	371c      	adds	r7, #28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop

080021d0 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80021d8:	2300      	movs	r3, #0
 80021da:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 80021e0:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <EXTI_GetITStatus+0x44>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4013      	ands	r3, r2
 80021e8:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <EXTI_GetITStatus+0x44>)
 80021ec:	695a      	ldr	r2, [r3, #20]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4013      	ands	r3, r2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d005      	beq.n	8002202 <EXTI_GetITStatus+0x32>
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d002      	beq.n	8002202 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 80021fc:	2301      	movs	r3, #1
 80021fe:	73fb      	strb	r3, [r7, #15]
 8002200:	e001      	b.n	8002206 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8002202:	2300      	movs	r3, #0
 8002204:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002206:	7bfb      	ldrb	r3, [r7, #15]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	40013c00 	.word	0x40013c00

08002218 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <EXTI_ClearITPendingBit+0x18>)
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	615a      	str	r2, [r3, #20]
}
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	40013c00 	.word	0x40013c00

08002234 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 800223e:	79fa      	ldrb	r2, [r7, #7]
 8002240:	4b10      	ldr	r3, [pc, #64]	; (8002284 <STM_EVAL_LEDInit+0x50>)
 8002242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002246:	4618      	mov	r0, r3
 8002248:	2101      	movs	r1, #1
 800224a:	f7ff ff15 	bl	8002078 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 800224e:	79fa      	ldrb	r2, [r7, #7]
 8002250:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <STM_EVAL_LEDInit+0x54>)
 8002252:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002256:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002258:	2301      	movs	r3, #1
 800225a:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800225c:	2300      	movs	r3, #0
 800225e:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002260:	2301      	movs	r3, #1
 8002262:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002264:	2302      	movs	r3, #2
 8002266:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8002268:	79fa      	ldrb	r2, [r7, #7]
 800226a:	4b08      	ldr	r3, [pc, #32]	; (800228c <STM_EVAL_LEDInit+0x58>)
 800226c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002270:	f107 0308 	add.w	r3, r7, #8
 8002274:	4610      	mov	r0, r2
 8002276:	4619      	mov	r1, r3
 8002278:	f7ff ff1c 	bl	80020b4 <GPIO_Init>
}
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	080023cc 	.word	0x080023cc
 8002288:	080023c4 	.word	0x080023c4
 800228c:	2000000c 	.word	0x2000000c

08002290 <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 800229a:	79fa      	ldrb	r2, [r7, #7]
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <STM_EVAL_LEDOff+0x28>)
 800229e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a2:	79f9      	ldrb	r1, [r7, #7]
 80022a4:	4a05      	ldr	r2, [pc, #20]	; (80022bc <STM_EVAL_LEDOff+0x2c>)
 80022a6:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80022aa:	835a      	strh	r2, [r3, #26]
}
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	2000000c 	.word	0x2000000c
 80022bc:	080023c4 	.word	0x080023c4

080022c0 <STM_EVAL_LEDToggle>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 80022ca:	79fa      	ldrb	r2, [r7, #7]
 80022cc:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <STM_EVAL_LEDToggle+0x34>)
 80022ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d2:	79f9      	ldrb	r1, [r7, #7]
 80022d4:	4a07      	ldr	r2, [pc, #28]	; (80022f4 <STM_EVAL_LEDToggle+0x34>)
 80022d6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80022da:	6951      	ldr	r1, [r2, #20]
 80022dc:	79f8      	ldrb	r0, [r7, #7]
 80022de:	4a06      	ldr	r2, [pc, #24]	; (80022f8 <STM_EVAL_LEDToggle+0x38>)
 80022e0:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 80022e4:	404a      	eors	r2, r1
 80022e6:	615a      	str	r2, [r3, #20]
}
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	2000000c 	.word	0x2000000c
 80022f8:	080023c4 	.word	0x080023c4

080022fc <__libc_init_array>:
 80022fc:	b570      	push	{r4, r5, r6, lr}
 80022fe:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <__libc_init_array+0x3c>)
 8002300:	4d0e      	ldr	r5, [pc, #56]	; (800233c <__libc_init_array+0x40>)
 8002302:	1aed      	subs	r5, r5, r3
 8002304:	10ad      	asrs	r5, r5, #2
 8002306:	2400      	movs	r4, #0
 8002308:	461e      	mov	r6, r3
 800230a:	42ac      	cmp	r4, r5
 800230c:	d004      	beq.n	8002318 <__libc_init_array+0x1c>
 800230e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002312:	4790      	blx	r2
 8002314:	3401      	adds	r4, #1
 8002316:	e7f8      	b.n	800230a <__libc_init_array+0xe>
 8002318:	f000 f860 	bl	80023dc <_init>
 800231c:	4d08      	ldr	r5, [pc, #32]	; (8002340 <__libc_init_array+0x44>)
 800231e:	4b09      	ldr	r3, [pc, #36]	; (8002344 <__libc_init_array+0x48>)
 8002320:	1aed      	subs	r5, r5, r3
 8002322:	10ad      	asrs	r5, r5, #2
 8002324:	2400      	movs	r4, #0
 8002326:	461e      	mov	r6, r3
 8002328:	42ac      	cmp	r4, r5
 800232a:	d004      	beq.n	8002336 <__libc_init_array+0x3a>
 800232c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002330:	4790      	blx	r2
 8002332:	3401      	adds	r4, #1
 8002334:	e7f8      	b.n	8002328 <__libc_init_array+0x2c>
 8002336:	bd70      	pop	{r4, r5, r6, pc}
 8002338:	080023f4 	.word	0x080023f4
 800233c:	080023f4 	.word	0x080023f4
 8002340:	080023f8 	.word	0x080023f8
 8002344:	080023f4 	.word	0x080023f4

08002348 <memcpy>:
 8002348:	b510      	push	{r4, lr}
 800234a:	2300      	movs	r3, #0
 800234c:	4293      	cmp	r3, r2
 800234e:	d003      	beq.n	8002358 <memcpy+0x10>
 8002350:	5ccc      	ldrb	r4, [r1, r3]
 8002352:	54c4      	strb	r4, [r0, r3]
 8002354:	3301      	adds	r3, #1
 8002356:	e7f9      	b.n	800234c <memcpy+0x4>
 8002358:	bd10      	pop	{r4, pc}

0800235a <memset>:
 800235a:	4402      	add	r2, r0
 800235c:	4603      	mov	r3, r0
 800235e:	4293      	cmp	r3, r2
 8002360:	d002      	beq.n	8002368 <memset+0xe>
 8002362:	f803 1b01 	strb.w	r1, [r3], #1
 8002366:	e7fa      	b.n	800235e <memset+0x4>
 8002368:	4770      	bx	lr

0800236a <strncpy>:
 800236a:	b510      	push	{r4, lr}
 800236c:	4603      	mov	r3, r0
 800236e:	b132      	cbz	r2, 800237e <strncpy+0x14>
 8002370:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002374:	f803 4b01 	strb.w	r4, [r3], #1
 8002378:	3a01      	subs	r2, #1
 800237a:	2c00      	cmp	r4, #0
 800237c:	d1f7      	bne.n	800236e <strncpy+0x4>
 800237e:	441a      	add	r2, r3
 8002380:	4293      	cmp	r3, r2
 8002382:	d003      	beq.n	800238c <strncpy+0x22>
 8002384:	2100      	movs	r1, #0
 8002386:	f803 1b01 	strb.w	r1, [r3], #1
 800238a:	e7f9      	b.n	8002380 <strncpy+0x16>
 800238c:	bd10      	pop	{r4, pc}
 800238e:	0000      	movs	r0, r0
 8002390:	2044454c 	.word	0x2044454c
 8002394:	6b736154 	.word	0x6b736154
 8002398:	00000000 	.word	0x00000000
 800239c:	20726d54 	.word	0x20726d54
 80023a0:	00637653 	.word	0x00637653
 80023a4:	454c4449 	.word	0x454c4449
 80023a8:	00000000 	.word	0x00000000
 80023ac:	00000a0d 	.word	0x00000a0d
 80023b0:	09097325 	.word	0x09097325
 80023b4:	25096325 	.word	0x25096325
 80023b8:	75250975 	.word	0x75250975
 80023bc:	0d752509 	.word	0x0d752509
 80023c0:	0000000a 	.word	0x0000000a

080023c4 <GPIO_PIN>:
 80023c4:	20001000 80004000                       ... .@..

080023cc <GPIO_CLK>:
 80023cc:	00000008 00000008 00000008 00000008     ................

080023dc <_init>:
 80023dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023de:	bf00      	nop
 80023e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023e2:	bc08      	pop	{r3}
 80023e4:	469e      	mov	lr, r3
 80023e6:	4770      	bx	lr

080023e8 <_fini>:
 80023e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ea:	bf00      	nop
 80023ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ee:	bc08      	pop	{r3}
 80023f0:	469e      	mov	lr, r3
 80023f2:	4770      	bx	lr
