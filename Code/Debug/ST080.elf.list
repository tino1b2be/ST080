
ST080.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020f0  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08002278  08002278  0000a278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  0800227c  0800227c  0000a27c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000000c  20000000  08002280  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000156c  20000010  0800228c  00010010  2**3
                  ALLOC
  6 ._user_heap_stack 00000400  2000157c  0800228c  0001157c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
  8 .debug_info   00004402  00000000  00000000  0001003a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000ea1  00000000  00000000  0001443c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000620  00000000  00000000  000152e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000568  00000000  00000000  00015900  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000279d  00000000  00000000  00015e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002523  00000000  00000000  00018605  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000082  00000000  00000000  0001ab28  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00001314  00000000  00000000  0001abac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002260 	.word	0x08002260

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002260 	.word	0x08002260
 80001c4:	20000014 	.word	0x20000014

080001c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001cc:	4b11      	ldr	r3, [pc, #68]	; (8000214 <SystemInit+0x4c>)
 80001ce:	4a11      	ldr	r2, [pc, #68]	; (8000214 <SystemInit+0x4c>)
 80001d0:	6812      	ldr	r2, [r2, #0]
 80001d2:	f042 0201 	orr.w	r2, r2, #1
 80001d6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001d8:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <SystemInit+0x4c>)
 80001da:	2200      	movs	r2, #0
 80001dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001de:	4a0d      	ldr	r2, [pc, #52]	; (8000214 <SystemInit+0x4c>)
 80001e0:	4b0c      	ldr	r3, [pc, #48]	; (8000214 <SystemInit+0x4c>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001ec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80001ee:	4b09      	ldr	r3, [pc, #36]	; (8000214 <SystemInit+0x4c>)
 80001f0:	4a09      	ldr	r2, [pc, #36]	; (8000218 <SystemInit+0x50>)
 80001f2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80001f4:	4b07      	ldr	r3, [pc, #28]	; (8000214 <SystemInit+0x4c>)
 80001f6:	4a07      	ldr	r2, [pc, #28]	; (8000214 <SystemInit+0x4c>)
 80001f8:	6812      	ldr	r2, [r2, #0]
 80001fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80001fe:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <SystemInit+0x4c>)
 8000202:	2200      	movs	r2, #0
 8000204:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000206:	f000 f80b 	bl	8000220 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800020a:	4b04      	ldr	r3, [pc, #16]	; (800021c <SystemInit+0x54>)
 800020c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000210:	609a      	str	r2, [r3, #8]
#endif
}
 8000212:	bd80      	pop	{r7, pc}
 8000214:	40023800 	.word	0x40023800
 8000218:	24003010 	.word	0x24003010
 800021c:	e000ed00 	.word	0xe000ed00

08000220 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000226:	2300      	movs	r3, #0
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	2300      	movs	r3, #0
 800022c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800022e:	4b35      	ldr	r3, [pc, #212]	; (8000304 <SetSysClock+0xe4>)
 8000230:	4a34      	ldr	r2, [pc, #208]	; (8000304 <SetSysClock+0xe4>)
 8000232:	6812      	ldr	r2, [r2, #0]
 8000234:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000238:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800023a:	4b32      	ldr	r3, [pc, #200]	; (8000304 <SetSysClock+0xe4>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000242:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3301      	adds	r3, #1
 8000248:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d103      	bne.n	8000258 <SetSysClock+0x38>
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000256:	d1f0      	bne.n	800023a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000258:	4b2a      	ldr	r3, [pc, #168]	; (8000304 <SetSysClock+0xe4>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000260:	2b00      	cmp	r3, #0
 8000262:	d002      	beq.n	800026a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000264:	2301      	movs	r3, #1
 8000266:	603b      	str	r3, [r7, #0]
 8000268:	e001      	b.n	800026e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800026a:	2300      	movs	r3, #0
 800026c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	2b01      	cmp	r3, #1
 8000272:	d142      	bne.n	80002fa <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000274:	4b23      	ldr	r3, [pc, #140]	; (8000304 <SetSysClock+0xe4>)
 8000276:	4a23      	ldr	r2, [pc, #140]	; (8000304 <SetSysClock+0xe4>)
 8000278:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800027a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800027e:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000280:	4b21      	ldr	r3, [pc, #132]	; (8000308 <SetSysClock+0xe8>)
 8000282:	4a21      	ldr	r2, [pc, #132]	; (8000308 <SetSysClock+0xe8>)
 8000284:	6812      	ldr	r2, [r2, #0]
 8000286:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800028a:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800028c:	4b1d      	ldr	r3, [pc, #116]	; (8000304 <SetSysClock+0xe4>)
 800028e:	4a1d      	ldr	r2, [pc, #116]	; (8000304 <SetSysClock+0xe4>)
 8000290:	6892      	ldr	r2, [r2, #8]
 8000292:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000294:	4b1b      	ldr	r3, [pc, #108]	; (8000304 <SetSysClock+0xe4>)
 8000296:	4a1b      	ldr	r2, [pc, #108]	; (8000304 <SetSysClock+0xe4>)
 8000298:	6892      	ldr	r2, [r2, #8]
 800029a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800029e:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80002a0:	4b18      	ldr	r3, [pc, #96]	; (8000304 <SetSysClock+0xe4>)
 80002a2:	4a18      	ldr	r2, [pc, #96]	; (8000304 <SetSysClock+0xe4>)
 80002a4:	6892      	ldr	r2, [r2, #8]
 80002a6:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80002aa:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80002ac:	4b15      	ldr	r3, [pc, #84]	; (8000304 <SetSysClock+0xe4>)
 80002ae:	4a17      	ldr	r2, [pc, #92]	; (800030c <SetSysClock+0xec>)
 80002b0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80002b2:	4b14      	ldr	r3, [pc, #80]	; (8000304 <SetSysClock+0xe4>)
 80002b4:	4a13      	ldr	r2, [pc, #76]	; (8000304 <SetSysClock+0xe4>)
 80002b6:	6812      	ldr	r2, [r2, #0]
 80002b8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80002bc:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80002be:	bf00      	nop
 80002c0:	4b10      	ldr	r3, [pc, #64]	; (8000304 <SetSysClock+0xe4>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d0f9      	beq.n	80002c0 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80002cc:	4b10      	ldr	r3, [pc, #64]	; (8000310 <SetSysClock+0xf0>)
 80002ce:	f240 6205 	movw	r2, #1541	; 0x605
 80002d2:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80002d4:	4b0b      	ldr	r3, [pc, #44]	; (8000304 <SetSysClock+0xe4>)
 80002d6:	4a0b      	ldr	r2, [pc, #44]	; (8000304 <SetSysClock+0xe4>)
 80002d8:	6892      	ldr	r2, [r2, #8]
 80002da:	f022 0203 	bic.w	r2, r2, #3
 80002de:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80002e0:	4b08      	ldr	r3, [pc, #32]	; (8000304 <SetSysClock+0xe4>)
 80002e2:	4a08      	ldr	r2, [pc, #32]	; (8000304 <SetSysClock+0xe4>)
 80002e4:	6892      	ldr	r2, [r2, #8]
 80002e6:	f042 0202 	orr.w	r2, r2, #2
 80002ea:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80002ec:	bf00      	nop
 80002ee:	4b05      	ldr	r3, [pc, #20]	; (8000304 <SetSysClock+0xe4>)
 80002f0:	689b      	ldr	r3, [r3, #8]
 80002f2:	f003 030c 	and.w	r3, r3, #12
 80002f6:	2b08      	cmp	r3, #8
 80002f8:	d1f9      	bne.n	80002ee <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	40023800 	.word	0x40023800
 8000308:	40007000 	.word	0x40007000
 800030c:	0740690a 	.word	0x0740690a
 8000310:	40023c00 	.word	0x40023c00

08000314 <USART2_IRQHandler>:
/******************************************************************************/
// ----------------------------------------------------------------------------

uint16_t uart2_cnt = 0;

void USART2_IRQHandler( void ) {
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	++uart2_cnt;
 8000318:	4b05      	ldr	r3, [pc, #20]	; (8000330 <USART2_IRQHandler+0x1c>)
 800031a:	881b      	ldrh	r3, [r3, #0]
 800031c:	3301      	adds	r3, #1
 800031e:	b29a      	uxth	r2, r3
 8000320:	4b03      	ldr	r3, [pc, #12]	; (8000330 <USART2_IRQHandler+0x1c>)
 8000322:	801a      	strh	r2, [r3, #0]
	USART_ClearFlag( USART2, USART_FLAG_TC );
 8000324:	4803      	ldr	r0, [pc, #12]	; (8000334 <USART2_IRQHandler+0x20>)
 8000326:	2140      	movs	r1, #64	; 0x40
 8000328:	f001 ff2c 	bl	8002184 <USART_ClearFlag>
}
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	2000002c 	.word	0x2000002c
 8000334:	40004400 	.word	0x40004400

08000338 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
}
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000348:	e7fe      	b.n	8000348 <HardFault_Handler+0x4>
 800034a:	bf00      	nop

0800034c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000350:	e7fe      	b.n	8000350 <MemManage_Handler+0x4>
 8000352:	bf00      	nop

08000354 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000358:	e7fe      	b.n	8000358 <BusFault_Handler+0x4>
 800035a:	bf00      	nop

0800035c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000360:	e7fe      	b.n	8000360 <UsageFault_Handler+0x4>
 8000362:	bf00      	nop

08000364 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
}
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr

08000370 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000370:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000372:	f000 b804 	b.w	800037e <LoopCopyDataInit>

08000376 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000376:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <LoopFillZerobss+0x22>)
  ldr  r3, [r3, r1]
 8000378:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800037a:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800037c:	3104      	adds	r1, #4

0800037e <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800037e:	480f      	ldr	r0, [pc, #60]	; (80003bc <LoopFillZerobss+0x26>)
  ldr  r3, =_edata
 8000380:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <LoopFillZerobss+0x2a>)
  adds  r2, r0, r1
 8000382:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000384:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000386:	f4ff aff6 	bcc.w	8000376 <CopyDataInit>
  ldr  r2, =_sbss
 800038a:	4a0e      	ldr	r2, [pc, #56]	; (80003c4 <LoopFillZerobss+0x2e>)
  b  LoopFillZerobss
 800038c:	f000 b803 	b.w	8000396 <LoopFillZerobss>

08000390 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000390:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000392:	f842 3b04 	str.w	r3, [r2], #4

08000396 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000396:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <LoopFillZerobss+0x32>)
  cmp  r2, r3
 8000398:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800039a:	f4ff aff9 	bcc.w	8000390 <FillZerobss>
  
  
/*FPU settings*/
 ldr     r0, =0xE000ED88           /* Enable CP10,CP11 */
 800039e:	480b      	ldr	r0, [pc, #44]	; (80003cc <LoopFillZerobss+0x36>)
 ldr     r1,[r0]
 80003a0:	6801      	ldr	r1, [r0, #0]
 orr     r1,r1,#(0xF << 20)
 80003a2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 str     r1,[r0]
 80003a6:	6001      	str	r1, [r0, #0]
	
/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003a8:	f7ff ff0e 	bl	80001c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003ac:	f001 fefa 	bl	80021a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003b0:	f000 f810 	bl	80003d4 <main>
  bx  lr    
 80003b4:	4770      	bx	lr
 80003b6:	0000      	.short	0x0000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80003b8:	08002280 	.word	0x08002280
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80003c0:	2000000c 	.word	0x2000000c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80003c4:	20000010 	.word	0x20000010
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003c8:	2000157c 	.word	0x2000157c
  cmp  r2, r3
  bcc  FillZerobss
  
  
/*FPU settings*/
 ldr     r0, =0xE000ED88           /* Enable CP10,CP11 */
 80003cc:	e000ed88 	.word	0xe000ed88

080003d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003d0:	f7ff bffe 	b.w	80003d0 <ADC_IRQHandler>

080003d4 <main>:
uint16_t u16PWM1 = 0;



// ============================================================================
int main(void) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0

	vTaskStartScheduler(); // This should never return.
 80003d8:	f000 fc72 	bl	8000cc0 <vTaskStartScheduler>
	// Will only get here if there was insufficient memory to create
	// the idle task.
	while(1);
 80003dc:	e7fe      	b.n	80003dc <main+0x8>
 80003de:	bf00      	nop

080003e0 <vApplicationTickHook>:
}


// This FreeRTOS callback function gets called once per tick (default = 1000Hz).
// ----------------------------------------------------------------------------
void vApplicationTickHook(void) {
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
	++tickTime;
 80003e4:	4b06      	ldr	r3, [pc, #24]	; (8000400 <vApplicationTickHook+0x20>)
 80003e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003ea:	3201      	adds	r2, #1
 80003ec:	f143 0300 	adc.w	r3, r3, #0
 80003f0:	4903      	ldr	r1, [pc, #12]	; (8000400 <vApplicationTickHook+0x20>)
 80003f2:	e9c1 2300 	strd	r2, r3, [r1]
}
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	20000030 	.word	0x20000030

08000404 <vApplicationIdleHook>:

// This FreeRTOS call-back function gets when no other task is ready to execute.
// On a completely unloaded system this is getting called at over 2.5MHz!
// ----------------------------------------------------------------------------
void vApplicationIdleHook(void) {
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
	++u64IdleTicksCnt;
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <vApplicationIdleHook+0x20>)
 800040a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800040e:	3201      	adds	r2, #1
 8000410:	f143 0300 	adc.w	r3, r3, #0
 8000414:	4903      	ldr	r1, [pc, #12]	; (8000424 <vApplicationIdleHook+0x20>)
 8000416:	e9c1 2300 	strd	r2, r3, [r1]
}
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	20000038 	.word	0x20000038

08000428 <vApplicationMallocFailedHook>:

// A required FreeRTOS function.
// ----------------------------------------------------------------------------
void vApplicationMallocFailedHook(void) {
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
	configASSERT(0);  // Latch on any failure / error.
 800042c:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000430:	f380 8811 	msr	BASEPRI, r0
 8000434:	e7fe      	b.n	8000434 <vApplicationMallocFailedHook+0xc>
 8000436:	bf00      	nop

08000438 <EXTI0_IRQHandler>:
	EXTI->RTSR &= 0xFFFF0000;
	EXTI->PR &= 0xFFFF0000;
}

#ifndef TM_EXTI_DISABLE_DEFAULT_HANDLER_0
void EXTI0_IRQHandler(void) {
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR0)) {
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <EXTI0_IRQHandler+0x20>)
 800043e:	695b      	ldr	r3, [r3, #20]
 8000440:	f003 0301 	and.w	r3, r3, #1
 8000444:	2b00      	cmp	r3, #0
 8000446:	d005      	beq.n	8000454 <EXTI0_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR0;
 8000448:	4b03      	ldr	r3, [pc, #12]	; (8000458 <EXTI0_IRQHandler+0x20>)
 800044a:	2201      	movs	r2, #1
 800044c:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_0);
 800044e:	2001      	movs	r0, #1
 8000450:	f3af 8000 	nop.w
	}
}
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	40013c00 	.word	0x40013c00

0800045c <EXTI1_IRQHandler>:
#endif

#ifndef TM_EXTI_DISABLE_DEFAULT_HANDLER_1
void EXTI1_IRQHandler(void) {
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR1)) {
 8000460:	4b06      	ldr	r3, [pc, #24]	; (800047c <EXTI1_IRQHandler+0x20>)
 8000462:	695b      	ldr	r3, [r3, #20]
 8000464:	f003 0302 	and.w	r3, r3, #2
 8000468:	2b00      	cmp	r3, #0
 800046a:	d005      	beq.n	8000478 <EXTI1_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR1;
 800046c:	4b03      	ldr	r3, [pc, #12]	; (800047c <EXTI1_IRQHandler+0x20>)
 800046e:	2202      	movs	r2, #2
 8000470:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_1);
 8000472:	2002      	movs	r0, #2
 8000474:	f3af 8000 	nop.w
	}
}
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40013c00 	.word	0x40013c00

08000480 <EXTI2_IRQHandler>:
#endif

#ifndef TM_EXTI_DISABLE_DEFAULT_HANDLER_2
void EXTI2_IRQHandler(void) {
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR2)) {
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <EXTI2_IRQHandler+0x20>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	f003 0304 	and.w	r3, r3, #4
 800048c:	2b00      	cmp	r3, #0
 800048e:	d005      	beq.n	800049c <EXTI2_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR2;
 8000490:	4b03      	ldr	r3, [pc, #12]	; (80004a0 <EXTI2_IRQHandler+0x20>)
 8000492:	2204      	movs	r2, #4
 8000494:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_2);
 8000496:	2004      	movs	r0, #4
 8000498:	f3af 8000 	nop.w
	}
}
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40013c00 	.word	0x40013c00

080004a4 <EXTI3_IRQHandler>:
#endif

#ifndef TM_EXTI_DISABLE_DEFAULT_HANDLER_3
void EXTI3_IRQHandler(void) {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR3)) {
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <EXTI3_IRQHandler+0x20>)
 80004aa:	695b      	ldr	r3, [r3, #20]
 80004ac:	f003 0308 	and.w	r3, r3, #8
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d005      	beq.n	80004c0 <EXTI3_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR3;
 80004b4:	4b03      	ldr	r3, [pc, #12]	; (80004c4 <EXTI3_IRQHandler+0x20>)
 80004b6:	2208      	movs	r2, #8
 80004b8:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_3);
 80004ba:	2008      	movs	r0, #8
 80004bc:	f3af 8000 	nop.w
	}
}
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	40013c00 	.word	0x40013c00

080004c8 <EXTI4_IRQHandler>:
#endif

#ifndef TM_EXTI_DISABLE_DEFAULT_HANDLER_4
void EXTI4_IRQHandler(void) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR4)) {
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <EXTI4_IRQHandler+0x20>)
 80004ce:	695b      	ldr	r3, [r3, #20]
 80004d0:	f003 0310 	and.w	r3, r3, #16
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d005      	beq.n	80004e4 <EXTI4_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR4;
 80004d8:	4b03      	ldr	r3, [pc, #12]	; (80004e8 <EXTI4_IRQHandler+0x20>)
 80004da:	2210      	movs	r2, #16
 80004dc:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_4);
 80004de:	2010      	movs	r0, #16
 80004e0:	f3af 8000 	nop.w
	}
}
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40013c00 	.word	0x40013c00

080004ec <EXTI9_5_IRQHandler>:
#endif

#ifndef TM_EXTI_DISABLE_DEFAULT_HANDLER_9_5
void EXTI9_5_IRQHandler(void) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR5)) {
 80004f0:	4b20      	ldr	r3, [pc, #128]	; (8000574 <EXTI9_5_IRQHandler+0x88>)
 80004f2:	695b      	ldr	r3, [r3, #20]
 80004f4:	f003 0320 	and.w	r3, r3, #32
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d005      	beq.n	8000508 <EXTI9_5_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR5;
 80004fc:	4b1d      	ldr	r3, [pc, #116]	; (8000574 <EXTI9_5_IRQHandler+0x88>)
 80004fe:	2220      	movs	r2, #32
 8000500:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_5);
 8000502:	2020      	movs	r0, #32
 8000504:	f3af 8000 	nop.w
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR6)) {
 8000508:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <EXTI9_5_IRQHandler+0x88>)
 800050a:	695b      	ldr	r3, [r3, #20]
 800050c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000510:	2b00      	cmp	r3, #0
 8000512:	d005      	beq.n	8000520 <EXTI9_5_IRQHandler+0x34>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR6;
 8000514:	4b17      	ldr	r3, [pc, #92]	; (8000574 <EXTI9_5_IRQHandler+0x88>)
 8000516:	2240      	movs	r2, #64	; 0x40
 8000518:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_6);
 800051a:	2040      	movs	r0, #64	; 0x40
 800051c:	f3af 8000 	nop.w
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR7)) {
 8000520:	4b14      	ldr	r3, [pc, #80]	; (8000574 <EXTI9_5_IRQHandler+0x88>)
 8000522:	695b      	ldr	r3, [r3, #20]
 8000524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000528:	2b00      	cmp	r3, #0
 800052a:	d005      	beq.n	8000538 <EXTI9_5_IRQHandler+0x4c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR7;
 800052c:	4b11      	ldr	r3, [pc, #68]	; (8000574 <EXTI9_5_IRQHandler+0x88>)
 800052e:	2280      	movs	r2, #128	; 0x80
 8000530:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_7);
 8000532:	2080      	movs	r0, #128	; 0x80
 8000534:	f3af 8000 	nop.w
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR8)) {
 8000538:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <EXTI9_5_IRQHandler+0x88>)
 800053a:	695b      	ldr	r3, [r3, #20]
 800053c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000540:	2b00      	cmp	r3, #0
 8000542:	d007      	beq.n	8000554 <EXTI9_5_IRQHandler+0x68>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR8;
 8000544:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <EXTI9_5_IRQHandler+0x88>)
 8000546:	f44f 7280 	mov.w	r2, #256	; 0x100
 800054a:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_8);
 800054c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000550:	f3af 8000 	nop.w
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR9)) {
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <EXTI9_5_IRQHandler+0x88>)
 8000556:	695b      	ldr	r3, [r3, #20]
 8000558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800055c:	2b00      	cmp	r3, #0
 800055e:	d007      	beq.n	8000570 <EXTI9_5_IRQHandler+0x84>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR9;
 8000560:	4b04      	ldr	r3, [pc, #16]	; (8000574 <EXTI9_5_IRQHandler+0x88>)
 8000562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000566:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_9);
 8000568:	f44f 7000 	mov.w	r0, #512	; 0x200
 800056c:	f3af 8000 	nop.w
	}
}
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40013c00 	.word	0x40013c00

08000578 <EXTI15_10_IRQHandler>:
#endif

#ifndef TM_EXTI_DISABLE_DEFAULT_HANDLER_15_10
void EXTI15_10_IRQHandler(void) {
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR10)) {
 800057c:	4b2a      	ldr	r3, [pc, #168]	; (8000628 <EXTI15_10_IRQHandler+0xb0>)
 800057e:	695b      	ldr	r3, [r3, #20]
 8000580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000584:	2b00      	cmp	r3, #0
 8000586:	d007      	beq.n	8000598 <EXTI15_10_IRQHandler+0x20>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR10;
 8000588:	4b27      	ldr	r3, [pc, #156]	; (8000628 <EXTI15_10_IRQHandler+0xb0>)
 800058a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800058e:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_10);
 8000590:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000594:	f3af 8000 	nop.w
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR11)) {
 8000598:	4b23      	ldr	r3, [pc, #140]	; (8000628 <EXTI15_10_IRQHandler+0xb0>)
 800059a:	695b      	ldr	r3, [r3, #20]
 800059c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d007      	beq.n	80005b4 <EXTI15_10_IRQHandler+0x3c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR11;
 80005a4:	4b20      	ldr	r3, [pc, #128]	; (8000628 <EXTI15_10_IRQHandler+0xb0>)
 80005a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005aa:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_11);
 80005ac:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80005b0:	f3af 8000 	nop.w
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR12)) {
 80005b4:	4b1c      	ldr	r3, [pc, #112]	; (8000628 <EXTI15_10_IRQHandler+0xb0>)
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d007      	beq.n	80005d0 <EXTI15_10_IRQHandler+0x58>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR12;
 80005c0:	4b19      	ldr	r3, [pc, #100]	; (8000628 <EXTI15_10_IRQHandler+0xb0>)
 80005c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005c6:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_12);
 80005c8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80005cc:	f3af 8000 	nop.w
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR13)) {
 80005d0:	4b15      	ldr	r3, [pc, #84]	; (8000628 <EXTI15_10_IRQHandler+0xb0>)
 80005d2:	695b      	ldr	r3, [r3, #20]
 80005d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d007      	beq.n	80005ec <EXTI15_10_IRQHandler+0x74>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR13;
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <EXTI15_10_IRQHandler+0xb0>)
 80005de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005e2:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_13);
 80005e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80005e8:	f3af 8000 	nop.w
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR14)) {
 80005ec:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <EXTI15_10_IRQHandler+0xb0>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d007      	beq.n	8000608 <EXTI15_10_IRQHandler+0x90>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR14;
 80005f8:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <EXTI15_10_IRQHandler+0xb0>)
 80005fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005fe:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_14);
 8000600:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000604:	f3af 8000 	nop.w
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR15)) {
 8000608:	4b07      	ldr	r3, [pc, #28]	; (8000628 <EXTI15_10_IRQHandler+0xb0>)
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000610:	2b00      	cmp	r3, #0
 8000612:	d007      	beq.n	8000624 <EXTI15_10_IRQHandler+0xac>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR15;
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <EXTI15_10_IRQHandler+0xb0>)
 8000616:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800061a:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_15);
 800061c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000620:	f3af 8000 	nop.w
	}
}
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40013c00 	.word	0x40013c00

0800062c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8000636:	f000 fa53 	bl	8000ae0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <xTimerCreateTimerTask+0x50>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d00f      	beq.n	8000662 <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY, &xTimerTaskHandle );	
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY, NULL);
 8000642:	2302      	movs	r3, #2
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2300      	movs	r3, #0
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	2300      	movs	r3, #0
 800064c:	9302      	str	r3, [sp, #8]
 800064e:	2300      	movs	r3, #0
 8000650:	9303      	str	r3, [sp, #12]
 8000652:	480b      	ldr	r0, [pc, #44]	; (8000680 <xTimerCreateTimerTask+0x54>)
 8000654:	490b      	ldr	r1, [pc, #44]	; (8000684 <xTimerCreateTimerTask+0x58>)
 8000656:	f44f 7282 	mov.w	r2, #260	; 0x104
 800065a:	2300      	movs	r3, #0
 800065c:	f000 fa6a 	bl	8000b34 <xTaskGenericCreate>
 8000660:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d104      	bne.n	8000672 <xTimerCreateTimerTask+0x46>
 8000668:	f04f 0050 	mov.w	r0, #80	; 0x50
 800066c:	f380 8811 	msr	BASEPRI, r0
 8000670:	e7fe      	b.n	8000670 <xTimerCreateTimerTask+0x44>
	return xReturn;
 8000672:	687b      	ldr	r3, [r7, #4]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000070 	.word	0x20000070
 8000680:	08000789 	.word	0x08000789
 8000684:	08002238 	.word	0x08002238

08000688 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]
 8000694:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800069a:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <xTimerGenericCommand+0x88>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d030      	beq.n	8000704 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d11c      	bne.n	80006ee <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80006b4:	f000 ff5c 	bl	8001570 <xTaskGetSchedulerState>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d10b      	bne.n	80006d6 <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <xTimerGenericCommand+0x88>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	f107 0310 	add.w	r3, r7, #16
 80006c6:	4610      	mov	r0, r2
 80006c8:	4619      	mov	r1, r3
 80006ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006cc:	2300      	movs	r3, #0
 80006ce:	f001 f871 	bl	80017b4 <xQueueGenericSend>
 80006d2:	61f8      	str	r0, [r7, #28]
 80006d4:	e016      	b.n	8000704 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <xTimerGenericCommand+0x88>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	f107 0310 	add.w	r3, r7, #16
 80006de:	4610      	mov	r0, r2
 80006e0:	4619      	mov	r1, r3
 80006e2:	2200      	movs	r2, #0
 80006e4:	2300      	movs	r3, #0
 80006e6:	f001 f865 	bl	80017b4 <xQueueGenericSend>
 80006ea:	61f8      	str	r0, [r7, #28]
 80006ec:	e00a      	b.n	8000704 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <xTimerGenericCommand+0x88>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	f107 0310 	add.w	r3, r7, #16
 80006f6:	4610      	mov	r0, r2
 80006f8:	4619      	mov	r1, r3
 80006fa:	683a      	ldr	r2, [r7, #0]
 80006fc:	2300      	movs	r3, #0
 80006fe:	f001 f8f9 	bl	80018f4 <xQueueGenericSendFromISR>
 8000702:	61f8      	str	r0, [r7, #28]
		}
		
		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}
	
	return xReturn;
 8000704:	69fb      	ldr	r3, [r7, #28]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3720      	adds	r7, #32
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000070 	.word	0x20000070

08000714 <prvProcessExpiredTimer>:
	
#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af02      	add	r7, sp, #8
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <prvProcessExpiredTimer+0x70>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	68db      	ldr	r3, [r3, #12]
 8000726:	60fb      	str	r3, [r7, #12]
	vListRemove( &( pxTimer->xTimerListItem ) );
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	3304      	adds	r3, #4
 800072c:	4618      	mov	r0, r3
 800072e:	f001 fd01 	bl	8002134 <vListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d11d      	bne.n	8000776 <prvProcessExpiredTimer+0x62>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	699a      	ldr	r2, [r3, #24]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4413      	add	r3, r2
 8000742:	68f8      	ldr	r0, [r7, #12]
 8000744:	4619      	mov	r1, r3
 8000746:	683a      	ldr	r2, [r7, #0]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f000 f8ab 	bl	80008a4 <prvInsertTimerInActiveList>
 800074e:	4603      	mov	r3, r0
 8000750:	2b01      	cmp	r3, #1
 8000752:	d110      	bne.n	8000776 <prvProcessExpiredTimer+0x62>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8000754:	2300      	movs	r3, #0
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	68f8      	ldr	r0, [r7, #12]
 800075a:	2100      	movs	r1, #0
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	2300      	movs	r3, #0
 8000760:	f7ff ff92 	bl	8000688 <xTimerGenericCommand>
 8000764:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d104      	bne.n	8000776 <prvProcessExpiredTimer+0x62>
 800076c:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000770:	f380 8811 	msr	BASEPRI, r0
 8000774:	e7fe      	b.n	8000774 <prvProcessExpiredTimer+0x60>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077a:	68f8      	ldr	r0, [r7, #12]
 800077c:	4798      	blx	r3
}
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000068 	.word	0x20000068

08000788 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8000790:	f107 0308 	add.w	r3, r7, #8
 8000794:	4618      	mov	r0, r3
 8000796:	f000 f83f 	bl	8000818 <prvGetNextExpireTime>
 800079a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	68f8      	ldr	r0, [r7, #12]
 80007a0:	4619      	mov	r1, r3
 80007a2:	f000 f803 	bl	80007ac <prvProcessTimerOrBlockTask>
		
		/* Empty the command queue. */
		prvProcessReceivedCommands();		
 80007a6:	f000 f8bf 	bl	8000928 <prvProcessReceivedCommands>
	}
 80007aa:	e7f1      	b.n	8000790 <prvTimerTask+0x8>

080007ac <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
 80007b6:	f000 fabd 	bl	8000d34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80007ba:	f107 0308 	add.w	r3, r7, #8
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 f84e 	bl	8000860 <prvSampleTimeNow>
 80007c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d11e      	bne.n	800080a <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d10a      	bne.n	80007e8 <prvProcessTimerOrBlockTask+0x3c>
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d806      	bhi.n	80007e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
 80007da:	f000 fab9 	bl	8000d50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	68f9      	ldr	r1, [r7, #12]
 80007e2:	f7ff ff97 	bl	8000714 <prvProcessExpiredTimer>
 80007e6:	e012      	b.n	800080e <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <prvProcessTimerOrBlockTask+0x68>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	6879      	ldr	r1, [r7, #4]
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	1acb      	subs	r3, r1, r3
 80007f2:	4610      	mov	r0, r2
 80007f4:	4619      	mov	r1, r3
 80007f6:	f001 faab 	bl	8001d50 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 80007fa:	f000 faa9 	bl	8000d50 <xTaskResumeAll>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d104      	bne.n	800080e <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 8000804:	f001 fb78 	bl	8001ef8 <vPortYieldFromISR>
 8000808:	e001      	b.n	800080e <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			xTaskResumeAll();
 800080a:	f000 faa1 	bl	8000d50 <xTaskResumeAll>
		}
	}
}
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000070 	.word	0x20000070

08000818 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <prvGetNextExpireTime+0x44>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	bf14      	ite	ne
 800082a:	2300      	movne	r3, #0
 800082c:	2301      	moveq	r3, #1
 800082e:	b2db      	uxtb	r3, r3
 8000830:	461a      	mov	r2, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d105      	bne.n	800084a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800083e:	4b07      	ldr	r3, [pc, #28]	; (800085c <prvGetNextExpireTime+0x44>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	e001      	b.n	800084e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800084e:	68fb      	ldr	r3, [r7, #12]
}
 8000850:	4618      	mov	r0, r3
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	20000068 	.word	0x20000068

08000860 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
 8000868:	f000 faf6 	bl	8000e58 <xTaskGetTickCount>
 800086c:	60f8      	str	r0, [r7, #12]
	
	if( xTimeNow < xLastTime )
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <prvSampleTimeNow+0x40>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	429a      	cmp	r2, r3
 8000876:	d208      	bcs.n	800088a <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <prvSampleTimeNow+0x40>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4618      	mov	r0, r3
 800087e:	f000 f8d3 	bl	8000a28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2201      	movs	r2, #1
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	e002      	b.n	8000890 <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
	}
	
	xLastTime = xTimeNow;
 8000890:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <prvSampleTimeNow+0x40>)
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	601a      	str	r2, [r3, #0]
	
	return xTimeNow;
 8000896:	68fb      	ldr	r3, [r7, #12]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000074 	.word	0x20000074

080008a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
 80008b0:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	68ba      	ldr	r2, [r7, #8]
 80008ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	68fa      	ldr	r2, [r7, #12]
 80008c0:	611a      	str	r2, [r3, #16]
	
	if( xNextExpiryTime <= xTimeNow )
 80008c2:	68ba      	ldr	r2, [r7, #8]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d812      	bhi.n	80008f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	1ad2      	subs	r2, r2, r3
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d302      	bcc.n	80008de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80008d8:	2301      	movs	r3, #1
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	e01b      	b.n	8000916 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <prvInsertTimerInActiveList+0x7c>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	3304      	adds	r3, #4
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	f001 fbeb 	bl	80020c4 <vListInsert>
 80008ee:	e012      	b.n	8000916 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d206      	bcs.n	8000906 <prvInsertTimerInActiveList+0x62>
 80008f8:	68ba      	ldr	r2, [r7, #8]
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d302      	bcc.n	8000906 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8000900:	2301      	movs	r3, #1
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	e007      	b.n	8000916 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8000906:	4b07      	ldr	r3, [pc, #28]	; (8000924 <prvInsertTimerInActiveList+0x80>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	3304      	adds	r3, #4
 800090e:	4610      	mov	r0, r2
 8000910:	4619      	mov	r1, r3
 8000912:	f001 fbd7 	bl	80020c4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8000916:	697b      	ldr	r3, [r7, #20]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	2000006c 	.word	0x2000006c
 8000924:	20000068 	.word	0x20000068

08000928 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	; 0x28
 800092c:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff95 	bl	8000860 <prvSampleTimeNow>
 8000936:	61f8      	str	r0, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8000938:	e063      	b.n	8000a02 <prvProcessReceivedCommands+0xda>
	{
		pxTimer = xMessage.pxTimer;
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
 800093e:	69bb      	ldr	r3, [r7, #24]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d008      	beq.n	8000956 <prvProcessReceivedCommands+0x2e>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d004      	beq.n	8000956 <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				vListRemove( &( pxTimer->xTimerListItem ) );
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	3304      	adds	r3, #4
 8000950:	4618      	mov	r0, r3
 8000952:	f001 fbef 	bl	8002134 <vListRemove>
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );
		
		switch( xMessage.xMessageID )
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	2b03      	cmp	r3, #3
 800095a:	d851      	bhi.n	8000a00 <prvProcessReceivedCommands+0xd8>
 800095c:	a201      	add	r2, pc, #4	; (adr r2, 8000964 <prvProcessReceivedCommands+0x3c>)
 800095e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000962:	bf00      	nop
 8000964:	08000975 	.word	0x08000975
 8000968:	08000a01 	.word	0x08000a01
 800096c:	080009cb 	.word	0x080009cb
 8000970:	080009f9 	.word	0x080009f9
		{
			case tmrCOMMAND_START :	
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
 8000974:	68fa      	ldr	r2, [r7, #12]
 8000976:	69bb      	ldr	r3, [r7, #24]
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	441a      	add	r2, r3
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	69b8      	ldr	r0, [r7, #24]
 8000980:	4611      	mov	r1, r2
 8000982:	69fa      	ldr	r2, [r7, #28]
 8000984:	f7ff ff8e 	bl	80008a4 <prvInsertTimerInActiveList>
 8000988:	4603      	mov	r3, r0
 800098a:	2b01      	cmp	r3, #1
 800098c:	d11c      	bne.n	80009c8 <prvProcessReceivedCommands+0xa0>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 800098e:	69bb      	ldr	r3, [r7, #24]
 8000990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000992:	69b8      	ldr	r0, [r7, #24]
 8000994:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8000996:	69bb      	ldr	r3, [r7, #24]
 8000998:	69db      	ldr	r3, [r3, #28]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d114      	bne.n	80009c8 <prvProcessReceivedCommands+0xa0>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	4413      	add	r3, r2
 80009a6:	2200      	movs	r2, #0
 80009a8:	9200      	str	r2, [sp, #0]
 80009aa:	69b8      	ldr	r0, [r7, #24]
 80009ac:	2100      	movs	r1, #0
 80009ae:	461a      	mov	r2, r3
 80009b0:	2300      	movs	r3, #0
 80009b2:	f7ff fe69 	bl	8000688 <xTimerGenericCommand>
 80009b6:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d104      	bne.n	80009c8 <prvProcessReceivedCommands+0xa0>
 80009be:	f04f 0050 	mov.w	r0, #80	; 0x50
 80009c2:	f380 8811 	msr	BASEPRI, r0
 80009c6:	e7fe      	b.n	80009c6 <prvProcessReceivedCommands+0x9e>
						( void ) xResult;
					}
				}
				break;
 80009c8:	e01b      	b.n	8000a02 <prvProcessReceivedCommands+0xda>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80009d0:	69bb      	ldr	r3, [r7, #24]
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d104      	bne.n	80009e2 <prvProcessReceivedCommands+0xba>
 80009d8:	f04f 0050 	mov.w	r0, #80	; 0x50
 80009dc:	f380 8811 	msr	BASEPRI, r0
 80009e0:	e7fe      	b.n	80009e0 <prvProcessReceivedCommands+0xb8>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	699a      	ldr	r2, [r3, #24]
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	4413      	add	r3, r2
 80009ea:	69b8      	ldr	r0, [r7, #24]
 80009ec:	4619      	mov	r1, r3
 80009ee:	69fa      	ldr	r2, [r7, #28]
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	f7ff ff57 	bl	80008a4 <prvInsertTimerInActiveList>
				break;
 80009f6:	e004      	b.n	8000a02 <prvProcessReceivedCommands+0xda>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
 80009f8:	69b8      	ldr	r0, [r7, #24]
 80009fa:	f001 fa0f 	bl	8001e1c <vPortFree>
				break;
 80009fe:	e000      	b.n	8000a02 <prvProcessReceivedCommands+0xda>

			default	:			
				/* Don't expect to get here. */
				break;
 8000a00:	bf00      	nop

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <prvProcessReceivedCommands+0xfc>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	f107 0308 	add.w	r3, r7, #8
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2300      	movs	r3, #0
 8000a12:	f000 ffd1 	bl	80019b8 <xQueueGenericReceive>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d18e      	bne.n	800093a <prvProcessReceivedCommands+0x12>
			default	:			
				/* Don't expect to get here. */
				break;
		}
	}
}
 8000a1c:	3720      	adds	r7, #32
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000070 	.word	0x20000070

08000a28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	; 0x28
 8000a2c:	af02      	add	r7, sp, #8
 8000a2e:	6078      	str	r0, [r7, #4]
	
	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8000a30:	e03f      	b.n	8000ab2 <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8000a32:	4b29      	ldr	r3, [pc, #164]	; (8000ad8 <prvSwitchTimerLists+0xb0>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8000a3c:	4b26      	ldr	r3, [pc, #152]	; (8000ad8 <prvSwitchTimerLists+0xb0>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	68db      	ldr	r3, [r3, #12]
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	61bb      	str	r3, [r7, #24]
		vListRemove( &( pxTimer->xTimerListItem ) );
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	3304      	adds	r3, #4
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f001 fb72 	bl	8002134 <vListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a54:	69b8      	ldr	r0, [r7, #24]
 8000a56:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	69db      	ldr	r3, [r3, #28]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d128      	bne.n	8000ab2 <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	699a      	ldr	r2, [r3, #24]
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	4413      	add	r3, r2
 8000a68:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
 8000a6a:	697a      	ldr	r2, [r7, #20]
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d90e      	bls.n	8000a90 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	697a      	ldr	r2, [r7, #20]
 8000a76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	69ba      	ldr	r2, [r7, #24]
 8000a7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8000a7e:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <prvSwitchTimerLists+0xb0>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	3304      	adds	r3, #4
 8000a86:	4610      	mov	r0, r2
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f001 fb1b 	bl	80020c4 <vListInsert>
 8000a8e:	e010      	b.n	8000ab2 <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8000a90:	2300      	movs	r3, #0
 8000a92:	9300      	str	r3, [sp, #0]
 8000a94:	69b8      	ldr	r0, [r7, #24]
 8000a96:	2100      	movs	r1, #0
 8000a98:	69fa      	ldr	r2, [r7, #28]
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f7ff fdf4 	bl	8000688 <xTimerGenericCommand>
 8000aa0:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d104      	bne.n	8000ab2 <prvSwitchTimerLists+0x8a>
 8000aa8:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000aac:	f380 8811 	msr	BASEPRI, r0
 8000ab0:	e7fe      	b.n	8000ab0 <prvSwitchTimerLists+0x88>
	
	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <prvSwitchTimerLists+0xb0>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1ba      	bne.n	8000a32 <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <prvSwitchTimerLists+0xb0>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <prvSwitchTimerLists+0xb4>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <prvSwitchTimerLists+0xb0>)
 8000ac8:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8000aca:	4b04      	ldr	r3, [pc, #16]	; (8000adc <prvSwitchTimerLists+0xb4>)
 8000acc:	68fa      	ldr	r2, [r7, #12]
 8000ace:	601a      	str	r2, [r3, #0]
}
 8000ad0:	3720      	adds	r7, #32
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000068 	.word	0x20000068
 8000adc:	2000006c 	.word	0x2000006c

08000ae0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8000ae4:	f001 fa14 	bl	8001f10 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8000ae8:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <prvCheckForValidListAndQueue+0x40>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d113      	bne.n	8000b18 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8000af0:	480c      	ldr	r0, [pc, #48]	; (8000b24 <prvCheckForValidListAndQueue+0x44>)
 8000af2:	f001 fa93 	bl	800201c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8000af6:	480c      	ldr	r0, [pc, #48]	; (8000b28 <prvCheckForValidListAndQueue+0x48>)
 8000af8:	f001 fa90 	bl	800201c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <prvCheckForValidListAndQueue+0x4c>)
 8000afe:	4a09      	ldr	r2, [pc, #36]	; (8000b24 <prvCheckForValidListAndQueue+0x44>)
 8000b00:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <prvCheckForValidListAndQueue+0x50>)
 8000b04:	4a08      	ldr	r2, [pc, #32]	; (8000b28 <prvCheckForValidListAndQueue+0x48>)
 8000b06:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 8000b08:	200a      	movs	r0, #10
 8000b0a:	210c      	movs	r1, #12
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f000 fde5 	bl	80016dc <xQueueGenericCreate>
 8000b12:	4602      	mov	r2, r0
 8000b14:	4b02      	ldr	r3, [pc, #8]	; (8000b20 <prvCheckForValidListAndQueue+0x40>)
 8000b16:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
 8000b18:	f001 fa0c 	bl	8001f34 <vPortExitCritical>
}
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000070 	.word	0x20000070
 8000b24:	20000040 	.word	0x20000040
 8000b28:	20000054 	.word	0x20000054
 8000b2c:	20000068 	.word	0x20000068
 8000b30:	2000006c 	.word	0x2000006c

08000b34 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af02      	add	r7, sp, #8
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	4613      	mov	r3, r2
 8000b42:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d104      	bne.n	8000b54 <xTaskGenericCreate+0x20>
 8000b4a:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000b4e:	f380 8811 	msr	BASEPRI, r0
 8000b52:	e7fe      	b.n	8000b52 <xTaskGenericCreate+0x1e>
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );
 8000b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	d904      	bls.n	8000b64 <xTaskGenericCreate+0x30>
 8000b5a:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000b5e:	f380 8811 	msr	BASEPRI, r0
 8000b62:	e7fe      	b.n	8000b62 <xTaskGenericCreate+0x2e>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8000b64:	88fb      	ldrh	r3, [r7, #6]
 8000b66:	4618      	mov	r0, r3
 8000b68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000b6a:	f000 fcaf 	bl	80014cc <prvAllocateTCBAndStack>
 8000b6e:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d07e      	beq.n	8000c74 <xTaskGenericCreate+0x140>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b80:	3b01      	subs	r3, #1
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	4413      	add	r3, r2
 8000b86:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	f023 0307 	bic.w	r3, r3, #7
 8000b8e:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d004      	beq.n	8000ba4 <xTaskGenericCreate+0x70>
 8000b9a:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000b9e:	f380 8811 	msr	BASEPRI, r0
 8000ba2:	e7fe      	b.n	8000ba2 <xTaskGenericCreate+0x6e>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8000ba4:	88fb      	ldrh	r3, [r7, #6]
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	69b8      	ldr	r0, [r7, #24]
 8000baa:	68b9      	ldr	r1, [r7, #8]
 8000bac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bb0:	f000 fba8 	bl	8001304 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000bb4:	6978      	ldr	r0, [r7, #20]
 8000bb6:	68f9      	ldr	r1, [r7, #12]
 8000bb8:	683a      	ldr	r2, [r7, #0]
 8000bba:	f001 f939 	bl	8001e30 <pxPortInitialiseStack>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
 8000bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d002      	beq.n	8000bd0 <xTaskGenericCreate+0x9c>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 8000bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bcc:	69ba      	ldr	r2, [r7, #24]
 8000bce:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
 8000bd0:	f001 f99e 	bl	8001f10 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8000bd4:	4b33      	ldr	r3, [pc, #204]	; (8000ca4 <xTaskGenericCreate+0x170>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	1c5a      	adds	r2, r3, #1
 8000bda:	4b32      	ldr	r3, [pc, #200]	; (8000ca4 <xTaskGenericCreate+0x170>)
 8000bdc:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 8000bde:	4b32      	ldr	r3, [pc, #200]	; (8000ca8 <xTaskGenericCreate+0x174>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d109      	bne.n	8000bfa <xTaskGenericCreate+0xc6>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8000be6:	4b30      	ldr	r3, [pc, #192]	; (8000ca8 <xTaskGenericCreate+0x174>)
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 8000bec:	4b2d      	ldr	r3, [pc, #180]	; (8000ca4 <xTaskGenericCreate+0x170>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d10f      	bne.n	8000c14 <xTaskGenericCreate+0xe0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8000bf4:	f000 fbbc 	bl	8001370 <prvInitialiseTaskLists>
 8000bf8:	e00c      	b.n	8000c14 <xTaskGenericCreate+0xe0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8000bfa:	4b2c      	ldr	r3, [pc, #176]	; (8000cac <xTaskGenericCreate+0x178>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d108      	bne.n	8000c14 <xTaskGenericCreate+0xe0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8000c02:	4b29      	ldr	r3, [pc, #164]	; (8000ca8 <xTaskGenericCreate+0x174>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d802      	bhi.n	8000c14 <xTaskGenericCreate+0xe0>
					{
						pxCurrentTCB = pxNewTCB;
 8000c0e:	4b26      	ldr	r3, [pc, #152]	; (8000ca8 <xTaskGenericCreate+0x174>)
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c18:	4b25      	ldr	r3, [pc, #148]	; (8000cb0 <xTaskGenericCreate+0x17c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d903      	bls.n	8000c28 <xTaskGenericCreate+0xf4>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c24:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <xTaskGenericCreate+0x17c>)
 8000c26:	601a      	str	r2, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTCBNumber;
 8000c28:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <xTaskGenericCreate+0x180>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif
			uxTCBNumber++;
 8000c30:	4b20      	ldr	r3, [pc, #128]	; (8000cb4 <xTaskGenericCreate+0x180>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	1c5a      	adds	r2, r3, #1
 8000c36:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <xTaskGenericCreate+0x180>)
 8000c38:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c3e:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <xTaskGenericCreate+0x184>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d903      	bls.n	8000c4e <xTaskGenericCreate+0x11a>
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c4a:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <xTaskGenericCreate+0x184>)
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c52:	4613      	mov	r3, r2
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	4413      	add	r3, r2
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	4a18      	ldr	r2, [pc, #96]	; (8000cbc <xTaskGenericCreate+0x188>)
 8000c5c:	441a      	add	r2, r3
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	3304      	adds	r3, #4
 8000c62:	4610      	mov	r0, r2
 8000c64:	4619      	mov	r1, r3
 8000c66:	f001 fa05 	bl	8002074 <vListInsertEnd>

			xReturn = pdPASS;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	61fb      	str	r3, [r7, #28]
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8000c6e:	f001 f961 	bl	8001f34 <vPortExitCritical>
 8000c72:	e002      	b.n	8000c7a <xTaskGenericCreate+0x146>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000c74:	f04f 33ff 	mov.w	r3, #4294967295
 8000c78:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d10b      	bne.n	8000c98 <xTaskGenericCreate+0x164>
	{
		if( xSchedulerRunning != pdFALSE )
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <xTaskGenericCreate+0x178>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d007      	beq.n	8000c98 <xTaskGenericCreate+0x164>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8000c88:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <xTaskGenericCreate+0x174>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d201      	bcs.n	8000c98 <xTaskGenericCreate+0x164>
			{
				portYIELD_WITHIN_API();
 8000c94:	f001 f930 	bl	8001ef8 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
 8000c98:	69fb      	ldr	r3, [r7, #28]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3720      	adds	r7, #32
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000150 	.word	0x20000150
 8000ca8:	20000078 	.word	0x20000078
 8000cac:	20000160 	.word	0x20000160
 8000cb0:	20000158 	.word	0x20000158
 8000cb4:	20000174 	.word	0x20000174
 8000cb8:	2000015c 	.word	0x2000015c
 8000cbc:	2000007c 	.word	0x2000007c

08000cc0 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	2300      	movs	r3, #0
 8000ccc:	9301      	str	r3, [sp, #4]
 8000cce:	2300      	movs	r3, #0
 8000cd0:	9302      	str	r3, [sp, #8]
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	9303      	str	r3, [sp, #12]
 8000cd6:	4813      	ldr	r0, [pc, #76]	; (8000d24 <vTaskStartScheduler+0x64>)
 8000cd8:	4913      	ldr	r1, [pc, #76]	; (8000d28 <vTaskStartScheduler+0x68>)
 8000cda:	2282      	movs	r2, #130	; 0x82
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f7ff ff29 	bl	8000b34 <xTaskGenericCreate>
 8000ce2:	6078      	str	r0, [r7, #4]
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d102      	bne.n	8000cf0 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
 8000cea:	f7ff fc9f 	bl	800062c <xTimerCreateTimerTask>
 8000cee:	6078      	str	r0, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d10b      	bne.n	8000d0e <vTaskStartScheduler+0x4e>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
 8000cf6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000cfa:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <vTaskStartScheduler+0x6c>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 8000d04:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <vTaskStartScheduler+0x70>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000d0a:	f001 f8d9 	bl	8001ec0 <xPortStartScheduler>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d104      	bne.n	8000d1e <vTaskStartScheduler+0x5e>
 8000d14:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000d18:	f380 8811 	msr	BASEPRI, r0
 8000d1c:	e7fe      	b.n	8000d1c <vTaskStartScheduler+0x5c>
}
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	080012e1 	.word	0x080012e1
 8000d28:	08002240 	.word	0x08002240
 8000d2c:	20000160 	.word	0x20000160
 8000d30:	20000154 	.word	0x20000154

08000d34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <vTaskSuspendAll+0x18>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	1c5a      	adds	r2, r3, #1
 8000d3e:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <vTaskSuspendAll+0x18>)
 8000d40:	601a      	str	r2, [r3, #0]
}
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000164 	.word	0x20000164

08000d50 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8000d5a:	4b37      	ldr	r3, [pc, #220]	; (8000e38 <xTaskResumeAll+0xe8>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d104      	bne.n	8000d6c <xTaskResumeAll+0x1c>
 8000d62:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000d66:	f380 8811 	msr	BASEPRI, r0
 8000d6a:	e7fe      	b.n	8000d6a <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000d6c:	f001 f8d0 	bl	8001f10 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000d70:	4b31      	ldr	r3, [pc, #196]	; (8000e38 <xTaskResumeAll+0xe8>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	1e5a      	subs	r2, r3, #1
 8000d76:	4b30      	ldr	r3, [pc, #192]	; (8000e38 <xTaskResumeAll+0xe8>)
 8000d78:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8000d7a:	4b2f      	ldr	r3, [pc, #188]	; (8000e38 <xTaskResumeAll+0xe8>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d152      	bne.n	8000e28 <xTaskResumeAll+0xd8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 8000d82:	4b2e      	ldr	r3, [pc, #184]	; (8000e3c <xTaskResumeAll+0xec>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d04e      	beq.n	8000e28 <xTaskResumeAll+0xd8>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8000d8e:	e027      	b.n	8000de0 <xTaskResumeAll+0x90>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 8000d90:	4b2b      	ldr	r3, [pc, #172]	; (8000e40 <xTaskResumeAll+0xf0>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
 8000d96:	f104 0318 	add.w	r3, r4, #24
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f001 f9ca 	bl	8002134 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
 8000da0:	1d23      	adds	r3, r4, #4
 8000da2:	4618      	mov	r0, r3
 8000da4:	f001 f9c6 	bl	8002134 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 8000da8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000daa:	4b26      	ldr	r3, [pc, #152]	; (8000e44 <xTaskResumeAll+0xf4>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d902      	bls.n	8000db8 <xTaskResumeAll+0x68>
 8000db2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000db4:	4b23      	ldr	r3, [pc, #140]	; (8000e44 <xTaskResumeAll+0xf4>)
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000dba:	4613      	mov	r3, r2
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	4413      	add	r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4a21      	ldr	r2, [pc, #132]	; (8000e48 <xTaskResumeAll+0xf8>)
 8000dc4:	441a      	add	r2, r3
 8000dc6:	1d23      	adds	r3, r4, #4
 8000dc8:	4610      	mov	r0, r2
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f001 f952 	bl	8002074 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000dd0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000dd2:	4b1e      	ldr	r3, [pc, #120]	; (8000e4c <xTaskResumeAll+0xfc>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d301      	bcc.n	8000de0 <xTaskResumeAll+0x90>
					{
						xYieldRequired = pdTRUE;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8000de0:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <xTaskResumeAll+0xf0>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d1d3      	bne.n	8000d90 <xTaskResumeAll+0x40>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8000de8:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <xTaskResumeAll+0x100>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d00d      	beq.n	8000e0c <xTaskResumeAll+0xbc>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8000df0:	e006      	b.n	8000e00 <xTaskResumeAll+0xb0>
					{
						vTaskIncrementTick();
 8000df2:	f000 f843 	bl	8000e7c <vTaskIncrementTick>
						--uxMissedTicks;
 8000df6:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <xTaskResumeAll+0x100>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	1e5a      	subs	r2, r3, #1
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <xTaskResumeAll+0x100>)
 8000dfe:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <xTaskResumeAll+0x100>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d1f4      	bne.n	8000df2 <xTaskResumeAll+0xa2>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d003      	beq.n	8000e1a <xTaskResumeAll+0xca>
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <xTaskResumeAll+0x104>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d106      	bne.n	8000e28 <xTaskResumeAll+0xd8>
				{
					xAlreadyYielded = pdTRUE;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <xTaskResumeAll+0x104>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
 8000e24:	f001 f868 	bl	8001ef8 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 8000e28:	f001 f884 	bl	8001f34 <vPortExitCritical>

	return xAlreadyYielded;
 8000e2c:	687b      	ldr	r3, [r7, #4]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd90      	pop	{r4, r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000164 	.word	0x20000164
 8000e3c:	20000150 	.word	0x20000150
 8000e40:	20000110 	.word	0x20000110
 8000e44:	2000015c 	.word	0x2000015c
 8000e48:	2000007c 	.word	0x2000007c
 8000e4c:	20000078 	.word	0x20000078
 8000e50:	20000168 	.word	0x20000168
 8000e54:	2000016c 	.word	0x2000016c

08000e58 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 8000e5e:	f001 f857 	bl	8001f10 <vPortEnterCritical>
	{
		xTicks = xTickCount;
 8000e62:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <xTaskGetTickCount+0x20>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 8000e68:	f001 f864 	bl	8001f34 <vPortExitCritical>

	return xTicks;
 8000e6c:	687b      	ldr	r3, [r7, #4]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000154 	.word	0x20000154

08000e7c <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8000e82:	4b49      	ldr	r3, [pc, #292]	; (8000fa8 <vTaskIncrementTick+0x12c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d17d      	bne.n	8000f86 <vTaskIncrementTick+0x10a>
	{
		++xTickCount;
 8000e8a:	4b48      	ldr	r3, [pc, #288]	; (8000fac <vTaskIncrementTick+0x130>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	4b46      	ldr	r3, [pc, #280]	; (8000fac <vTaskIncrementTick+0x130>)
 8000e92:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
 8000e94:	4b45      	ldr	r3, [pc, #276]	; (8000fac <vTaskIncrementTick+0x130>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d12b      	bne.n	8000ef4 <vTaskIncrementTick+0x78>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
 8000e9c:	4b44      	ldr	r3, [pc, #272]	; (8000fb0 <vTaskIncrementTick+0x134>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d004      	beq.n	8000eb0 <vTaskIncrementTick+0x34>
 8000ea6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000eaa:	f380 8811 	msr	BASEPRI, r0
 8000eae:	e7fe      	b.n	8000eae <vTaskIncrementTick+0x32>
			
			pxTemp = pxDelayedTaskList;
 8000eb0:	4b3f      	ldr	r3, [pc, #252]	; (8000fb0 <vTaskIncrementTick+0x134>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 8000eb6:	4b3f      	ldr	r3, [pc, #252]	; (8000fb4 <vTaskIncrementTick+0x138>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	4b3d      	ldr	r3, [pc, #244]	; (8000fb0 <vTaskIncrementTick+0x134>)
 8000ebc:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
 8000ebe:	4b3d      	ldr	r3, [pc, #244]	; (8000fb4 <vTaskIncrementTick+0x138>)
 8000ec0:	68fa      	ldr	r2, [r7, #12]
 8000ec2:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
 8000ec4:	4b3c      	ldr	r3, [pc, #240]	; (8000fb8 <vTaskIncrementTick+0x13c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	1c5a      	adds	r2, r3, #1
 8000eca:	4b3b      	ldr	r3, [pc, #236]	; (8000fb8 <vTaskIncrementTick+0x13c>)
 8000ecc:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000ece:	4b38      	ldr	r3, [pc, #224]	; (8000fb0 <vTaskIncrementTick+0x134>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d104      	bne.n	8000ee2 <vTaskIncrementTick+0x66>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
 8000ed8:	4b38      	ldr	r3, [pc, #224]	; (8000fbc <vTaskIncrementTick+0x140>)
 8000eda:	f04f 32ff 	mov.w	r2, #4294967295
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	e008      	b.n	8000ef4 <vTaskIncrementTick+0x78>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000ee2:	4b33      	ldr	r3, [pc, #204]	; (8000fb0 <vTaskIncrementTick+0x134>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	4b32      	ldr	r3, [pc, #200]	; (8000fbc <vTaskIncrementTick+0x140>)
 8000ef2:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
 8000ef4:	4b2d      	ldr	r3, [pc, #180]	; (8000fac <vTaskIncrementTick+0x130>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b30      	ldr	r3, [pc, #192]	; (8000fbc <vTaskIncrementTick+0x140>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d341      	bcc.n	8000f84 <vTaskIncrementTick+0x108>
 8000f00:	4b2b      	ldr	r3, [pc, #172]	; (8000fb0 <vTaskIncrementTick+0x134>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d104      	bne.n	8000f14 <vTaskIncrementTick+0x98>
 8000f0a:	4b2c      	ldr	r3, [pc, #176]	; (8000fbc <vTaskIncrementTick+0x140>)
 8000f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	e037      	b.n	8000f84 <vTaskIncrementTick+0x108>
 8000f14:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <vTaskIncrementTick+0x134>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	4b21      	ldr	r3, [pc, #132]	; (8000fac <vTaskIncrementTick+0x130>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d203      	bcs.n	8000f36 <vTaskIncrementTick+0xba>
 8000f2e:	4b23      	ldr	r3, [pc, #140]	; (8000fbc <vTaskIncrementTick+0x140>)
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	e026      	b.n	8000f84 <vTaskIncrementTick+0x108>
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f001 f8fa 	bl	8002134 <vListRemove>
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d004      	beq.n	8000f52 <vTaskIncrementTick+0xd6>
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	3318      	adds	r3, #24
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f001 f8f1 	bl	8002134 <vListRemove>
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f56:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <vTaskIncrementTick+0x144>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d903      	bls.n	8000f66 <vTaskIncrementTick+0xea>
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <vTaskIncrementTick+0x144>)
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4a14      	ldr	r2, [pc, #80]	; (8000fc4 <vTaskIncrementTick+0x148>)
 8000f74:	441a      	add	r2, r3
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f001 f879 	bl	8002074 <vListInsertEnd>
 8000f82:	e7bd      	b.n	8000f00 <vTaskIncrementTick+0x84>
 8000f84:	e006      	b.n	8000f94 <vTaskIncrementTick+0x118>
	}
	else
	{
		++uxMissedTicks;
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <vTaskIncrementTick+0x14c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <vTaskIncrementTick+0x14c>)
 8000f8e:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8000f90:	f7ff fa26 	bl	80003e0 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <vTaskIncrementTick+0x14c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d101      	bne.n	8000fa0 <vTaskIncrementTick+0x124>
		{
			vApplicationTickHook();
 8000f9c:	f7ff fa20 	bl	80003e0 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000164 	.word	0x20000164
 8000fac:	20000154 	.word	0x20000154
 8000fb0:	20000108 	.word	0x20000108
 8000fb4:	2000010c 	.word	0x2000010c
 8000fb8:	20000170 	.word	0x20000170
 8000fbc:	20000004 	.word	0x20000004
 8000fc0:	2000015c 	.word	0x2000015c
 8000fc4:	2000007c 	.word	0x2000007c
 8000fc8:	20000168 	.word	0x20000168

08000fcc <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 8000fd2:	4b22      	ldr	r3, [pc, #136]	; (800105c <vTaskSwitchContext+0x90>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 8000fda:	4b21      	ldr	r3, [pc, #132]	; (8001060 <vTaskSwitchContext+0x94>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	e037      	b.n	8001052 <vTaskSwitchContext+0x86>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 8000fe2:	e00d      	b.n	8001000 <vTaskSwitchContext+0x34>
		{
			configASSERT( uxTopReadyPriority );
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <vTaskSwitchContext+0x98>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d104      	bne.n	8000ff6 <vTaskSwitchContext+0x2a>
 8000fec:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000ff0:	f380 8811 	msr	BASEPRI, r0
 8000ff4:	e7fe      	b.n	8000ff4 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
 8000ff6:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <vTaskSwitchContext+0x98>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	1e5a      	subs	r2, r3, #1
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <vTaskSwitchContext+0x98>)
 8000ffe:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 8001000:	4b18      	ldr	r3, [pc, #96]	; (8001064 <vTaskSwitchContext+0x98>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4918      	ldr	r1, [pc, #96]	; (8001068 <vTaskSwitchContext+0x9c>)
 8001006:	4613      	mov	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4413      	add	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	440b      	add	r3, r1
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d0e6      	beq.n	8000fe4 <vTaskSwitchContext+0x18>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <vTaskSwitchContext+0x98>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4613      	mov	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4a11      	ldr	r2, [pc, #68]	; (8001068 <vTaskSwitchContext+0x9c>)
 8001024:	4413      	add	r3, r2
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3308      	adds	r3, #8
 800103a:	429a      	cmp	r2, r3
 800103c:	d104      	bne.n	8001048 <vTaskSwitchContext+0x7c>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	685a      	ldr	r2, [r3, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	68da      	ldr	r2, [r3, #12]
 800104e:	4b07      	ldr	r3, [pc, #28]	; (800106c <vTaskSwitchContext+0xa0>)
 8001050:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
	}
}
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	20000164 	.word	0x20000164
 8001060:	2000016c 	.word	0x2000016c
 8001064:	2000015c 	.word	0x2000015c
 8001068:	2000007c 	.word	0x2000007c
 800106c:	20000078 	.word	0x20000078

08001070 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d104      	bne.n	800108a <vTaskPlaceOnEventList+0x1a>
 8001080:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001084:	f380 8811 	msr	BASEPRI, r0
 8001088:	e7fe      	b.n	8001088 <vTaskPlaceOnEventList+0x18>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <vTaskPlaceOnEventList+0x64>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	3318      	adds	r3, #24
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	4619      	mov	r1, r3
 8001094:	f001 f816 	bl	80020c4 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <vTaskPlaceOnEventList+0x64>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	3304      	adds	r3, #4
 800109e:	4618      	mov	r0, r3
 80010a0:	f001 f848 	bl	8002134 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010aa:	d107      	bne.n	80010bc <vTaskPlaceOnEventList+0x4c>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 80010ac:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <vTaskPlaceOnEventList+0x64>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	3304      	adds	r3, #4
 80010b2:	4809      	ldr	r0, [pc, #36]	; (80010d8 <vTaskPlaceOnEventList+0x68>)
 80010b4:	4619      	mov	r1, r3
 80010b6:	f000 ffdd 	bl	8002074 <vListInsertEnd>
 80010ba:	e007      	b.n	80010cc <vTaskPlaceOnEventList+0x5c>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <vTaskPlaceOnEventList+0x6c>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 80010c6:	68f8      	ldr	r0, [r7, #12]
 80010c8:	f000 f9ca 	bl	8001460 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000078 	.word	0x20000078
 80010d8:	2000013c 	.word	0x2000013c
 80010dc:	20000154 	.word	0x20000154

080010e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d104      	bne.n	80010fa <vTaskPlaceOnEventListRestricted+0x1a>
 80010f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80010f4:	f380 8811 	msr	BASEPRI, r0
 80010f8:	e7fe      	b.n	80010f8 <vTaskPlaceOnEventListRestricted+0x18>
	
		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <vTaskPlaceOnEventListRestricted+0x4c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	3318      	adds	r3, #24
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	4619      	mov	r1, r3
 8001104:	f000 ffb6 	bl	8002074 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <vTaskPlaceOnEventListRestricted+0x4c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	3304      	adds	r3, #4
 800110e:	4618      	mov	r0, r3
 8001110:	f001 f810 	bl	8002134 <vListRemove>

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <vTaskPlaceOnEventListRestricted+0x50>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	4413      	add	r3, r2
 800111c:	60fb      	str	r3, [r7, #12]
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	f000 f99e 	bl	8001460 <prvAddCurrentTaskToDelayedList>
	}
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000078 	.word	0x20000078
 8001130:	20000154 	.word	0x20000154

08001134 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d104      	bne.n	8001154 <xTaskRemoveFromEventList+0x20>
 800114a:	f04f 0050 	mov.w	r0, #80	; 0x50
 800114e:	f380 8811 	msr	BASEPRI, r0
 8001152:	e7fe      	b.n	8001152 <xTaskRemoveFromEventList+0x1e>
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	3318      	adds	r3, #24
 8001158:	4618      	mov	r0, r3
 800115a:	f000 ffeb 	bl	8002134 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <xTaskRemoveFromEventList+0x9c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d11d      	bne.n	80011a2 <xTaskRemoveFromEventList+0x6e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	3304      	adds	r3, #4
 800116a:	4618      	mov	r0, r3
 800116c:	f000 ffe2 	bl	8002134 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001174:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <xTaskRemoveFromEventList+0xa0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	429a      	cmp	r2, r3
 800117a:	d903      	bls.n	8001184 <xTaskRemoveFromEventList+0x50>
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001180:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <xTaskRemoveFromEventList+0xa0>)
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001188:	4613      	mov	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	4a11      	ldr	r2, [pc, #68]	; (80011d8 <xTaskRemoveFromEventList+0xa4>)
 8001192:	441a      	add	r2, r3
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	3304      	adds	r3, #4
 8001198:	4610      	mov	r0, r2
 800119a:	4619      	mov	r1, r3
 800119c:	f000 ff6a 	bl	8002074 <vListInsertEnd>
 80011a0:	e005      	b.n	80011ae <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	3318      	adds	r3, #24
 80011a6:	480d      	ldr	r0, [pc, #52]	; (80011dc <xTaskRemoveFromEventList+0xa8>)
 80011a8:	4619      	mov	r1, r3
 80011aa:	f000 ff63 	bl	8002074 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <xTaskRemoveFromEventList+0xac>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d302      	bcc.n	80011c2 <xTaskRemoveFromEventList+0x8e>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 80011bc:	2301      	movs	r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	e001      	b.n	80011c6 <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		xReturn = pdFALSE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80011c6:	68fb      	ldr	r3, [r7, #12]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000164 	.word	0x20000164
 80011d4:	2000015c 	.word	0x2000015c
 80011d8:	2000007c 	.word	0x2000007c
 80011dc:	20000110 	.word	0x20000110
 80011e0:	20000078 	.word	0x20000078

080011e4 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d104      	bne.n	80011fc <vTaskSetTimeOutState+0x18>
 80011f2:	f04f 0050 	mov.w	r0, #80	; 0x50
 80011f6:	f380 8811 	msr	BASEPRI, r0
 80011fa:	e7fe      	b.n	80011fa <vTaskSetTimeOutState+0x16>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <vTaskSetTimeOutState+0x34>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <vTaskSetTimeOutState+0x38>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	605a      	str	r2, [r3, #4]
}
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000170 	.word	0x20000170
 800121c:	20000154 	.word	0x20000154

08001220 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d104      	bne.n	800123a <xTaskCheckForTimeOut+0x1a>
 8001230:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001234:	f380 8811 	msr	BASEPRI, r0
 8001238:	e7fe      	b.n	8001238 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d104      	bne.n	800124a <xTaskCheckForTimeOut+0x2a>
 8001240:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001244:	f380 8811 	msr	BASEPRI, r0
 8001248:	e7fe      	b.n	8001248 <xTaskCheckForTimeOut+0x28>

	taskENTER_CRITICAL();
 800124a:	f000 fe61 	bl	8001f10 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001256:	d102      	bne.n	800125e <xTaskCheckForTimeOut+0x3e>
			{
				xReturn = pdFALSE;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	e029      	b.n	80012b2 <xTaskCheckForTimeOut+0x92>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <xTaskCheckForTimeOut+0xa0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	429a      	cmp	r2, r3
 8001268:	d008      	beq.n	800127c <xTaskCheckForTimeOut+0x5c>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <xTaskCheckForTimeOut+0xa4>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	429a      	cmp	r2, r3
 8001274:	d802      	bhi.n	800127c <xTaskCheckForTimeOut+0x5c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8001276:	2301      	movs	r3, #1
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	e01a      	b.n	80012b2 <xTaskCheckForTimeOut+0x92>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
 800127c:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <xTaskCheckForTimeOut+0xa4>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	1ad2      	subs	r2, r2, r3
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	d20f      	bcs.n	80012ae <xTaskCheckForTimeOut+0x8e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6859      	ldr	r1, [r3, #4]
 8001296:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <xTaskCheckForTimeOut+0xa4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	1acb      	subs	r3, r1, r3
 800129c:	441a      	add	r2, r3
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ff9e 	bl	80011e4 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	e001      	b.n	80012b2 <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
 80012ae:	2301      	movs	r3, #1
 80012b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80012b2:	f000 fe3f 	bl	8001f34 <vPortExitCritical>

	return xReturn;
 80012b6:	68fb      	ldr	r3, [r7, #12]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000170 	.word	0x20000170
 80012c4:	20000154 	.word	0x20000154

080012c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
 80012cc:	4b03      	ldr	r3, [pc, #12]	; (80012dc <vTaskMissedYield+0x14>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	601a      	str	r2, [r3, #0]
}
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	2000016c 	.word	0x2000016c

080012e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 80012e8:	f000 f880 	bl	80013ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <prvIdleTask+0x20>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d901      	bls.n	80012f8 <prvIdleTask+0x18>
			{
				taskYIELD();
 80012f4:	f000 fe00 	bl	8001ef8 <vPortYieldFromISR>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80012f8:	f7ff f884 	bl	8000404 <vApplicationIdleHook>
		}
		#endif
	}
 80012fc:	e7f4      	b.n	80012e8 <prvIdleTask+0x8>
 80012fe:	bf00      	nop
 8001300:	2000007c 	.word	0x2000007c

08001304 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
 8001310:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	3334      	adds	r3, #52	; 0x34
 8001316:	4618      	mov	r0, r3
 8001318:	68b9      	ldr	r1, [r7, #8]
 800131a:	220a      	movs	r2, #10
 800131c:	f000 ff79 	bl	8002212 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2200      	movs	r2, #0
 8001324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b04      	cmp	r3, #4
 800132c:	d901      	bls.n	8001332 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 800132e:	2304      	movs	r3, #4
 8001330:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	3304      	adds	r3, #4
 8001342:	4618      	mov	r0, r3
 8001344:	f000 fe8a 	bl	800205c <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	3318      	adds	r3, #24
 800134c:	4618      	mov	r0, r3
 800134e:	f000 fe85 	bl	800205c <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f1c3 0205 	rsb	r2, r3, #5
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop

08001370 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	e00c      	b.n	8001396 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4a11      	ldr	r2, [pc, #68]	; (80013cc <prvInitialiseTaskLists+0x5c>)
 8001388:	4413      	add	r3, r2
 800138a:	4618      	mov	r0, r3
 800138c:	f000 fe46 	bl	800201c <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3301      	adds	r3, #1
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b04      	cmp	r3, #4
 800139a:	d9ef      	bls.n	800137c <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 800139c:	480c      	ldr	r0, [pc, #48]	; (80013d0 <prvInitialiseTaskLists+0x60>)
 800139e:	f000 fe3d 	bl	800201c <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 80013a2:	480c      	ldr	r0, [pc, #48]	; (80013d4 <prvInitialiseTaskLists+0x64>)
 80013a4:	f000 fe3a 	bl	800201c <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
 80013a8:	480b      	ldr	r0, [pc, #44]	; (80013d8 <prvInitialiseTaskLists+0x68>)
 80013aa:	f000 fe37 	bl	800201c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 80013ae:	480b      	ldr	r0, [pc, #44]	; (80013dc <prvInitialiseTaskLists+0x6c>)
 80013b0:	f000 fe34 	bl	800201c <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
 80013b4:	480a      	ldr	r0, [pc, #40]	; (80013e0 <prvInitialiseTaskLists+0x70>)
 80013b6:	f000 fe31 	bl	800201c <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <prvInitialiseTaskLists+0x74>)
 80013bc:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <prvInitialiseTaskLists+0x60>)
 80013be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <prvInitialiseTaskLists+0x78>)
 80013c2:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <prvInitialiseTaskLists+0x64>)
 80013c4:	601a      	str	r2, [r3, #0]
}
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	2000007c 	.word	0x2000007c
 80013d0:	200000e0 	.word	0x200000e0
 80013d4:	200000f4 	.word	0x200000f4
 80013d8:	20000110 	.word	0x20000110
 80013dc:	20000124 	.word	0x20000124
 80013e0:	2000013c 	.word	0x2000013c
 80013e4:	20000108 	.word	0x20000108
 80013e8:	2000010c 	.word	0x2000010c

080013ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 80013f2:	4b18      	ldr	r3, [pc, #96]	; (8001454 <prvCheckTasksWaitingTermination+0x68>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d028      	beq.n	800144c <prvCheckTasksWaitingTermination+0x60>
		{
			vTaskSuspendAll();
 80013fa:	f7ff fc9b 	bl	8000d34 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80013fe:	4b16      	ldr	r3, [pc, #88]	; (8001458 <prvCheckTasksWaitingTermination+0x6c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	bf14      	ite	ne
 8001406:	2300      	movne	r3, #0
 8001408:	2301      	moveq	r3, #1
 800140a:	b2db      	uxtb	r3, r3
 800140c:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
 800140e:	f7ff fc9f 	bl	8000d50 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d119      	bne.n	800144c <prvCheckTasksWaitingTermination+0x60>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 8001418:	f000 fd7a 	bl	8001f10 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <prvCheckTasksWaitingTermination+0x6c>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	3304      	adds	r3, #4
 8001428:	4618      	mov	r0, r3
 800142a:	f000 fe83 	bl	8002134 <vListRemove>
					--uxCurrentNumberOfTasks;
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <prvCheckTasksWaitingTermination+0x70>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	1e5a      	subs	r2, r3, #1
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <prvCheckTasksWaitingTermination+0x70>)
 8001436:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <prvCheckTasksWaitingTermination+0x68>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	1e5a      	subs	r2, r3, #1
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <prvCheckTasksWaitingTermination+0x68>)
 8001440:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 8001442:	f000 fd77 	bl	8001f34 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8001446:	6838      	ldr	r0, [r7, #0]
 8001448:	f000 f872 	bl	8001530 <prvDeleteTCB>
			}
		}
	}
	#endif
}
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000138 	.word	0x20000138
 8001458:	20000124 	.word	0x20000124
 800145c:	20000150 	.word	0x20000150

08001460 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <prvAddCurrentTaskToDelayedList+0x58>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <prvAddCurrentTaskToDelayedList+0x5c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	429a      	cmp	r2, r3
 8001478:	d209      	bcs.n	800148e <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <prvAddCurrentTaskToDelayedList+0x60>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <prvAddCurrentTaskToDelayedList+0x58>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	3304      	adds	r3, #4
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	f000 fe1c 	bl	80020c4 <vListInsert>
 800148c:	e010      	b.n	80014b0 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 800148e:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <prvAddCurrentTaskToDelayedList+0x64>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <prvAddCurrentTaskToDelayedList+0x58>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	3304      	adds	r3, #4
 8001498:	4610      	mov	r0, r2
 800149a:	4619      	mov	r1, r3
 800149c:	f000 fe12 	bl	80020c4 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <prvAddCurrentTaskToDelayedList+0x68>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d202      	bcs.n	80014b0 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <prvAddCurrentTaskToDelayedList+0x68>)
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	601a      	str	r2, [r3, #0]
		}
	}
}
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000078 	.word	0x20000078
 80014bc:	20000154 	.word	0x20000154
 80014c0:	2000010c 	.word	0x2000010c
 80014c4:	20000108 	.word	0x20000108
 80014c8:	20000004 	.word	0x20000004

080014cc <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 80014d8:	204c      	movs	r0, #76	; 0x4c
 80014da:	f000 fc63 	bl	8001da4 <pvPortMalloc>
 80014de:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d01f      	beq.n	8001526 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d106      	bne.n	80014fa <prvAllocateTCBAndStack+0x2e>
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 fc57 	bl	8001da4 <pvPortMalloc>
 80014f6:	4603      	mov	r3, r0
 80014f8:	e000      	b.n	80014fc <prvAllocateTCBAndStack+0x30>
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001504:	2b00      	cmp	r3, #0
 8001506:	d105      	bne.n	8001514 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f000 fc87 	bl	8001e1c <vPortFree>
			pxNewTCB = NULL;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	e008      	b.n	8001526 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001518:	88fb      	ldrh	r3, [r7, #6]
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4610      	mov	r0, r2
 800151e:	21a5      	movs	r1, #165	; 0xa5
 8001520:	461a      	mov	r2, r3
 8001522:	f000 fe6e 	bl	8002202 <memset>
		}
	}

	return pxNewTCB;
 8001526:	68fb      	ldr	r3, [r7, #12]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
		above the vPortFree() calls. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153c:	4618      	mov	r0, r3
 800153e:	f000 fc6d 	bl	8001e1c <vPortFree>
		vPortFree( pxTCB );
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 fc6a 	bl	8001e1c <vPortFree>
	}
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop

08001550 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8001556:	4b05      	ldr	r3, [pc, #20]	; (800156c <xTaskGetCurrentTaskHandle+0x1c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800155c:	687b      	ldr	r3, [r7, #4]
	}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20000078 	.word	0x20000078

08001570 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <xTaskGetSchedulerState+0x34>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d102      	bne.n	8001584 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	e008      	b.n	8001596 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <xTaskGetSchedulerState+0x38>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800158c:	2301      	movs	r3, #1
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	e001      	b.n	8001596 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001592:	2302      	movs	r3, #2
 8001594:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001596:	687b      	ldr	r3, [r7, #4]
	}
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	20000160 	.word	0x20000160
 80015a8:	20000164 	.word	0x20000164

080015ac <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d104      	bne.n	80015c8 <vTaskPriorityInherit+0x1c>
 80015be:	f04f 0050 	mov.w	r0, #80	; 0x50
 80015c2:	f380 8811 	msr	BASEPRI, r0
 80015c6:	e7fe      	b.n	80015c6 <vTaskPriorityInherit+0x1a>

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015cc:	4b21      	ldr	r3, [pc, #132]	; (8001654 <vTaskPriorityInherit+0xa8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d23a      	bcs.n	800164c <vTaskPriorityInherit+0xa0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
 80015d6:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <vTaskPriorityInherit+0xa8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015dc:	f1c3 0205 	rsb	r2, r3, #5
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6959      	ldr	r1, [r3, #20]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4a18      	ldr	r2, [pc, #96]	; (8001658 <vTaskPriorityInherit+0xac>)
 80015f6:	4413      	add	r3, r2
 80015f8:	4299      	cmp	r1, r3
 80015fa:	d122      	bne.n	8001642 <vTaskPriorityInherit+0x96>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	3304      	adds	r3, #4
 8001600:	4618      	mov	r0, r3
 8001602:	f000 fd97 	bl	8002134 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001606:	4b13      	ldr	r3, [pc, #76]	; (8001654 <vTaskPriorityInherit+0xa8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <vTaskPriorityInherit+0xb0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	429a      	cmp	r2, r3
 800161a:	d903      	bls.n	8001624 <vTaskPriorityInherit+0x78>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001620:	4b0e      	ldr	r3, [pc, #56]	; (800165c <vTaskPriorityInherit+0xb0>)
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001628:	4613      	mov	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4a09      	ldr	r2, [pc, #36]	; (8001658 <vTaskPriorityInherit+0xac>)
 8001632:	441a      	add	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	3304      	adds	r3, #4
 8001638:	4610      	mov	r0, r2
 800163a:	4619      	mov	r1, r3
 800163c:	f000 fd1a 	bl	8002074 <vListInsertEnd>
 8001640:	e004      	b.n	800164c <vTaskPriorityInherit+0xa0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001642:	4b04      	ldr	r3, [pc, #16]	; (8001654 <vTaskPriorityInherit+0xa8>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000078 	.word	0x20000078
 8001658:	2000007c 	.word	0x2000007c
 800165c:	2000015c 	.word	0x2000015c

08001660 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d02c      	beq.n	80016cc <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800167a:	429a      	cmp	r2, r3
 800167c:	d026      	beq.n	80016cc <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	3304      	adds	r3, #4
 8001682:	4618      	mov	r0, r3
 8001684:	f000 fd56 	bl	8002134 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001694:	f1c3 0205 	rsb	r2, r3, #5
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <vTaskPriorityDisinherit+0x74>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d903      	bls.n	80016b0 <vTaskPriorityDisinherit+0x50>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ac:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <vTaskPriorityDisinherit+0x74>)
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4a06      	ldr	r2, [pc, #24]	; (80016d8 <vTaskPriorityDisinherit+0x78>)
 80016be:	441a      	add	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	3304      	adds	r3, #4
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	f000 fcd4 	bl	8002074 <vListInsertEnd>
			}
		}
	}
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	2000015c 	.word	0x2000015c
 80016d8:	2000007c 	.word	0x2000007c

080016dc <xQueueGenericCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	4613      	mov	r3, r2
 80016e8:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should 
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d052      	beq.n	800179a <xQueueGenericCreate+0xbe>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 80016f4:	2050      	movs	r0, #80	; 0x50
 80016f6:	f000 fb55 	bl	8001da4 <pvPortMalloc>
 80016fa:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d04b      	beq.n	800179a <xQueueGenericCreate+0xbe>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	68ba      	ldr	r2, [r7, #8]
 8001706:	fb02 f303 	mul.w	r3, r2, r3
 800170a:	3301      	adds	r3, #1
 800170c:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 800170e:	6978      	ldr	r0, [r7, #20]
 8001710:	f000 fb48 	bl	8001da4 <pvPortMalloc>
 8001714:	4602      	mov	r2, r0
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d038      	beq.n	8001794 <xQueueGenericCreate+0xb8>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	fb01 f303 	mul.w	r3, r1, r3
 800172e:	441a      	add	r2, r3
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	605a      	str	r2, [r3, #4]
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	2200      	movs	r2, #0
 8001738:	639a      	str	r2, [r3, #56]	; 0x38
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	609a      	str	r2, [r3, #8]
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	3b01      	subs	r3, #1
 800174a:	68b9      	ldr	r1, [r7, #8]
 800174c:	fb01 f303 	mul.w	r3, r1, r3
 8001750:	441a      	add	r2, r3
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	60da      	str	r2, [r3, #12]
				pxNewQueue->uxLength = uxQueueLength;
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	641a      	str	r2, [r3, #64]	; 0x40
				pxNewQueue->xRxLock = queueUNLOCKED;
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	f04f 32ff 	mov.w	r2, #4294967295
 8001768:	645a      	str	r2, [r3, #68]	; 0x44
				pxNewQueue->xTxLock = queueUNLOCKED;
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	f04f 32ff 	mov.w	r2, #4294967295
 8001770:	649a      	str	r2, [r3, #72]	; 0x48
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	79fa      	ldrb	r2, [r7, #7]
 8001776:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				}
				#endif /* configUSE_TRACE_FACILITY */

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	3310      	adds	r3, #16
 800177e:	4618      	mov	r0, r3
 8001780:	f000 fc4c 	bl	800201c <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	3324      	adds	r3, #36	; 0x24
 8001788:	4618      	mov	r0, r3
 800178a:	f000 fc47 	bl	800201c <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	61fb      	str	r3, [r7, #28]
 8001792:	e002      	b.n	800179a <xQueueGenericCreate+0xbe>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 8001794:	69b8      	ldr	r0, [r7, #24]
 8001796:	f000 fb41 	bl	8001e1c <vPortFree>
			}
		}
	}

	configASSERT( xReturn );
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d104      	bne.n	80017aa <xQueueGenericCreate+0xce>
 80017a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80017a4:	f380 8811 	msr	BASEPRI, r0
 80017a8:	e7fe      	b.n	80017a8 <xQueueGenericCreate+0xcc>

	return xReturn;
 80017aa:	69fb      	ldr	r3, [r7, #28]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3720      	adds	r7, #32
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
 80017c0:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d104      	bne.n	80017d6 <xQueueGenericSend+0x22>
 80017cc:	f04f 0050 	mov.w	r0, #80	; 0x50
 80017d0:	f380 8811 	msr	BASEPRI, r0
 80017d4:	e7fe      	b.n	80017d4 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d103      	bne.n	80017e4 <xQueueGenericSend+0x30>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <xQueueGenericSend+0x34>
 80017e4:	2301      	movs	r3, #1
 80017e6:	e000      	b.n	80017ea <xQueueGenericSend+0x36>
 80017e8:	2300      	movs	r3, #0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d104      	bne.n	80017f8 <xQueueGenericSend+0x44>
 80017ee:	f04f 0050 	mov.w	r0, #80	; 0x50
 80017f2:	f380 8811 	msr	BASEPRI, r0
 80017f6:	e7fe      	b.n	80017f6 <xQueueGenericSend+0x42>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80017f8:	f000 fb8a 	bl	8001f10 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001804:	429a      	cmp	r2, r3
 8001806:	d216      	bcs.n	8001836 <xQueueGenericSend+0x82>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001808:	68f8      	ldr	r0, [r7, #12]
 800180a:	68b9      	ldr	r1, [r7, #8]
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	f000 f9a3 	bl	8001b58 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001816:	2b00      	cmp	r3, #0
 8001818:	d009      	beq.n	800182e <xQueueGenericSend+0x7a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	3324      	adds	r3, #36	; 0x24
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fc88 	bl	8001134 <xTaskRemoveFromEventList>
 8001824:	4603      	mov	r3, r0
 8001826:	2b01      	cmp	r3, #1
 8001828:	d101      	bne.n	800182e <xQueueGenericSend+0x7a>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
 800182a:	f000 fb65 	bl	8001ef8 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
 800182e:	f000 fb81 	bl	8001f34 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 8001832:	2301      	movs	r3, #1
 8001834:	e059      	b.n	80018ea <xQueueGenericSend+0x136>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d103      	bne.n	8001844 <xQueueGenericSend+0x90>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800183c:	f000 fb7a 	bl	8001f34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001840:	2300      	movs	r3, #0
 8001842:	e052      	b.n	80018ea <xQueueGenericSend+0x136>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d106      	bne.n	8001858 <xQueueGenericSend+0xa4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fcc8 	bl	80011e4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001854:	2301      	movs	r3, #1
 8001856:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 8001858:	f000 fb6c 	bl	8001f34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800185c:	f7ff fa6a 	bl	8000d34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001860:	f000 fb56 	bl	8001f10 <vPortEnterCritical>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800186c:	d102      	bne.n	8001874 <xQueueGenericSend+0xc0>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2200      	movs	r2, #0
 8001872:	645a      	str	r2, [r3, #68]	; 0x44
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800187c:	d102      	bne.n	8001884 <xQueueGenericSend+0xd0>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	649a      	str	r2, [r3, #72]	; 0x48
 8001884:	f000 fb56 	bl	8001f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001888:	f107 0214 	add.w	r2, r7, #20
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	4610      	mov	r0, r2
 8001890:	4619      	mov	r1, r3
 8001892:	f7ff fcc5 	bl	8001220 <xTaskCheckForTimeOut>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d11e      	bne.n	80018da <xQueueGenericSend+0x126>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f000 fa3f 	bl	8001d20 <prvIsQueueFull>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d012      	beq.n	80018ce <xQueueGenericSend+0x11a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f103 0210 	add.w	r2, r3, #16
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4610      	mov	r0, r2
 80018b2:	4619      	mov	r1, r3
 80018b4:	f7ff fbdc 	bl	8001070 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f000 f9cf 	bl	8001c5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80018be:	f7ff fa47 	bl	8000d50 <xTaskResumeAll>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10f      	bne.n	80018e8 <xQueueGenericSend+0x134>
				{
					portYIELD_WITHIN_API();
 80018c8:	f000 fb16 	bl	8001ef8 <vPortYieldFromISR>
 80018cc:	e00c      	b.n	80018e8 <xQueueGenericSend+0x134>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f000 f9c4 	bl	8001c5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80018d4:	f7ff fa3c 	bl	8000d50 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 80018d8:	e78e      	b.n	80017f8 <xQueueGenericSend+0x44>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 f9be 	bl	8001c5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80018e0:	f7ff fa36 	bl	8000d50 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	e000      	b.n	80018ea <xQueueGenericSend+0x136>
		}
	}
 80018e8:	e786      	b.n	80017f8 <xQueueGenericSend+0x44>
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3720      	adds	r7, #32
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop

080018f4 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
 8001900:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d104      	bne.n	8001912 <xQueueGenericSendFromISR+0x1e>
 8001908:	f04f 0050 	mov.w	r0, #80	; 0x50
 800190c:	f380 8811 	msr	BASEPRI, r0
 8001910:	e7fe      	b.n	8001910 <xQueueGenericSendFromISR+0x1c>
	configASSERT( pxHigherPriorityTaskWoken );
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d104      	bne.n	8001922 <xQueueGenericSendFromISR+0x2e>
 8001918:	f04f 0050 	mov.w	r0, #80	; 0x50
 800191c:	f380 8811 	msr	BASEPRI, r0
 8001920:	e7fe      	b.n	8001920 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d103      	bne.n	8001930 <xQueueGenericSendFromISR+0x3c>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <xQueueGenericSendFromISR+0x40>
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <xQueueGenericSendFromISR+0x42>
 8001934:	2300      	movs	r3, #0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d104      	bne.n	8001944 <xQueueGenericSendFromISR+0x50>
 800193a:	f04f 0050 	mov.w	r0, #80	; 0x50
 800193e:	f380 8811 	msr	BASEPRI, r0
 8001942:	e7fe      	b.n	8001942 <xQueueGenericSendFromISR+0x4e>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001944:	2300      	movs	r3, #0
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	f04f 0050 	mov.w	r0, #80	; 0x50
 800194c:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001958:	429a      	cmp	r2, r3
 800195a:	d221      	bcs.n	80019a0 <xQueueGenericSendFromISR+0xac>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	68b9      	ldr	r1, [r7, #8]
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	f000 f8f9 	bl	8001b58 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800196a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800196e:	d10f      	bne.n	8001990 <xQueueGenericSendFromISR+0x9c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001974:	2b00      	cmp	r3, #0
 8001976:	d010      	beq.n	800199a <xQueueGenericSendFromISR+0xa6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	3324      	adds	r3, #36	; 0x24
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fbd9 	bl	8001134 <xTaskRemoveFromEventList>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d008      	beq.n	800199a <xQueueGenericSendFromISR+0xa6>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	e004      	b.n	800199a <xQueueGenericSendFromISR+0xa6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001994:	1c5a      	adds	r2, r3, #1
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 800199a:	2301      	movs	r3, #1
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	e001      	b.n	80019a4 <xQueueGenericSendFromISR+0xb0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80019a4:	f04f 0000 	mov.w	r0, #0
 80019a8:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
 80019ac:	697b      	ldr	r3, [r7, #20]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop

080019b8 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d104      	bne.n	80019da <xQueueGenericReceive+0x22>
 80019d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80019d4:	f380 8811 	msr	BASEPRI, r0
 80019d8:	e7fe      	b.n	80019d8 <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d103      	bne.n	80019e8 <xQueueGenericReceive+0x30>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <xQueueGenericReceive+0x34>
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <xQueueGenericReceive+0x36>
 80019ec:	2300      	movs	r3, #0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d104      	bne.n	80019fc <xQueueGenericReceive+0x44>
 80019f2:	f04f 0050 	mov.w	r0, #80	; 0x50
 80019f6:	f380 8811 	msr	BASEPRI, r0
 80019fa:	e7fe      	b.n	80019fa <xQueueGenericReceive+0x42>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80019fc:	f000 fa88 	bl	8001f10 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d03b      	beq.n	8001a80 <xQueueGenericReceive+0xc8>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	68b9      	ldr	r1, [r7, #8]
 8001a12:	f000 f8fd 	bl	8001c10 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d11c      	bne.n	8001a56 <xQueueGenericReceive+0x9e>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a20:	1e5a      	subs	r2, r3, #1
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d104      	bne.n	8001a38 <xQueueGenericReceive+0x80>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 8001a2e:	f7ff fd8f 	bl	8001550 <xTaskGetCurrentTaskHandle>
 8001a32:	4602      	mov	r2, r0
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d01b      	beq.n	8001a78 <xQueueGenericReceive+0xc0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	3310      	adds	r3, #16
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fb75 	bl	8001134 <xTaskRemoveFromEventList>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d113      	bne.n	8001a78 <xQueueGenericReceive+0xc0>
						{
							portYIELD_WITHIN_API();
 8001a50:	f000 fa52 	bl	8001ef8 <vPortYieldFromISR>
 8001a54:	e010      	b.n	8001a78 <xQueueGenericReceive+0xc0>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d009      	beq.n	8001a78 <xQueueGenericReceive+0xc0>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	3324      	adds	r3, #36	; 0x24
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fb63 	bl	8001134 <xTaskRemoveFromEventList>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <xQueueGenericReceive+0xc0>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 8001a74:	f000 fa40 	bl	8001ef8 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
 8001a78:	f000 fa5c 	bl	8001f34 <vPortExitCritical>
				return pdPASS;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e066      	b.n	8001b4e <xQueueGenericReceive+0x196>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d103      	bne.n	8001a8e <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001a86:	f000 fa55 	bl	8001f34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e05f      	b.n	8001b4e <xQueueGenericReceive+0x196>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d106      	bne.n	8001aa2 <xQueueGenericReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001a94:	f107 0310 	add.w	r3, r7, #16
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fba3 	bl	80011e4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 8001aa2:	f000 fa47 	bl	8001f34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001aa6:	f7ff f945 	bl	8000d34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001aaa:	f000 fa31 	bl	8001f10 <vPortEnterCritical>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab6:	d102      	bne.n	8001abe <xQueueGenericReceive+0x106>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	645a      	str	r2, [r3, #68]	; 0x44
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac6:	d102      	bne.n	8001ace <xQueueGenericReceive+0x116>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	649a      	str	r2, [r3, #72]	; 0x48
 8001ace:	f000 fa31 	bl	8001f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001ad2:	f107 0210 	add.w	r2, r7, #16
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	f7ff fba0 	bl	8001220 <xTaskCheckForTimeOut>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d12b      	bne.n	8001b3e <xQueueGenericReceive+0x186>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f000 f904 	bl	8001cf4 <prvIsQueueEmpty>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d01f      	beq.n	8001b32 <xQueueGenericReceive+0x17a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d108      	bne.n	8001b0c <xQueueGenericReceive+0x154>
					{
						portENTER_CRITICAL();
 8001afa:	f000 fa09 	bl	8001f10 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff fd52 	bl	80015ac <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 8001b08:	f000 fa14 	bl	8001f34 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	f7ff faaa 	bl	8001070 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f000 f89d 	bl	8001c5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001b22:	f7ff f915 	bl	8000d50 <xTaskResumeAll>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d10f      	bne.n	8001b4c <xQueueGenericReceive+0x194>
				{
					portYIELD_WITHIN_API();
 8001b2c:	f000 f9e4 	bl	8001ef8 <vPortYieldFromISR>
 8001b30:	e00c      	b.n	8001b4c <xQueueGenericReceive+0x194>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f000 f892 	bl	8001c5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001b38:	f7ff f90a 	bl	8000d50 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8001b3c:	e75e      	b.n	80019fc <xQueueGenericReceive+0x44>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f000 f88c 	bl	8001c5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001b44:	f7ff f904 	bl	8000d50 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	e000      	b.n	8001b4e <xQueueGenericReceive+0x196>
		}
	}
 8001b4c:	e756      	b.n	80019fc <xQueueGenericReceive+0x44>
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3720      	adds	r7, #32
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop

08001b58 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d10c      	bne.n	8001b86 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d145      	bne.n	8001c00 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fd71 	bl	8001660 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	e03c      	b.n	8001c00 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d11a      	bne.n	8001bc2 <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	4610      	mov	r0, r2
 8001b96:	68b9      	ldr	r1, [r7, #8]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	f000 fb29 	bl	80021f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	441a      	add	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d323      	bcc.n	8001c00 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	e01e      	b.n	8001c00 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	4610      	mov	r0, r2
 8001bcc:	68b9      	ldr	r1, [r7, #8]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	f000 fb0e 	bl	80021f0 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	425b      	negs	r3, r3
 8001bde:	441a      	add	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	68da      	ldr	r2, [r3, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d207      	bcs.n	8001c00 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf8:	425b      	negs	r3, r3
 8001bfa:	441a      	add	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d019      	beq.n	8001c56 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	441a      	add	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68da      	ldr	r2, [r3, #12]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d303      	bcc.n	8001c44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68da      	ldr	r2, [r3, #12]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	6838      	ldr	r0, [r7, #0]
 8001c4e:	4611      	mov	r1, r2
 8001c50:	461a      	mov	r2, r3
 8001c52:	f000 facd 	bl	80021f0 <memcpy>
	}
}
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001c64:	f000 f954 	bl	8001f10 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8001c68:	e014      	b.n	8001c94 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00f      	beq.n	8001c92 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3324      	adds	r3, #36	; 0x24
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fa5c 	bl	8001134 <xTaskRemoveFromEventList>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
 8001c82:	f7ff fb21 	bl	80012c8 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c8a:	1e5a      	subs	r2, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	649a      	str	r2, [r3, #72]	; 0x48
 8001c90:	e000      	b.n	8001c94 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
 8001c92:	e003      	b.n	8001c9c <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	dce6      	bgt.n	8001c6a <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8001ca4:	f000 f946 	bl	8001f34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001ca8:	f000 f932 	bl	8001f10 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8001cac:	e014      	b.n	8001cd8 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00f      	beq.n	8001cd6 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3310      	adds	r3, #16
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fa3a 	bl	8001134 <xTaskRemoveFromEventList>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
 8001cc6:	f7ff faff 	bl	80012c8 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	1e5a      	subs	r2, r3, #1
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	645a      	str	r2, [r3, #68]	; 0x44
 8001cd4:	e000      	b.n	8001cd8 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
 8001cd6:	e003      	b.n	8001ce0 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	dce6      	bgt.n	8001cae <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce6:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001ce8:	f000 f924 	bl	8001f34 <vPortExitCritical>
}
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop

08001cf4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8001cfc:	f000 f908 	bl	8001f10 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	bf14      	ite	ne
 8001d08:	2300      	movne	r3, #0
 8001d0a:	2301      	moveq	r3, #1
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 8001d10:	f000 f910 	bl	8001f34 <vPortExitCritical>

	return xReturn;
 8001d14:	68fb      	ldr	r3, [r7, #12]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop

08001d20 <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8001d28:	f000 f8f2 	bl	8001f10 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d34:	429a      	cmp	r2, r3
 8001d36:	bf14      	ite	ne
 8001d38:	2300      	movne	r3, #0
 8001d3a:	2301      	moveq	r3, #1
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 8001d40:	f000 f8f8 	bl	8001f34 <vPortExitCritical>

	return xReturn;
 8001d44:	68fb      	ldr	r3, [r7, #12]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop

08001d50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001d5a:	f000 f8d9 	bl	8001f10 <vPortEnterCritical>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d66:	d102      	bne.n	8001d6e <vQueueWaitForMessageRestricted+0x1e>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	645a      	str	r2, [r3, #68]	; 0x44
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d76:	d102      	bne.n	8001d7e <vQueueWaitForMessageRestricted+0x2e>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	649a      	str	r2, [r3, #72]	; 0x48
 8001d7e:	f000 f8d9 	bl	8001f34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d105      	bne.n	8001d96 <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3324      	adds	r3, #36	; 0x24
 8001d8e:	4618      	mov	r0, r3
 8001d90:	6839      	ldr	r1, [r7, #0]
 8001d92:	f7ff f9a5 	bl	80010e0 <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ff60 	bl	8001c5c <prvUnlockQueue>
	}
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop

08001da4 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL; 
 8001dac:	2300      	movs	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d004      	beq.n	8001dc4 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f023 0307 	bic.w	r3, r3, #7
 8001dc0:	3308      	adds	r3, #8
 8001dc2:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
 8001dc4:	f7fe ffb6 	bl	8000d34 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <pvPortMalloc+0x70>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4413      	add	r3, r2
 8001dd0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001dd4:	d212      	bcs.n	8001dfc <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <pvPortMalloc+0x70>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	441a      	add	r2, r3
 8001dde:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <pvPortMalloc+0x70>)
 8001de0:	681b      	ldr	r3, [r3, #0]
	#endif

	vTaskSuspendAll();
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d90a      	bls.n	8001dfc <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
 8001de6:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <pvPortMalloc+0x70>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <pvPortMalloc+0x74>)
 8001dec:	4413      	add	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;			
 8001df0:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <pvPortMalloc+0x70>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	441a      	add	r2, r3
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <pvPortMalloc+0x70>)
 8001dfa:	601a      	str	r2, [r3, #0]
		}	
	}
	xTaskResumeAll();
 8001dfc:	f7fe ffa8 	bl	8000d50 <xTaskResumeAll>
	
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <pvPortMalloc+0x66>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8001e06:	f7fe fb0f 	bl	8000428 <vApplicationMallocFailedHook>
		}
	}
	#endif	

	return pvReturn;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20001578 	.word	0x20001578
 8001e18:	20000178 	.word	0x20000178

08001e1c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop

08001e30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	3b04      	subs	r3, #4
 8001e40:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	3b04      	subs	r3, #4
 8001e4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 8001e50:	68ba      	ldr	r2, [r7, #8]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	3b04      	subs	r3, #4
 8001e5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	3b14      	subs	r3, #20
 8001e66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 9;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	3b24      	subs	r3, #36	; 0x24
 8001e72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_EXC_RETURN;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f06f 0202 	mvn.w	r2, #2
 8001e7a:	601a      	str	r2, [r3, #0]
	return pxTopOfStack;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop

08001e8c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <pxCurrentTCBConst2>)
 8001e8e:	6819      	ldr	r1, [r3, #0]
 8001e90:	6808      	ldr	r0, [r1, #0]
 8001e92:	f850 eb04 	ldr.w	lr, [r0], #4
 8001e96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001e9a:	f380 8809 	msr	PSP, r0
 8001e9e:	f04f 0000 	mov.w	r0, #0
 8001ea2:	f380 8811 	msr	BASEPRI, r0
 8001ea6:	4770      	bx	lr

08001ea8 <pxCurrentTCBConst2>:
 8001ea8:	20000078 	.word	0x20000078

08001eac <vPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vPortStartFirstTask( void )
{
	__asm volatile(
 8001eac:	4803      	ldr	r0, [pc, #12]	; (8001ebc <vPortStartFirstTask+0x10>)
 8001eae:	6800      	ldr	r0, [r0, #0]
 8001eb0:	6800      	ldr	r0, [r0, #0]
 8001eb2:	f380 8808 	msr	MSP, r0
 8001eb6:	b662      	cpsie	i
 8001eb8:	df00      	svc	0
 8001eba:	bf00      	nop
 8001ebc:	e000ed08 	.word	0xe000ed08

08001ec0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8001ec4:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <xPortStartScheduler+0x30>)
 8001ec6:	4a0a      	ldr	r2, [pc, #40]	; (8001ef0 <xPortStartScheduler+0x30>)
 8001ec8:	6812      	ldr	r2, [r2, #0]
 8001eca:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001ece:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8001ed0:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <xPortStartScheduler+0x30>)
 8001ed2:	4a07      	ldr	r2, [pc, #28]	; (8001ef0 <xPortStartScheduler+0x30>)
 8001ed4:	6812      	ldr	r2, [r2, #0]
 8001ed6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001eda:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8001edc:	f000 f884 	bl	8001fe8 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001ee0:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <xPortStartScheduler+0x34>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8001ee6:	f7ff ffe1 	bl	8001eac <vPortStartFirstTask>

	/* Should not get here! */
	return 0;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	e000ed20 	.word	0xe000ed20
 8001ef4:	20000008 	.word	0x20000008

08001ef8 <vPortYieldFromISR>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8001efc:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <vPortYieldFromISR+0x14>)
 8001efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f02:	601a      	str	r2, [r3, #0]
}
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000ed04 	.word	0xe000ed04

08001f10 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8001f14:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001f18:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <vPortEnterCritical+0x20>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <vPortEnterCritical+0x20>)
 8001f24:	601a      	str	r2, [r3, #0]
}
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	20000008 	.word	0x20000008

08001f34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <vPortExitCritical+0x28>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	1e5a      	subs	r2, r3, #1
 8001f3e:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <vPortExitCritical+0x28>)
 8001f40:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <vPortExitCritical+0x28>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d103      	bne.n	8001f52 <vPortExitCritical+0x1e>
	{
		portENABLE_INTERRUPTS();
 8001f4a:	f04f 0000 	mov.w	r0, #0
 8001f4e:	f380 8811 	msr	BASEPRI, r0
	}
}
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	20000008 	.word	0x20000008

08001f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001f60:	f3ef 8009 	mrs	r0, PSP
 8001f64:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <pxCurrentTCBConst>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001f6c:	f01e 0f10 	tst.w	lr, #16
 8001f70:	bf08      	it	eq
 8001f72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001f76:	f840 ed04 	str.w	lr, [r0, #-4]!
 8001f7a:	6010      	str	r0, [r2, #0]
 8001f7c:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001f80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001f84:	f380 8811 	msr	BASEPRI, r0
 8001f88:	f7ff f820 	bl	8000fcc <vTaskSwitchContext>
 8001f8c:	f04f 0000 	mov.w	r0, #0
 8001f90:	f380 8811 	msr	BASEPRI, r0
 8001f94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001f98:	6819      	ldr	r1, [r3, #0]
 8001f9a:	6808      	ldr	r0, [r1, #0]
 8001f9c:	f850 eb04 	ldr.w	lr, [r0], #4
 8001fa0:	f01e 0f10 	tst.w	lr, #16
 8001fa4:	bf08      	it	eq
 8001fa6:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001faa:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001fae:	f380 8809 	msr	PSP, r0
 8001fb2:	4770      	bx	lr

08001fb4 <pxCurrentTCBConst>:
 8001fb4:	20000078 	.word	0x20000078

08001fb8 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
    unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8001fbe:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <SysTick_Handler+0x2c>)
 8001fc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fc4:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001fce:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
 8001fd2:	f7fe ff53 	bl	8000e7c <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 8001fd6:	f04f 0000 	mov.w	r0, #0
 8001fda:	f380 8811 	msr	BASEPRI, r0
}
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	e000ed04 	.word	0xe000ed04

08001fe8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001fec:	4b07      	ldr	r3, [pc, #28]	; (800200c <prvSetupTimerInterrupt+0x24>)
 8001fee:	4a08      	ldr	r2, [pc, #32]	; (8002010 <prvSetupTimerInterrupt+0x28>)
 8001ff0:	6811      	ldr	r1, [r2, #0]
 8001ff2:	4a08      	ldr	r2, [pc, #32]	; (8002014 <prvSetupTimerInterrupt+0x2c>)
 8001ff4:	fba2 0201 	umull	r0, r2, r2, r1
 8001ff8:	0992      	lsrs	r2, r2, #6
 8001ffa:	3a01      	subs	r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <prvSetupTimerInterrupt+0x30>)
 8002000:	2207      	movs	r2, #7
 8002002:	601a      	str	r2, [r3, #0]
}
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	e000e014 	.word	0xe000e014
 8002010:	20000000 	.word	0x20000000
 8002014:	10624dd3 	.word	0x10624dd3
 8002018:	e000e010 	.word	0xe000e010

0800201c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f103 0208 	add.w	r2, r3, #8
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f04f 32ff 	mov.w	r2, #4294967295
 8002034:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f103 0208 	add.w	r2, r3, #8
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f103 0208 	add.w	r2, r3, #8
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
}
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop

0800205c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	611a      	str	r2, [r3, #16]
}
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	601a      	str	r2, [r3, #0]
}
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop

080020c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020da:	d103      	bne.n	80020e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	e00c      	b.n	80020fe <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3308      	adds	r3, #8
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	e002      	b.n	80020f2 <vListInsert+0x2e>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d9f6      	bls.n	80020ec <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	601a      	str	r2, [r3, #0]
}
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6892      	ldr	r2, [r2, #8]
 8002144:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6852      	ldr	r2, [r2, #4]
 800214e:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	429a      	cmp	r2, r3
 800215e:	d103      	bne.n	8002168 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	1e5a      	subs	r2, r3, #1
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	601a      	str	r2, [r3, #0]
}
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop

08002184 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8002190:	887b      	ldrh	r3, [r7, #2]
 8002192:	43db      	mvns	r3, r3
 8002194:	b29a      	uxth	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	801a      	strh	r2, [r3, #0]
}
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <__libc_init_array>:
 80021a4:	b570      	push	{r4, r5, r6, lr}
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <__libc_init_array+0x3c>)
 80021a8:	4d0e      	ldr	r5, [pc, #56]	; (80021e4 <__libc_init_array+0x40>)
 80021aa:	1aed      	subs	r5, r5, r3
 80021ac:	10ad      	asrs	r5, r5, #2
 80021ae:	2400      	movs	r4, #0
 80021b0:	461e      	mov	r6, r3
 80021b2:	42ac      	cmp	r4, r5
 80021b4:	d004      	beq.n	80021c0 <__libc_init_array+0x1c>
 80021b6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80021ba:	4790      	blx	r2
 80021bc:	3401      	adds	r4, #1
 80021be:	e7f8      	b.n	80021b2 <__libc_init_array+0xe>
 80021c0:	f000 f84e 	bl	8002260 <_init>
 80021c4:	4d08      	ldr	r5, [pc, #32]	; (80021e8 <__libc_init_array+0x44>)
 80021c6:	4b09      	ldr	r3, [pc, #36]	; (80021ec <__libc_init_array+0x48>)
 80021c8:	1aed      	subs	r5, r5, r3
 80021ca:	10ad      	asrs	r5, r5, #2
 80021cc:	2400      	movs	r4, #0
 80021ce:	461e      	mov	r6, r3
 80021d0:	42ac      	cmp	r4, r5
 80021d2:	d004      	beq.n	80021de <__libc_init_array+0x3a>
 80021d4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80021d8:	4790      	blx	r2
 80021da:	3401      	adds	r4, #1
 80021dc:	e7f8      	b.n	80021d0 <__libc_init_array+0x2c>
 80021de:	bd70      	pop	{r4, r5, r6, pc}
 80021e0:	08002278 	.word	0x08002278
 80021e4:	08002278 	.word	0x08002278
 80021e8:	0800227c 	.word	0x0800227c
 80021ec:	08002278 	.word	0x08002278

080021f0 <memcpy>:
 80021f0:	b510      	push	{r4, lr}
 80021f2:	2300      	movs	r3, #0
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d003      	beq.n	8002200 <memcpy+0x10>
 80021f8:	5ccc      	ldrb	r4, [r1, r3]
 80021fa:	54c4      	strb	r4, [r0, r3]
 80021fc:	3301      	adds	r3, #1
 80021fe:	e7f9      	b.n	80021f4 <memcpy+0x4>
 8002200:	bd10      	pop	{r4, pc}

08002202 <memset>:
 8002202:	4402      	add	r2, r0
 8002204:	4603      	mov	r3, r0
 8002206:	4293      	cmp	r3, r2
 8002208:	d002      	beq.n	8002210 <memset+0xe>
 800220a:	f803 1b01 	strb.w	r1, [r3], #1
 800220e:	e7fa      	b.n	8002206 <memset+0x4>
 8002210:	4770      	bx	lr

08002212 <strncpy>:
 8002212:	b510      	push	{r4, lr}
 8002214:	4603      	mov	r3, r0
 8002216:	b132      	cbz	r2, 8002226 <strncpy+0x14>
 8002218:	f811 4b01 	ldrb.w	r4, [r1], #1
 800221c:	f803 4b01 	strb.w	r4, [r3], #1
 8002220:	3a01      	subs	r2, #1
 8002222:	2c00      	cmp	r4, #0
 8002224:	d1f7      	bne.n	8002216 <strncpy+0x4>
 8002226:	441a      	add	r2, r3
 8002228:	4293      	cmp	r3, r2
 800222a:	d003      	beq.n	8002234 <strncpy+0x22>
 800222c:	2100      	movs	r1, #0
 800222e:	f803 1b01 	strb.w	r1, [r3], #1
 8002232:	e7f9      	b.n	8002228 <strncpy+0x16>
 8002234:	bd10      	pop	{r4, pc}
 8002236:	0000      	movs	r0, r0
 8002238:	20726d54 	.word	0x20726d54
 800223c:	00637653 	.word	0x00637653
 8002240:	454c4449 	.word	0x454c4449
 8002244:	00000000 	.word	0x00000000
 8002248:	00000a0d 	.word	0x00000a0d
 800224c:	09097325 	.word	0x09097325
 8002250:	25096325 	.word	0x25096325
 8002254:	75250975 	.word	0x75250975
 8002258:	0d752509 	.word	0x0d752509
 800225c:	0000000a 	.word	0x0000000a

08002260 <_init>:
 8002260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002262:	bf00      	nop
 8002264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002266:	bc08      	pop	{r3}
 8002268:	469e      	mov	lr, r3
 800226a:	4770      	bx	lr

0800226c <_fini>:
 800226c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800226e:	bf00      	nop
 8002270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002272:	bc08      	pop	{r3}
 8002274:	469e      	mov	lr, r3
 8002276:	4770      	bx	lr
