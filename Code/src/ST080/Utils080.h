/*
 * The MIT License (MIT)

Copyright (c) 2015 Tinotenda Chemvura, John Odetokun, Othniel Konan, Herman Kouassi

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

 */

/*
 * Utils080.h
 *
 *  Created on: Sep 26, 2016
 *      Author: Tinotenda Chemvura
 */

#ifndef UTILS080_H_
#define UTILS080_H_

// other stuff
#include <stdbool.h>
#include <stdlib.h>
#include <math.h>

// Library 38 (interrupts library)
#include "TM38/defines.h"
#include "TM38/tm_stm32f4_disco.h"
#include "TM38/tm_stm32f4_exti.h"

// FreeRTOS stuff
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "semphr.h"

// STM32f4 stuff
#include "stm32f4xx.h"
#include "stm32f4_discovery.h"

// LCD library
#include "LCD/tm_stm32f4_hd44780.h"

// EEprom library
#include "Eeprom.h"

// Tempo library
#include "Tempo.h"

// ==========================================================================================
// ============================ FreeRTOS stuff ==============================================
// ==========================================================================================

uint64_t tickTime = 0;        // Counts OS ticks (default = 1000Hz).
uint64_t u64IdleTicks = 0;   // Value of u64IdleTicksCnt is copied once per sec.
uint64_t u64IdleTicksCnt = 0; // Counts when the OS has no task to execute.
uint16_t u16PWM1 = 0;

// This FreeRTOS callback function gets called once per tick (default = 1000Hz).
// ----------------------------------------------------------------------------
void vApplicationTickHook(void) {
	++tickTime;
}

// This FreeRTOS call-back function gets when no other task is ready to execute.
// On a completely unloaded system this is getting called at over 2.5MHz!
// ----------------------------------------------------------------------------
void vApplicationIdleHook(void) {
	++u64IdleTicksCnt;
}

// A required FreeRTOS function.
// ----------------------------------------------------------------------------
void vApplicationMallocFailedHook(void) {
	configASSERT(0);  				// Latch on any failure / error.
}

// ==========================================================================================
// ============================ Global Variables ============================================
// ==========================================================================================

// define task priorities
#define MODES_TASK_PRIORITY 1
#define UI_TASK_PRIORITY 2
#define GPIO_TASK_PRIORITY 3

// define task stack sizes
#define MODES_STACK_SIZE 128
#define UI_STACK_SIZE 128
#define GPIO_STACK_SIZE 128

// LCD dimensions
#define LCD_COLUMNS 16
#define LCD_ROWS 2

// Modes used by the ST080
#define COMPOSER 1
#define PLAYBACK 2
#define FREESTYLE 3
#define SAVE 4
#define ERROR_MODE 5
#define ENTER 6

// Instrument Macros
#define INSTR_1 0
#define INSTR_2 1
#define INSTR_3 2
#define INSTR_4 3

#define SAMPLE_SIZE 1103
#define DEFAULT_COMPOSER_BUFFERSIZE 20000
#define DEFAULT_TEMPO 0 // define proper tempo
#define CHANNEL_RACK_SIZE 1024

SEMAPHORE_H flags_lock = NULL;

bool PAD_STATE[4];  				//Global variable use to check the state of the Freestyle pad
bool STATE_CHANGED;					//Global variable to check if there has been a change in Pad status
uint8_t MODE = COMPOSER; 			// Global variable to e used to identify which mode the ST080 is currently in
bool status = true;					// Variable used by Composer to check if there has been an update on the channel rack configs.
uint64_t current = 0, previous = 0;	// Variables to be used by IRQ Handler for debouncing
uint8_t current_sample = INSTR_1;	// variable used by the composer mode to check which instrument sample is on the channel rack
uint8_t played_inst = 0;			// variable used by the Freestyle mode to determine the instrument(s) played
uint16_t freestyle_samples [11][SAMPLE_SIZE]; // This will hold the samples of the different possible combinations
bool channelRack[16][4][16]; 		// 16 channel racks with 4 instruments each with 16 beat channel
uint8_t currentBeat = 0;			// Variable to indicate the current beat/instrumental being edited on the beat rack.
bool resetLEDs = true;				// flag used to fresh the LEDs when switching modes. This flag will be checked by the UI_Task to check whether it should reset the LEDs or not
bool UPDATE_LCD = true; 				// flag used to update LCD
bool UPDATE_BEAT = true;			//flag used to update beat on LCD in playback mode
bool UPDATE_TEMPO = true;
uint16_t ComposerBuffer[DEFAULT_COMPOSER_BUFFERSIZE];		// Buffer used by the composer mode to push to the audio output interface
uint16_t tempo = DEFAULT_TEMPO;
uint16_t drumKit1 [4][SAMPLE_SIZE] = {
/*snare*/			{2085,2008,2095,2000,2101,2009,2382,2549,2753,2861,3050,2947,3447,3213,2841,3366,2539,2304,1732,1885,1638,890,336,708,0,826,1013,98,308,757,979,1337,1143,1224,2946,2101,2594,3308,2984,2768,2786,3686,3013,2882,3846,3073,2967,2544,2580,1637,2044,1984,1662,739,941,1676,604,1648,587,357,424,1398,1598,1469,1119,2209,2275,1294,2969,3090,2596,2642,3314,3407,3028,2973,3453,3889,2854,3188,2904,1660,3186,2475,1571,1899,1663,1717,1876,1270,743,947,977,1193,2047,664,847,1934,1832,2076,1032,2378,2015,2179,2374,2790,2061,2667,2939,2139,3117,2058,2930,2694,1867,1658,2807,1653,1754,2355,1458,1447,1604,1273,1383,2212,1511,1330,1819,1302,1826,2573,1830,2503,2092,2061,2202,3041,3166,2328,2587,2167,2691,3485,2193,2532,2582,2557,2366,1788,2071,1779,1599,1890,2410,1591,1260,842,1924,2105,1347,1307,1570,1510,1804,1678,1429,2268,2511,2005,1879,2062,2377,2604,2244,1946,2271,2708,2006,2665,2000,2331,2252,1807,2211,1366,2380,2045,1924,2308,1638,1645,1798,1824,1879,2131,1838,2260,1691,1947,2819,2344,2319,2012,2280,2276,2412,2140,2484,2356,2592,2525,1594,2612,2153,1922,1930,1933,1931,1546,2388,1787,1568,1598,1522,1722,2314,1551,1250,2295,1545,1973,1920,1965,2088,1813,1840,2243,2460,2176,2259,1969,1824,2866,2402,1991,2103,1928,2280,2347,2345,1909,2032,2011,2053,1991,2071,1590,2424,2073,1816,2155,1838,2502,1722,2183,2277,2051,1853,2232,2424,1662,2642,2103,2186,2371,1991,1956,1836,2542,1915,2123,1821,2139,2023,1797,1723,1778,2224,1562,1802,1903,2196,1480,2004,1999,1781,1946,1713,2094,2144,2089,2186,2072,2010,2165,1915,2377,2193,2201,2201,2254,1997,2284,2249,2155,2172,1798,2289,2382,1888,1833,2243,1984,2222,1936,2222,1963,1968,1863,1873,2586,1917,1922,2031,2271,2178,1956,1969,2103,1958,1880,2406,2186,1943,1833,2131,2113,1660,1975,2104,2226,1700,1956,1910,1903,2128,1606,2019,2122,1861,2066,1865,1903,2284,1887,2050,2018,2218,1914,2083,2236,2323,2117,2044,2151,2107,2475,1800,2285,2184,2011,2169,2089,2220,2182,2046,1931,1875,2328,2179,1920,1962,2013,1893,2097,2210,1917,2010,2042,2150,1785,2281,1890,1948,2128,1935,2004,2084,2169,1925,1942,2011,1965,2057,1877,1914,2189,2001,2110,1752,2034,2004,2102,2061,1817,1903,2217,2005,2062,2176,1937,2046,1958,2269,2086,2251,2110,2023,2038,2078,2234,2179,2141,2167,2186,2001,1958,2180,2159,2177,2061,1857,2097,2201,2057,1937,2092,1862,2082,2003,2052,2121,1828,2111,1989,2045,1971,1943,2152,1931,1860,2131,2100,1950,2054,1850,2046,2065,1993,2114,2036,2071,1967,1984,1883,2144,2132,1962,2037,2025,2055,2067,1952,2130,2210,2016,2034,1992,2188,2237,2073,1919,2160,2223,2008,2104,2142,2148,2112,2044,2070,2032,2017,2182,2180,1970,2029,2013,2130,2078,1946,2032,1966,2046,1971,2038,1975,1954,1993,2149,2052,1918,2028,1900,2131,2004,1963,2008,1904,2146,2063,1967,2157,1959,2008,2096,2005,2032,2029,2060,1954,2203,2034,1984,2173,1961,2145,2166,2010,2048,2005,2061,2113,2195,2146,1991,1941,2198,2221,2032,2020,1957,2255,2099,1931,2103,2183,2027,2033,1969,1964,2210,2119,1892,1968,2151,1955,2079,1976,1933,2080,2066,1974,1981,1940,1973,2121,2015,2064,1977,1997,2059,2012,1946,2054,2099,2031,2024,2121,2018,1936,2092,2149,2093,1966,2075,2042,2082,2149,2002,2070,2184,1933,2103,2141,2017,2100,2108,2100,1988,2051,2111,2161,2033,2052,1998,2100,2110,1988,2089,2077,2078,1971,2067,2114,1942,1999,2084,2019,2030,2055,2003,1991,2014,2087,1949,1989,2069,1996,2014,1995,2085,1980,2035,2039,2037,2068,2022,2046,1978,2084,2070,2034,2045,2063,2101,2042,2086,2085,2032,2024,2126,2093,1994,2083,2124,2092,2062,2065,2049,2055,2106,2108,1976,2098,2073,2083,2083,2008,2055,2023,2133,1987,2027,2079,2050,2046,2035,2066,2005,2025,1962,2047,2115,1993,2034,1981,2036,2071,2003,2006,1987,2090,1974,2076,2065,1950,2063,2072,2038,2009,2035,2076,2098,2023,2045,1999,2087,2100,2034,2095,2070,2045,2033,2122,2047,2082,2098,2050,2073,2019,2080,2067,2067,2091,2062,2038,2108,2048,1990,2096,2077,2024,2022,2030,2070,2071,2078,1991,1991,2096,2009,2067,2026,2017,2018,2029,2022,2025,2072,1978,2078,2015,1999,2060,2044,2048,1999,2072,2055,2024,2020,2048,2032,2038,2073,2048,2078,2042,2098,2013,2054,2101,2006,2101,2094,2011,2078,2113,2052,2051,2051,2063,2071,2059,2062,2055,2030,2118,2039,2040,2093,2056,2031,2037,2037,1997,2097,2052,2031,2063,2018,2022,2058,2005,2045,2041,2027,2046,2021,2046,2036,2032,2016,2048,2040,2033,2025,2066,2030,2030,2036,2018,2102,2024,2041,2044,2088,2039,2024,2084,2053,2060,2044,2071,2041,2094,2048,2066,2065,2033,2075,2104,2037,2031,2089,2054,2077,2032,2059,2061,2070,2069,2021,2044,2067,2020,2070,2067,2032,2034,2034,2046,2040,2040,2037,2035,2004,2062,2054,2063,2005,2014,2059,2040,2043,2041,2045,1995,2046,2080,2029,2043,2022,2034,2075,2046,2070,2035,2043,2051,2081,2060,2017,2067,2070,2065,2044,2044,2079,2078,2037,2082,2065,2046,2060,2034,2061,2085,2065,2039,2064,2069,2021,2051,2076,2047,2038,2056,2054,2030,2046,2047,2048,2025,2056,2051,2022,2045,2041,2020,2050,2037,2025,2060,2029,2062,2018,2023,2048,2054,2054,2026,2051,2055,2044,2017,2063,2056,2048,2052,2045,2066,2059,2049,2055,2032,2049,2082,2075,2051,2048,2054,2038,2078,2055,2045,2074,2072,2052,2049,2032,2063,2055,2060,2059,2038,2068,2044,2023,2047,2064,2044,2061,2019,2045,2055,2030,2050,2036,2038,2037,2045,2052,2044,2031,2035,2041,2020,2042,2071,2050,2037,2035,2043,2041,2052,2044,2026,2070,2064,2035,2052,2051,2061,2049,2049,2047,2060,2055,2063,2062,2045,2052,2039,2067,2067,2054,2058,2058,2050,2052,2045,2060,2036,2072,2054,2035,2069,2036,2053,2043,2066,2032,2047,2050,2043,2045,2040,2051,2041,2035,2029,2059,2041,2050,2035,2036,2047,2046,2042,2043,2044,2045,2043,2037,2058,2050,2039,2039,2049,2053},
/*kick*/			{2034,2057,2028,2016,1962,2021,2087,2048,2416,2401,2382,1916,1717,2092,2254,2139,2201,2166,1863,1631,1658,1872,1920,1999,1980,1863,2025,1659,1916,1801,1870,2121,1827,2577,1567,2722,2319,934,2677,3016,2145,1300,1485,2687,3795,3419,2851,1307,1087,2961,3151,1274,552,1919,2021,1991,2802,2820,2812,2986,3118,2857,2461,2731,2726,2533,2330,2298,1869,1732,1621,1394,1809,1479,1198,996,1300,1171,848,1041,746,735,819,1114,1026,1196,1068,1176,1425,857,1409,1479,1420,1841,2019,2049,2164,2031,1697,2292,2849,2685,2478,2595,2884,2846,2474,2741,2566,2339,2441,2476,2952,2907,3001,3108,3017,3217,3416,3283,3370,3514,3297,3690,3522,3538,3540,3400,3381,3439,3343,3122,3153,2818,3076,2564,2757,2510,2180,2513,2049,1984,1879,1620,1256,1501,1207,1075,944,1016,952,350,774,201,277,372,321,509,99,443,240,368,536,484,471,486,462,561,550,634,803,646,1089,900,750,1137,1069,1084,1325,1402,1457,1411,1740,1619,1834,2114,2172,2176,2293,2542,2809,2799,2773,3428,3013,3509,3524,3651,3758,3788,3903,3808,4042,3831,4045,3862,3975,3934,3941,3920,3857,3906,3827,3778,3770,3619,3676,3558,3505,3462,3395,3323,3199,3157,3033,3002,2705,2771,2573,2470,2385,2334,2064,1998,1936,1736,1660,1505,1174,1085,1016,657,824,482,580,312,290,326,130,386,122,205,152,119,151,84,114,115,144,118,137,156,167,198,232,258,301,373,388,430,501,556,584,751,727,844,897,974,1082,1201,1278,1318,1623,1518,1717,1744,1964,1893,2255,2294,2207,2646,2485,2832,2894,3062,3091,3157,3358,3240,3264,3521,3231,3454,3530,3428,3561,3423,3465,3493,3573,3376,3567,3456,3481,3483,3518,3416,3457,3427,3409,3503,3311,3435,3259,3413,3238,3321,3209,3175,3237,3138,3144,3001,3051,3093,2701,2935,2965,2512,2960,2513,2799,2594,2437,2374,2423,2382,2263,2274,2223,2183,2036,2338,1577,2315,1674,1834,1949,1625,1792,1293,1905,1426,1428,1629,1390,1168,1457,986,1203,1190,711,1381,1022,743,970,890,749,728,841,663,624,850,591,748,642,620,722,679,628,696,662,638,724,621,800,697,762,651,828,757,764,879,854,902,929,970,1014,1091,1053,1218,1135,1345,1256,1428,1511,1504,1510,1681,1658,1767,1940,1904,1986,1994,2265,2076,2411,2391,2376,2455,2687,2482,2747,2922,2734,2918,2967,2946,3055,3201,2868,3512,3180,3176,3551,3252,3314,3618,3419,3399,3562,3590,3399,3488,3690,3331,3625,3517,3497,3664,3481,3449,3565,3469,3509,3600,3483,3339,3572,3376,3439,3509,3329,3425,3323,3404,3207,3261,3249,3188,3152,3226,3020,3144,3002,2896,3046,2530,3025,2675,2615,2853,2497,2684,2514,2476,2415,2365,2247,2188,2078,2166,1939,2050,1900,1633,2110,1426,1904,1507,1428,1580,1130,1685,1230,1429,1025,1320,1231,939,1119,1099,870,849,1147,623,1084,764,760,834,897,714,743,941,576,879,737,723,829,849,789,823,841,759,807,904,737,1053,921,786,1091,842,960,1071,956,991,1101,1011,1208,1095,1159,1317,1101,1344,1331,1309,1483,1338,1578,1645,1453,1629,1698,1761,1629,1897,1870,1924,1881,2013,2088,1955,2195,1987,2347,2200,2389,2149,2613,2264,2278,2752,2305,2759,2413,2953,2421,2840,2495,2826,2915,2647,2930,2782,3112,2466,3204,2593,3177,2740,3092,3092,2814,3166,2653,3217,2885,3083,2909,3239,2831,3039,3094,3082,3039,3021,2975,3133,3005,2783,3302,2709,3063,2949,3062,2923,2802,3017,2959,2821,2920,2879,2765,2968,2724,2813,2748,2751,2758,2775,2654,2638,2674,2659,2491,2669,2522,2499,2581,2325,2495,2501,2421,2172,2594,2183,2250,2319,2200,2222,2169,2070,2079,2211,1854,2152,1621,2158,1840,1782,1902,1559,1875,1657,1426,1732,1727,1184,1766,1304,1474,1219,1373,1410,1066,1375,1011,1261,1052,1213,1233,960,1184,1011,1144,1200,794,1185,1099,1015,1093,1143,973,1231,1068,1072,1232,1064,1188,1096,1425,957,1422,1214,1243,1482,1236,1474,1260,1366,1440,1403,1432,1241,1647,1403,1357,1695,1278,1502,1415,1658,1455,1464,1530,1556,1433,1586,1562,1560,1576,1493,1807,1453,1769,1530,1669,1647,1584,1742,1570,1616,1687,1671,1660,1845,1570,1854,1719,1627,1945,1660,1832,1870,1883,1961,1818,1900,1984,1940,2054,2032,2043,2043,2155,2100,2072,2248,2159,2378,2162,2304,2271,2343,2373,2409,2337,2496,2557,2505,2548,2529,2781,2394,2943,2483,2855,2754,2718,2987,2621,2912,2806,3037,2856,2973,2964,2917,2956,3026,2914,3119,2930,3049,3016,3040,3034,2937,3070,2932,2959,3091,2997,2865,3112,2707,3094,2754,2850,2943,2949,2767,2816,2769,2683,2875,2552,2883,2431,2838,2462,2599,2565,2337,2608,2274,2599,2319,2350,2304,2273,2220,2174,2213,2093,2283,1913,2178,2088,1917,1866,1997,1980,1688,2062,1742,1756,1860,1782,1643,1829,1606,1766,1707,1633,1590,1604,1722,1442,1732,1539,1518,1640,1506,1516,1620,1394,1608,1416,1614,1340,1627,1548,1383,1601,1321,1643,1314,1717,1298,1641,1319,1579,1577,1292,1743,1257,1849,1230,1691,1424,1525,1613,1367,1781,1374,1633,1437,1741,1324,1802,1505,1529,1641,1538,1709,1481,1679,1573,1773,1478,1871,1355,1862,1578,1773,1703,1650,1791,1617,1900,1506,1979,1634,2020,1599,2028,1710,1795,1904,1788,1917,1822,1995,1723,2115,1717,2133,1763,2074,1838,2075,1987,2003,2162,1821,2254,1879,2247,1967,2239,2059,2190,2071,2248,2203,2108,2265,2121,2317,2105,2362,2142,2258,2327,2187,2307,2326,2187,2384,2309,2339,2316,2415,2325,2343,2387,2359,2437,2308,2419,2285,2452,2290,2427,2408,2300,2439,2378,2402,2322,2423,2351,2383,2298,2471,2419,2328,2398,2285,2430,2301,2429,2321,2424,2279,2413,2360,2213,2448,2271,2409,2257,2406,2259,2292,2266,2285,2324,2229,2333,2159,2339,2171,2322,2173,2222,2265,2131,2392,2000,2316,2112,2168,2213,2035,2367,1974,2280,2107,2159,2119,2105,2148,2053,2191,2035,2216,2042,2207,1964,2278,2035,2105,2183,1980,2183,2067,2118,2034,2196,1948,2218,2014,2154,1998,2115,2089,1986,2224,1906},
/*cow bell*/		{2064,2244,2345,2248,2230,1991,1939,1192,585,1405,2398,2967,3205,2928,2659,1326,286,844,1606,2693,3171,3296,3072,2938,2426,1697,1049,169,0,0,1084,3000,4030,4094,4094,4023,3314,2224,1231,497,0,26,0,197,1542,3000,3991,3770,3666,3829,3541,2867,1863,1003,314,60,0,665,2136,3427,4038,4094,3770,3226,2309,1345,444,0,4,81,1359,2942,3977,4094,4094,3879,3030,2132,1245,607,74,89,0,621,1841,2995,3647,3463,3565,3466,3166,2475,1712,989,617,232,204,1182,2268,3214,3628,3683,3283,2882,2133,1487,648,40,340,617,1687,2753,3532,3887,3770,3296,2677,2075,1482,989,621,637,499,1030,1917,2765,3090,3079,3263,3128,2919,2354,1793,1220,957,665,656,1420,2240,2906,3222,3246,2963,2661,2121,1640,903,606,883,1046,1816,2560,3125,3360,3279,2919,2487,2092,1668,1274,1004,993,898,1264,1946,2550,2721,2868,3029,2920,2754,2296,1855,1389,1185,947,956,1568,2201,2692,2951,2958,2765,2518,2135,1710,1099,1002,1204,1316,1881,2431,2853,3020,2963,2684,2381,2112,1780,1459,1249,1224,1156,1411,1970,2382,2520,2745,2859,2780,2632,2256,1887,1502,1334,1141,1162,1669,2165,2554,2767,2769,2630,2422,2142,1725,1261,1270,1404,1491,1908,2342,2663,2797,2751,2534,2321,2128,1844,1581,1402,1376,1322,1509,1981,2249,2415,2666,2744,2686,2542,2228,1902,1579,1428,1276,1304,1735,2135,2464,2640,2650,2539,2367,2143,1729,1404,1445,1540,1604,1918,2278,2531,2648,2610,2443,2288,2140,1886,1667,1502,1483,1427,1581,1973,2152,2370,2609,2669,2619,2479,2204,1907,1629,1491,1371,1408,1779,2111,2402,2550,2573,2470,2336,2123,1727,1527,1562,1635,1675,1925,2227,2435,2543,2508,2383,2272,2146,1913,1725,1569,1560,1496,1641,1950,2094,2362,2568,2622,2567,2433,2180,1907,1659,1533,1443,1488,1812,2100,2362,2489,2520,2419,2320,2085,1737,1630,1645,1712,1722,1930,2187,2366,2463,2437,2346,2266,2147,1934,1764,1618,1615,1548,1686,1914,2071,2366,2539,2593,2523,2397,2155,1905,1677,1564,1501,1549,1828,2091,2328,2445,2479,2385,2303,2040,1769,1711,1706,1767,1752,1928,2148,2312,2401,2387,2328,2263,2144,1954,1792,1660,1652,1592,1708,1874,2076,2369,2520,2569,2489,2368,2133,1902,1686,1590,1552,1595,1838,2087,2298,2418,2445,2369,2280,2005,1819,1771,1756,1805,1771,1922,2114,2267,2349,2353,2319,2260,2143,1969,1810,1694,1677,1633,1708,1846,2094,2365,2507,2544,2460,2341,2113,1898,1693,1615,1593,1626,1846,2081,2275,2397,2415,2359,2242,1987,1868,1811,1796,1826,1783,1914,2088,2232,2312,2332,2314,2253,2140,1977,1824,1719,1696,1665,1696,1844,2121,2365,2501,2521,2436,2313,2095,1890,1699,1640,1629,1652,1858,2078,2261,2379,2393,2349,2198,1989,1910,1844,1829,1840,1794,1902,2067,2201,2283,2319,2310,2243,2139,1981,1839,1738,1715,1688,1678,1858,2140,2363,2491,2497,2412,2284,2080,1882,1709,1664,1660,1669,1864,2069,2248,2359,2379,2331,2157,2010,1945,1876,1853,1852,1800,1887,2045,2171,2261,2312,2308,2237,2144,1988,1858,1752,1739,1695,1663,1880,2150,2362,2480,2477,2391,2263,2071,1878,1722,1690,1685,1683,1870,2061,2240,2340,2372,2304,2132,2040,1973,1904,1871,1859,1800,1874,2026,2146,2247,2308,2303,2232,2144,1990,1872,1763,1759,1687,1662,1912,2160,2365,2465,2459,2368,2241,2056,1872,1736,1714,1703,1699,1879,2060,2236,2327,2368,2268,2123,2070,1994,1929,1881,1864,1797,1867,2012,2131,2241,2308,2295,2227,2140,1994,1882,1775,1775,1673,1680,1943,2171,2368,2450,2440,2342,2221,2040,1869,1752,1735,1717,1716,1882,2060,2227,2318,2353,2226,2129,2092,2011,1946,1886,1866,1790,1858,1993,2117,2237,2305,2285,2223,2135,2000,1886,1790,1778,1659,1708,1965,2181,2364,2434,2418,2315,2200,2025,1871,1770,1754,1731,1730,1883,2060,2214,2312,2327,2196,2151,2114,2032,1961,1893,1866,1785,1847,1977,2108,2237,2300,2278,2220,2132,2007,1891,1808,1767,1656,1745,1981,2190,2355,2416,2394,2292,2181,2015,1878,1790,1767,1744,1742,1885,2061,2205,2309,2293,2182,2174,2127,2050,1967,1896,1860,1780,1837,1967,2104,2237,2292,2272,2214,2130,2012,1897,1821,1751,1671,1778,1996,2198,2345,2401,2370,2272,2163,2008,1888,1809,1778,1758,1752,1892,2060,2201,2301,2257,2186,2191,2141,2063,1972,1898,1854,1778,1830,1961,2106,2237,2285,2268,2208,2132,2014,1908,1826,1737,1699,1804,2009,2199,2332,2382,2346,2252,2146,2006,1901,1825,1788,1773,1760,1897,2054,2197,2280,2229,2201,2204,2155,2073,1977,1898,1850,1776,1821,1957,2107,2234,2276,2264,2202,2135,2016,1922,1821,1733,1733,1824,2021,2195,2318,2361,2325,2235,2133,2009,1916,1837,1798,1784,1767,1902,2049,2196,2254,2214,2218,2213,2168,2077,1979,1895,1847,1773,1816,1957,2109,2228,2270,2257,2198,2136,2017,1933,1808,1739,1761,1841,2031,2189,2305,2340,2304,2216,2122,2012,1927,1845,1807,1791,1777,1906,2049,2191,2223,2210,2230,2219,2173,2076,1977,1888,1841,1770,1816,1962,2113,2221,2264,2249,2195,2132,2021,1934,1791,1758,1790,1861,2042,2184,2293,2319,2285,2199,2114,2018,1938,1853,1818,1800,1789,1909,2051,2180,2196,2217,2239,2225,2176,2075,1976,1883,1839,1769,1818,1967,2113,2214,2258,2240,2192,2128,2028,1928,1783,1785,1816,1880,2045,2175,2274,2297,2265,2182,2109,2027,1947,1861,1827,1807,1799,1908,2054,2156,2177,2231,2246,2233,2178,2074,1972,1878,1834,1767,1822,1974,2111,2208,2253,2235,2192,2127,2036,1914,1787,1815,1836,1897,2044,2167,2256,2277,2246,2169,2110,2037,1953,1871,1835,1817,1809,1912,2056,2131,2174,2243,2252,2239,2175,2072,1965,1873,1830,1770,1832,1983,2109,2205,2244,2230,2188,2126,2036,1896,1804,1840,1856,1913,2045,2161,2239,2260,2229,2160,2112,2043,1957,1879,1841,1828,1818,1921,2051,2110,2181,2250,2256,2239,2171,2067,1959,1871,1828,1777,1844,1988,2106,2201,2236,2227,2182,2129,2030,1887,1828,1862,1876,1922,2044,2150,2222,2242,2213,2154,2116,2048,1962,1888,1847,1840,1825,1928,2037,2095,2190,2254,2259},
/*open hat*/		{1888,2229,2007,2200,1646,1483,2043,1748,2249,1850,1582,2440,2409,2016,2079,1927,2190,2163,2488,1934,2144,2063,2002,2109,1966,1997,2116,1876,2309,1965,2573,2933,1529,2568,1714,1746,1586,2299,2025,2059,2602,1808,2513,1858,1941,1893,2296,1724,2225,2128,1661,2522,1827,1781,2282,2270,1432,2506,1793,2016,2353,1560,2299,2087,1913,1948,2145,1899,2458,2785,1703,2523,2114,1378,2753,2032,1758,1974,2312,1799,2171,2084,1854,2167,1807,2316,2083,1637,2284,2025,2143,2169,1795,1665,2376,2366,1507,2447,1836,1994,2080,2036,1875,2596,1412,2273,2220,1645,2538,1709,2049,1966,2422,1586,2169,2371,1521,2320,1970,1657,3060,1039,2369,2017,2019,2247,1571,2640,1305,2917,1136,2501,2069,1824,2426,1418,2459,2124,1887,1868,2363,1651,2354,1837,2084,2101,1795,2579,1901,2112,2233,1636,2453,1441,2677,1633,2112,2251,1574,2818,1192,2750,1325,2537,1860,2009,2177,1791,2344,1711,2321,1885,2078,1962,2169,1820,2293,1802,2360,1623,2100,2339,1920,2482,2253,1971,2066,1866,2348,2032,1377,3219,858,2924,1537,1925,2615,1398,2624,1519,2474,1547,2471,1720,2070,2269,2265,1312,2480,1875,2114,2236,1437,2964,1238,2362,2147,1552,2507,2002,1756,2263,1886,2304,1482,2640,1780,2216,2038,1512,2859,1280,2637,1779,2008,2128,1955,2349,1468,2568,1766,1788,2548,1675,2236,2117,1613,2355,2112,1844,2289,1657,2213,2165,1729,2441,1512,2769,1212,2558,2365,1050,3050,1179,2681,1577,2301,2114,1809,2177,1892,2544,1144,2678,2087,1676,2256,1885,2195,2024,1867,2196,2119,1717,2299,2010,1876,2399,1808,1879,2012,2579,1677,1883,2444,1497,2578,1701,2309,1974,1713,2509,1565,2495,1729,2351,1753,1907,2385,1766,2411,1689,2308,1804,2013,2344,1812,1960,2076,2198,1723,2557,1742,1984,2086,1807,2648,1513,2258,1951,1894,2424,1913,1929,2033,1960,2141,2160,1944,2108,1913,1876,2335,1961,1991,2048,2113,1974,1908,2185,1932,2436,1548,2268,2077,1797,2360,1787,2153,1885,2217,1765,2374,2035,1800,2117,1899,2485,1513,2348,1915,1948,2423,1808,1933,2076,1994,2018,2478,1533,2422,1909,1657,2719,1469,2302,1989,1930,2186,2238,1810,1900,2343,1619,2339,1946,2049,2212,2099,1634,2337,2149,1564,2439,2105,1666,2437,1877,2055,2076,1836,2148,2031,2291,1800,2435,1232,2630,2047,1685,2408,1655,2373,1756,2551,1584,2200,2064,1701,2517,1791,2037,2262,1864,1943,2399,1798,1830,2514,1640,2224,2206,1801,2048,2045,2252,1566,2493,1806,2475,1520,1983,2498,1679,2205,1933,2129,2018,2258,1857,1789,2505,1778,1859,2527,1496,2675,1572,2168,2036,2117,1987,2112,2026,1750,2409,1849,2343,1576,2456,1599,2318,2094,2208,1649,2063,2346,1500,2733,1351,2619,1803,2064,2272,1547,2466,1884,1985,2010,2219,2071,1962,1922,2163,2172,1866,1915,2293,1859,2055,2314,1918,1847,2298,1866,1968,2286,2075,2015,1611,2406,1787,2269,2251,1551,2442,1718,2257,2105,1731,2451,1765,2131,2004,2226,1808,1981,2450,1939,1847,1897,2296,1884,2118,1946,2557,1519,1994,2590,1302,2689,1783,2066,1909,2043,2177,1899,2609,1226,2626,2057,1499,2717,1424,2406,1989,1842,2357,1850,2349,1564,2418,1908,2279,1860,1765,2307,2063,1962,2064,2335,1463,2495,1899,2121,1957,2195,1899,2093,2202,1445,2757,1608,2154,2264,1541,2690,1751,1913,1957,2135,2202,2084,2037,1740,2420,1867,1955,2118,2188,1765,2330,1851,1901,2448,1830,2049,2242,1892,2059,2250,1450,2429,2173,1737,2276,2036,1802,2568,1556,2196,2243,1650,2339,1848,2135,2037,2294,1556,2360,2081,2041,2078,1644,2326,2145,2127,1684,2474,1772,1830,2569,1606,2348,2101,2081,1589,2155,2054,2121,2530,1409,2297,1956,2168,1849,2267,1805,2095,2091,1930,2314,1973,2139,1828,2220,1952,2053,1855,2104,2254,1740,2255,2266,1659,2387,1694,2412,1874,2100,2140,1585,2530,1447,2716,1566,2255,2231,1650,2647,1448,2160,2253,1881,1955,2263,1982,2043,1943,1876,2505,1913,1859,2243,1975,1839,2126,2252,1826,2345,1734,2292,2013,1672,2621,1526,2273,2025,1951,2130,2011,2035,2051,2527,1328,2300,2369,1411,2513,2034,1820,2132,2350,1582,2227,2129,1646,2551,1854,1919,2112,2290,1819,1962,2280,1819,2325,1782,2301,2014,1554,2604,1925,1837,2282,2160,1472,2595,2021,1702,2394,1792,1836,2593,1931,1597,2735,1444,2196,2459,1424,2398,2178,1626,2104,2183,2241,1893,2095,1971,2170,1752,2007,2617,1491,2175,2001,2141,2040,2301,1629,2036,2626,1250,2718,1732,1851,2245,2275,1893,1864,2150,1836,2644,1514,2124,2265,1889,1870,2192,2360,1721,2043,2110,2183,2071,1585,2425,2082,1627,2442,2168,1532,2469,2060,1502,2754,1851,1823,1935,2215,1926,2178,2286,1822,2408,1420,2319,2352,1419,2453,2146,1682,2196,2115,1932,2046,2339,1860,2072,1740,2306,2227,1574,2326,2286,1936,1635,2469,1674,2267,2253,1927,1709,2440,2048,1585,2884,1309,2298,1927,2050,2366,1576,2294,2086,2117,1842,2013,2250,1960,2202,1994,1859,2261,1901,2232,1926,1652,2456,2051,2011,2150,2064,1785,2154,2235,1532,2362,2497,1242,2625,1973,1584,2571,1738,2482,1691,2313,1802,1844,2270,1748,2689,1557,2408,2037,1875,2093,1551,2706,1883,1816,2246,2137,1984,1772,2367,2095,1633,2463,2007,1705,2547,1721,1936,2307,1936,2206,2023,1991,1732,2467,1910,1814,2347,1674,2550,1888,1840,2483,1712,2118,2275,1516,2345,2164,1690,2208,2428,1429,2375,2287,1337,2745,1814,1738,2462,2100,1571,2429,1874,2170,2156,1983,2042,1684,2387,1760,2296,1852,2338,2026,1858,2271,2072,2140,1779,1795,2341,2111,1774,2127,2362,2031,1453,2817,1667,1803,2521,1983,1689,2393,1599,2376,2396,1369,2413,1998,2275,1752,2442,1536,2128,2072,1893,2412,2009,1981,2203,2145,1614,2021,2219,2150,1977,1961,2089,2076,1829,2635,1616,1862,2377,2071,2050,2129,1538,2209,2378,2001,2257,1229,2811,1892,1938,1920,2129,2191,1677,2353,2110,2285,1454,2512,1954,1709,2273,2297,1808,1771,2295,2434,1683,1895,2374,1810,1920,2097,2563,1829,1880,1725,2381,2339,1846,1665,2510,2069,1616,2407,1995,1903,1936,2421,1992,2263,1611,2006,2347,1654,2308,2216}
};

/**
 * struct used to store a GPIO and a GPIO_pin
 * added by Hermann
 */
typedef struct {
	GPIO_TypeDef * GPIO;
	uint16_t pin;
}LED_GPIO;

// Debugging stuff
uint64_t debugLED_counter_6 = 0, debugLED_counter_5 = 0, debugLED_counter_4 = 0, debugLED_counter_3 = 0, lcd_timer = 0;

// ==========================================================================================
// ============================ Function Declarations =======================================
// ==========================================================================================

void startUpConfigs(void); 			// Function to run the start up configurations.
void delay_ms(uint32_t milli);
void error_(void);					// function to flash the on-board LEDs when an error occurs
void lcd_flush_write(uint8_t row_num, char* msg);
void updateLED(uint8_t pin, bool On, uint8_t type); // implemented in UIUdate
LED_GPIO getGPIO(uint8_t pin, uint8_t type); // implemented in UIUdate
void loadFromEeprom(void);
void saveToEeprom(void);
bool isChannelEmpty(uint8_t index);
void lcd_write(uint8_t col_num, uint8_t row_num, char* msg);
void select_beat(void);

// ==========================================================================================
// ============================ Function Implementations =====================================
// ==========================================================================================

/**
 * Run start up configurations for the STM080. These include
 * > Interrupt configurations
 * > GPIO inputs and outputs
 * > EPROM and On-Board audio interface configutations
 */
void startUpConfigs(){

	// config for LCD
	TM_HD44780_Init(LCD_COLUMNS, LCD_ROWS);
	TM_HD44780_Clear();

	//	turn on reset LED
	GPIO_SetBits(GPIOB, GPIO_PIN_5);
	lcd_write(4, 0, "WELCOME");
	lcd_write(5, 1, "ST080");

	// +++++++++++++++++ configure output pins ++++++++++++++++++++++++

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
	/* Enable the clock for all ports*/
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);

	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure Button pin as output*/
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
	
	// pins A7, A8, A10
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_10;
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	// Pins B6-9 and B4 and B5
	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	// Pins C0-11
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
	GPIO_Init(GPIOC, &GPIO_InitStructure);

	// Pins E0-3
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;
	GPIO_Init(GPIOE, &GPIO_InitStructure);

	// turn on reset LED
	GPIO_SetBits(GPIOB, GPIO_PIN_5);

	// +++++++++++++++++ configure input pins ++++++++++++++++++++++++

	/* Configure Button pin as input */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;		// Input mode
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;		// Push - Pull
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;		// To detect a logic high

	// D4 D6 D7
	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_4 | GPIO_PIN_6 | GPIO_PIN_7;;
	GPIO_Init(GPIOD, &GPIO_InitStructure);

	// Pins A0-3, 5
	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5;
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	// E8-15
	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_Pin_15;
	GPIO_Init(GPIOE, &GPIO_InitStructure);

	// +++++++++++++++++ configure interrupt pins ++++++++++++++++++++++++

	// D0-3, E4-7
	bool fail = false;
	if (TM_EXTI_Attach(GPIOD, GPIO_Pin_0, TM_EXTI_Trigger_Rising) != TM_EXTI_Result_Ok){
		// PD0
		fail = true;
	} else if (TM_EXTI_Attach(GPIOD, GPIO_Pin_1, TM_EXTI_Trigger_Rising) != TM_EXTI_Result_Ok){
		// PD1
		fail = true;
	} else if (TM_EXTI_Attach(GPIOD, GPIO_Pin_2, TM_EXTI_Trigger_Rising) != TM_EXTI_Result_Ok){
		// PD2
		fail = true;
	} else if (TM_EXTI_Attach(GPIOD, GPIO_Pin_3, TM_EXTI_Trigger_Rising) != TM_EXTI_Result_Ok){
		// PD3
		fail = true;
	} else if (TM_EXTI_Attach(GPIOE, GPIO_Pin_4, TM_EXTI_Trigger_Rising) != TM_EXTI_Result_Ok){
		// PE4
		fail = true;
	} else if (TM_EXTI_Attach(GPIOE, GPIO_Pin_5, TM_EXTI_Trigger_Rising) != TM_EXTI_Result_Ok){
		// PE5
		fail = true;
	} else if (TM_EXTI_Attach(GPIOE, GPIO_Pin_6, TM_EXTI_Trigger_Rising) != TM_EXTI_Result_Ok){
		// PE6
		fail = true;
	} else if (TM_EXTI_Attach(GPIOE, GPIO_Pin_7, TM_EXTI_Trigger_Rising) != TM_EXTI_Result_Ok){
		// PA7
		fail = true;
	}
	if (fail){
		// failed initialising interrupts.
		error_();
	}

	// Configure Eeprom
	EEPROM_Configuration();
	loadFromEeprom();		// Load the channel rack from the eeprom

	// config for Tempo
	Tempo_Configuration();

	// ask user to select song to edit
	select_beat();

	//Turn off reset LED
	GPIO_ResetBits(GPIOB, GPIO_PIN_5);

	// initialise debugging LEDs

	/* Initialize LEDs */
//	STM_EVAL_LEDInit(LED3);
//	STM_EVAL_LEDInit(LED4);
//	STM_EVAL_LEDInit(LED5);
//	STM_EVAL_LEDInit(LED6);

	/* Turn off LEDs */
//	STM_EVAL_LEDOff(LED3);
//	STM_EVAL_LEDOff(LED4);
//	STM_EVAL_LEDOff(LED5);
//	STM_EVAL_LEDOff(LED6);
//	MODE = COMPOSER;

}

/**
 * IRQ Handler for:
 * >> instrument buttons (line 0-3)
 * >> mode select (line 4-6)
 * >> save button (line 7)
 *
 */
void TM_EXTI_Handler(uint16_t GPIO_Pin) {

	// +++ debouncing logic (30 milliseconds) +++
	current = tickTime;
	if ((current - previous) < 30) {
		previous = current;
		return;
	}

	/* Handle external line 0 interrupts */
	// button for instrument 1
	if (GPIO_Pin == GPIO_Pin_0) {
		if (MODE == COMPOSER){
			// Change the instrument on the channel rack to the first one
			current_sample = INSTR_1;
			UPDATE_LCD = true;
		}
		else if (MODE == FREESTYLE) {
			PAD_STATE[0] = true;
			STATE_CHANGED = true;
			// Button for the first instrument has been pressed in FREESTYLE mode. Do something.
			played_inst = played_inst + 2;
		}
	}

	/* Handle external line 1 interrupts */
	// button for instrument 2
	else if (GPIO_Pin == GPIO_Pin_1) {
		if (MODE == COMPOSER){
			// change the instrument on the channel rack to the second one
			current_sample = INSTR_2;
			//update the instrument being edited on LCD
			UPDATE_LCD = true;
		}
		else if (MODE == FREESTYLE) {
			PAD_STATE[1] = true;
			STATE_CHANGED = true;
			// Button for the second instrument has been pressed in FREESTYLE mode. Do something.
			played_inst = played_inst + 4;
		}
	}

	/* Handle external line 2 interrupts */
	// button for instrument 3
	else if (GPIO_Pin == GPIO_Pin_2) {
		if (MODE == COMPOSER){
			// change the instrument on the channel rack to the third one
			current_sample = INSTR_3;
			UPDATE_LCD = true;
		}
		else if (MODE == FREESTYLE) {
			PAD_STATE[2] = true;
			STATE_CHANGED = true;
			// Button for the third instrument has been pressed in FREESTYLE mode. Do something.
			played_inst = played_inst + 8;
		}
	}

	/* Handle external line 3 interrupts */
	// button for instrument 4
	else if (GPIO_Pin == GPIO_Pin_3) {
		if (MODE == COMPOSER){
			// change the instrument on the channel rack to the forth one
			current_sample = INSTR_4;
			UPDATE_LCD = true;
		}
		else if (MODE == FREESTYLE) {
			PAD_STATE[3] = true;
			STATE_CHANGED = true;
			// Button for the forth instrument has been pressed in FREESTYLE mode. Do something.
			played_inst = played_inst + 16;
		}
	}

	/* Handle external line 4 interrupts */
	// switch to COMPOSER MODE
	else if (GPIO_Pin == GPIO_Pin_4) {
		MODE = COMPOSER;
		status = true;
		resetLEDs = true;
//		update the Mode on LCD
		UPDATE_LCD = true;
	}

	/* Handle external line 5 interrupts */
	// switch to PLAYBACK MODE
	else if (GPIO_Pin == GPIO_Pin_5) {
		MODE = PLAYBACK;
		resetLEDs = true;
//		update the Mode on LCD
		UPDATE_LCD = true;
	}

	/* Handle external line 6 interrupts */
	// switch to FREESTYLE MODE
	else if (GPIO_Pin == GPIO_Pin_6) {
//		update the Mode on LCD
		UPDATE_LCD = true;
		MODE = FREESTYLE;
		resetLEDs = true;
	}

	/* Handle external line 7 interrupts */
	// Save pin
	else if (GPIO_Pin == GPIO_Pin_7) {
		if (MODE == COMPOSER || MODE == PLAYBACK) {
			MODE = SAVE;
			status = true;
			resetLEDs = true;
	//		update the Mode on LCD
			UPDATE_LCD = true;
		}
		// Save the channelRack Array to the EEPROM
	}

	previous = current; // for debouncing
}


// Remap the LCD functions
/**
 * Method to flush the LCD screen and write a new message on the specified row
 *
 * @param msg String to write to teh LCD screen
 * @param row_num
 *
 */
void lcd_flush_write(uint8_t row_num, char* msg){
	TM_HD44780_Clear();
	TM_HD44780_Puts(0,row_num,msg);
}

/**
 *
 * @brief Method to add a new message on the specified column row
 * @param msg String to write to teh LCD screen
 * @param col_num
 * @param col_num
 *
 */
void lcd_write(uint8_t col_num, uint8_t row_num, char* msg){
	TM_HD44780_Puts(col_num,row_num,msg);
}

/*
 * 	@brief	Saves the array "channelRack[][][]" to the eeprom, the size of this array is CHANNEL_RACK_SIZE
 */
void saveToEeprom(){
	int i,j,k,l=0;
	uint8_t temp = 0;
	for (i = 0; i < 16; ++i) {
		for (j = 0; j < 4; ++j) {
			for (k = 0; k < 16; ++k, ++l) {
				temp = (uint8_t) channelRack[i][j][k];
				EEPROM_Write(l, temp);
			}
		}
	} // end of for loops
}// end of saveToEeprom

/*
 * @brief	Initializes the "channelRack[][][]" using data read from the eeprom
 */
void loadFromEeprom(){
	int i, j, k, l = 0;
	bool temp = false;
	for (i = 0; i < 16; ++i) {
		for (j = 0; j < 4; ++j) {
			for (k = 0; k < 16; ++k, ++l) {
				temp = (bool) EEPROM_Read(l);
				channelRack[i][j][k] = temp;
			}
		}
	} // end of for loops
} // end of loadFromEeprom

/**
 * @brief	Check if a channel is empty
 */
bool isChannelEmpty(uint8_t index){
	int j,k=0;
	for (j=0;j<4;++j){
		for (k=0;k<16;++k){
			if(channelRack[index][j][k]!=0){
				return false;
			}
		}
	}
	return true;
}


/**
  * @brief  Delay in ms
  * @param  integer amount of milliseconds
  * @retval None
  */
void delay_ms(uint32_t milli)
{
	uint32_t delay = milli * 17612;              // approximate loops per ms at 168 MHz, Debug config
	for(; delay != 0; delay--);
}

void select_beat(){
	lcd_flush_write(1, "Select a song!");
	lcd_write(5, 0, "ST080");
	MODE=ENTER;
}

/**
 * Function to flash the LEDs when an error occurs
 */
void error_(void)
{
	MODE = ERROR_MODE;

	/* Initialize LEDs */
	STM_EVAL_LEDInit(LED3);
	STM_EVAL_LEDInit(LED4);
	STM_EVAL_LEDInit(LED5);
	STM_EVAL_LEDInit(LED6);

	/* Turn off some LEDs */
	STM_EVAL_LEDOff(LED3);
	STM_EVAL_LEDOff(LED4);
	/* Turn on some LEDs */
	STM_EVAL_LEDOn(LED5);
	STM_EVAL_LEDOn(LED6);

	lcd_flush_write(0, "ERROR! Reset device");

	GPIO_SetBits(GPIOB, 6);
	GPIO_SetBits(GPIOB, 7);
	GPIO_SetBits(GPIOB, 8);
	GPIO_SetBits(GPIOB, 9);

	while(1){
		delay_ms(500);
		STM_EVAL_LEDToggle(LED3);
		STM_EVAL_LEDToggle(LED4);
		STM_EVAL_LEDToggle(LED5);
		STM_EVAL_LEDToggle(LED6);
	}
}
#endif /* UTILS080_H_ */
